// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/lending/v1/lending.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Market represents a lending market for a specific token
type Market struct {
	// denom is the denomination of the token
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// total_supplied is the total amount supplied to the market
	TotalSupplied cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=total_supplied,json=totalSupplied,proto3,customtype=cosmossdk.io/math.Int" json:"total_supplied"`
	// total_borrowed is the total amount borrowed from the market
	TotalBorrowed cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=total_borrowed,json=totalBorrowed,proto3,customtype=cosmossdk.io/math.Int" json:"total_borrowed"`
	// global_reward_index tracks the global interest accrual for yield distribution
	GlobalRewardIndex cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=global_reward_index,json=globalRewardIndex,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"global_reward_index"`
	// rise_denom is the denomination of the yield-bearing token (e.g., "riseUSDC")
	RiseDenom string `protobuf:"bytes,5,opt,name=rise_denom,json=riseDenom,proto3" json:"rise_denom,omitempty"`
}

func (m *Market) Reset()         { *m = Market{} }
func (m *Market) String() string { return proto.CompactTextString(m) }
func (*Market) ProtoMessage()    {}
func (*Market) Descriptor() ([]byte, []int) {
	return fileDescriptor_43243ba4314c0e35, []int{0}
}
func (m *Market) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Market) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Market.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Market) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Market.Merge(m, src)
}
func (m *Market) XXX_Size() int {
	return m.Size()
}
func (m *Market) XXX_DiscardUnknown() {
	xxx_messageInfo_Market.DiscardUnknown(m)
}

var xxx_messageInfo_Market proto.InternalMessageInfo

func (m *Market) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Market) GetRiseDenom() string {
	if m != nil {
		return m.RiseDenom
	}
	return ""
}

// UserPosition tracks a user's supply position in a specific market
type UserPosition struct {
	// user_address is the address of the user
	UserAddress string `protobuf:"bytes,1,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	// denom is the denomination of the supplied token
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	// amount is the amount of rise tokens the user holds
	Amount cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	// last_reward_index is the user's last recorded reward index for yield calculation
	LastRewardIndex cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=last_reward_index,json=lastRewardIndex,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"last_reward_index"`
}

func (m *UserPosition) Reset()         { *m = UserPosition{} }
func (m *UserPosition) String() string { return proto.CompactTextString(m) }
func (*UserPosition) ProtoMessage()    {}
func (*UserPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_43243ba4314c0e35, []int{1}
}
func (m *UserPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPosition.Merge(m, src)
}
func (m *UserPosition) XXX_Size() int {
	return m.Size()
}
func (m *UserPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPosition.DiscardUnknown(m)
}

var xxx_messageInfo_UserPosition proto.InternalMessageInfo

func (m *UserPosition) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *UserPosition) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// Borrow represents an active borrow position
type Borrow struct {
	// id is the unique identifier of the borrow
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// borrower is the address of the borrower
	Borrower string `protobuf:"bytes,2,opt,name=borrower,proto3" json:"borrower,omitempty"`
	// amount is the borrowed amount with denomination
	Amount types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	// collateral_pool_id is the liquidity pool id used as collateral
	CollateralPoolId uint64 `protobuf:"varint,4,opt,name=collateral_pool_id,json=collateralPoolId,proto3" json:"collateral_pool_id,omitempty"`
	// collateral_position_id is the position id within the pool
	CollateralPositionId uint64 `protobuf:"varint,5,opt,name=collateral_position_id,json=collateralPositionId,proto3" json:"collateral_position_id,omitempty"`
	// block_height is the block height when the borrow was created
	BlockHeight int64 `protobuf:"varint,6,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *Borrow) Reset()         { *m = Borrow{} }
func (m *Borrow) String() string { return proto.CompactTextString(m) }
func (*Borrow) ProtoMessage()    {}
func (*Borrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_43243ba4314c0e35, []int{2}
}
func (m *Borrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Borrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Borrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Borrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Borrow.Merge(m, src)
}
func (m *Borrow) XXX_Size() int {
	return m.Size()
}
func (m *Borrow) XXX_DiscardUnknown() {
	xxx_messageInfo_Borrow.DiscardUnknown(m)
}

var xxx_messageInfo_Borrow proto.InternalMessageInfo

func (m *Borrow) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Borrow) GetBorrower() string {
	if m != nil {
		return m.Borrower
	}
	return ""
}

func (m *Borrow) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *Borrow) GetCollateralPoolId() uint64 {
	if m != nil {
		return m.CollateralPoolId
	}
	return 0
}

func (m *Borrow) GetCollateralPositionId() uint64 {
	if m != nil {
		return m.CollateralPositionId
	}
	return 0
}

func (m *Borrow) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*Market)(nil), "sunrise.lending.v1.Market")
	proto.RegisterType((*UserPosition)(nil), "sunrise.lending.v1.UserPosition")
	proto.RegisterType((*Borrow)(nil), "sunrise.lending.v1.Borrow")
}

func init() { proto.RegisterFile("sunrise/lending/v1/lending.proto", fileDescriptor_43243ba4314c0e35) }

var fileDescriptor_43243ba4314c0e35 = []byte{
	// 563 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcd, 0x6e, 0xd4, 0x30,
	0x10, 0xc7, 0x37, 0xe9, 0x76, 0x45, 0xdd, 0x52, 0xa8, 0x59, 0x50, 0x5a, 0x44, 0x5a, 0x7a, 0xaa,
	0x04, 0x4d, 0xb4, 0x80, 0xc4, 0x81, 0x13, 0xdb, 0x1e, 0x88, 0x04, 0x52, 0x95, 0x8a, 0x0b, 0x12,
	0x8a, 0x9c, 0xd8, 0xca, 0x5a, 0xf5, 0x7a, 0x56, 0xb6, 0xb7, 0x1f, 0x0f, 0xc0, 0x15, 0xf1, 0x30,
	0x7d, 0x88, 0x1e, 0xab, 0x9e, 0x10, 0x87, 0x0a, 0xb5, 0x2f, 0x82, 0x1c, 0xbb, 0xbb, 0x5b, 0x21,
	0x2e, 0x15, 0x37, 0xcf, 0x7f, 0x66, 0x7e, 0xf6, 0xcc, 0x64, 0x82, 0x36, 0xf4, 0x58, 0x2a, 0xae,
	0x59, 0x2a, 0x98, 0xa4, 0x5c, 0xd6, 0xe9, 0x61, 0xef, 0xe6, 0x98, 0x8c, 0x14, 0x18, 0xc0, 0xd8,
	0x47, 0x24, 0x37, 0xf2, 0x61, 0x6f, 0x2d, 0xae, 0x40, 0x0f, 0x41, 0xa7, 0x25, 0xd1, 0x2c, 0x3d,
	0xec, 0x95, 0xcc, 0x90, 0x5e, 0x5a, 0x01, 0x97, 0x2e, 0x67, 0x6d, 0xd5, 0xf9, 0x8b, 0xc6, 0x4a,
	0x9d, 0xe1, 0x5d, 0xdd, 0x1a, 0x6a, 0x70, 0xba, 0x3d, 0x39, 0x75, 0xf3, 0x2c, 0x44, 0x9d, 0x4f,
	0x44, 0x1d, 0x30, 0x83, 0xbb, 0x68, 0x9e, 0x32, 0x09, 0xc3, 0x28, 0xd8, 0x08, 0xb6, 0x16, 0x72,
	0x67, 0xe0, 0x1c, 0x2d, 0x1b, 0x30, 0x44, 0x14, 0x7a, 0x3c, 0x1a, 0x09, 0xce, 0x68, 0x14, 0x5a,
	0x77, 0xff, 0xc5, 0xd9, 0xe5, 0x7a, 0xeb, 0xd7, 0xe5, 0xfa, 0x63, 0x77, 0x89, 0xa6, 0x07, 0x09,
	0x87, 0x74, 0x48, 0xcc, 0x20, 0xc9, 0xa4, 0xb9, 0x38, 0xdd, 0x46, 0xfe, 0xf6, 0x4c, 0x9a, 0xfc,
	0x7e, 0x83, 0xd8, 0xf7, 0x84, 0x29, 0xb3, 0x04, 0xa5, 0xe0, 0x88, 0xd1, 0x68, 0xee, 0xae, 0xcc,
	0xbe, 0x27, 0x60, 0x82, 0x1e, 0xd5, 0x02, 0x4a, 0x22, 0x0a, 0xc5, 0x8e, 0x88, 0xa2, 0x05, 0x97,
	0x94, 0x1d, 0x47, 0xed, 0x06, 0xdc, 0xf3, 0xe0, 0xa7, 0x7f, 0x83, 0x3f, 0xb2, 0x9a, 0x54, 0x27,
	0xbb, 0xac, 0x9a, 0xc1, 0xef, 0xb2, 0x2a, 0x5f, 0x71, 0xb4, 0xbc, 0x81, 0x65, 0x96, 0x85, 0x9f,
	0x21, 0x64, 0xe7, 0x51, 0xb8, 0x2e, 0xcd, 0x37, 0x5d, 0x5a, 0xb0, 0xca, 0xae, 0x15, 0x36, 0xbf,
	0x85, 0x68, 0xe9, 0xb3, 0x66, 0x6a, 0x0f, 0x34, 0x37, 0x1c, 0x24, 0x7e, 0x87, 0x96, 0xc6, 0x9a,
	0xa9, 0x82, 0x50, 0xaa, 0x98, 0xd6, 0xae, 0xaf, 0xfd, 0xe8, 0xe2, 0x74, 0xbb, 0xeb, 0x2f, 0x7a,
	0xef, 0x3c, 0xfb, 0x46, 0x71, 0x59, 0xe7, 0x8b, 0x36, 0xda, 0x4b, 0xd3, 0x69, 0x84, 0xb3, 0xd3,
	0xd8, 0x41, 0x1d, 0x32, 0x84, 0xb1, 0x34, 0x77, 0xe9, 0x98, 0x4f, 0xc5, 0x5f, 0xd1, 0x8a, 0x20,
	0xda, 0xfc, 0xa7, 0x46, 0x3d, 0xb0, 0xac, 0x99, 0x36, 0x6d, 0x7e, 0x0f, 0x51, 0xc7, 0x8d, 0x05,
	0x2f, 0xa3, 0x90, 0xd3, 0xa6, 0xee, 0x76, 0x1e, 0x72, 0x8a, 0xdf, 0xa0, 0x7b, 0x7e, 0xe4, 0xca,
	0x7f, 0x46, 0xff, 0xee, 0xc6, 0x24, 0x12, 0xbf, 0xbd, 0x55, 0xf4, 0xe2, 0xab, 0xd5, 0xc4, 0x27,
	0xd8, 0x2d, 0x48, 0xfc, 0x16, 0x24, 0x3b, 0xc0, 0x65, 0xbf, 0x6d, 0xdf, 0x3f, 0x29, 0xf4, 0x25,
	0xc2, 0x15, 0x08, 0x41, 0x0c, 0x53, 0x44, 0x14, 0x23, 0x00, 0x51, 0x70, 0xda, 0x54, 0xda, 0xce,
	0x1f, 0x4e, 0x3d, 0x7b, 0x00, 0x22, 0xb3, 0x8f, 0x7b, 0x72, 0x2b, 0xda, 0x4d, 0xd1, 0x66, 0xcc,
	0x37, 0x19, 0xdd, 0xd9, 0x0c, 0xe7, 0xcc, 0x28, 0x7e, 0x8e, 0x96, 0x4a, 0x01, 0xd5, 0x41, 0x31,
	0x60, 0xbc, 0x1e, 0x98, 0xa8, 0xb3, 0x11, 0x6c, 0xcd, 0xe5, 0x8b, 0x8d, 0xf6, 0xa1, 0x91, 0xfa,
	0xd9, 0xd9, 0x55, 0x1c, 0x9c, 0x5f, 0xc5, 0xc1, 0xef, 0xab, 0x38, 0xf8, 0x71, 0x1d, 0xb7, 0xce,
	0xaf, 0xe3, 0xd6, 0xcf, 0xeb, 0xb8, 0xf5, 0x25, 0xad, 0xb9, 0x19, 0x8c, 0xcb, 0xa4, 0x82, 0x61,
	0xea, 0xb7, 0x5d, 0x90, 0x13, 0xa6, 0x6e, 0x8c, 0xf4, 0x78, 0xf2, 0x7b, 0x30, 0x27, 0x23, 0xa6,
	0xcb, 0x4e, 0xb3, 0xb5, 0xaf, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x25, 0xa7, 0x54, 0xe7, 0x3e,
	0x04, 0x00, 0x00,
}

func (m *Market) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Market) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Market) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RiseDenom) > 0 {
		i -= len(m.RiseDenom)
		copy(dAtA[i:], m.RiseDenom)
		i = encodeVarintLending(dAtA, i, uint64(len(m.RiseDenom)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.GlobalRewardIndex.Size()
		i -= size
		if _, err := m.GlobalRewardIndex.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLending(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.TotalBorrowed.Size()
		i -= size
		if _, err := m.TotalBorrowed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLending(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TotalSupplied.Size()
		i -= size
		if _, err := m.TotalSupplied.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLending(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLending(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.LastRewardIndex.Size()
		i -= size
		if _, err := m.LastRewardIndex.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLending(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLending(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLending(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintLending(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Borrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Borrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Borrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintLending(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.CollateralPositionId != 0 {
		i = encodeVarintLending(dAtA, i, uint64(m.CollateralPositionId))
		i--
		dAtA[i] = 0x28
	}
	if m.CollateralPoolId != 0 {
		i = encodeVarintLending(dAtA, i, uint64(m.CollateralPoolId))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLending(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Borrower) > 0 {
		i -= len(m.Borrower)
		copy(dAtA[i:], m.Borrower)
		i = encodeVarintLending(dAtA, i, uint64(len(m.Borrower)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLending(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLending(dAtA []byte, offset int, v uint64) int {
	offset -= sovLending(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Market) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLending(uint64(l))
	}
	l = m.TotalSupplied.Size()
	n += 1 + l + sovLending(uint64(l))
	l = m.TotalBorrowed.Size()
	n += 1 + l + sovLending(uint64(l))
	l = m.GlobalRewardIndex.Size()
	n += 1 + l + sovLending(uint64(l))
	l = len(m.RiseDenom)
	if l > 0 {
		n += 1 + l + sovLending(uint64(l))
	}
	return n
}

func (m *UserPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovLending(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLending(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovLending(uint64(l))
	l = m.LastRewardIndex.Size()
	n += 1 + l + sovLending(uint64(l))
	return n
}

func (m *Borrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLending(uint64(m.Id))
	}
	l = len(m.Borrower)
	if l > 0 {
		n += 1 + l + sovLending(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovLending(uint64(l))
	if m.CollateralPoolId != 0 {
		n += 1 + sovLending(uint64(m.CollateralPoolId))
	}
	if m.CollateralPositionId != 0 {
		n += 1 + sovLending(uint64(m.CollateralPositionId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovLending(uint64(m.BlockHeight))
	}
	return n
}

func sovLending(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLending(x uint64) (n int) {
	return sovLending(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Market) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLending
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Market: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Market: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupplied", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalSupplied.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBorrowed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalBorrowed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalRewardIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GlobalRewardIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RiseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLending(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLending
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLending
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRewardIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastRewardIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLending(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLending
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Borrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLending
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Borrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Borrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Borrower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Borrower = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralPoolId", wireType)
			}
			m.CollateralPoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollateralPoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralPositionId", wireType)
			}
			m.CollateralPositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollateralPositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLending(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLending
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLending(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLending
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLending
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLending
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLending
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLending
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLending
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLending        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLending          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLending = fmt.Errorf("proto: unexpected end of group")
)
