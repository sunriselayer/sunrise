// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/swap/v1/metadata.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PacketMetadata
type PacketMetadata struct {
	Swap *SwapMetadata `protobuf:"bytes,1,opt,name=swap,proto3" json:"swap,omitempty"`
}

func (m *PacketMetadata) Reset()         { *m = PacketMetadata{} }
func (m *PacketMetadata) String() string { return proto.CompactTextString(m) }
func (*PacketMetadata) ProtoMessage()    {}
func (*PacketMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_8468e92e3d4c3e01, []int{0}
}
func (m *PacketMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketMetadata.Merge(m, src)
}
func (m *PacketMetadata) XXX_Size() int {
	return m.Size()
}
func (m *PacketMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_PacketMetadata proto.InternalMessageInfo

func (m *PacketMetadata) GetSwap() *SwapMetadata {
	if m != nil {
		return m.Swap
	}
	return nil
}

// ForwardMetadata
type ForwardMetadata struct {
	Receiver string        `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Port     string        `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	Channel  string        `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Timeout  time.Duration `protobuf:"bytes,4,opt,name=timeout,proto3,stdduration" json:"timeout"`
	Retries  uint32        `protobuf:"varint,5,opt,name=retries,proto3" json:"retries,omitempty"`
	Next     string        `protobuf:"bytes,6,opt,name=next,proto3" json:"next,omitempty"`
}

func (m *ForwardMetadata) Reset()         { *m = ForwardMetadata{} }
func (m *ForwardMetadata) String() string { return proto.CompactTextString(m) }
func (*ForwardMetadata) ProtoMessage()    {}
func (*ForwardMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_8468e92e3d4c3e01, []int{1}
}
func (m *ForwardMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForwardMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForwardMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForwardMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardMetadata.Merge(m, src)
}
func (m *ForwardMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ForwardMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardMetadata proto.InternalMessageInfo

func (m *ForwardMetadata) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *ForwardMetadata) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *ForwardMetadata) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *ForwardMetadata) GetTimeout() time.Duration {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *ForwardMetadata) GetRetries() uint32 {
	if m != nil {
		return m.Retries
	}
	return 0
}

func (m *ForwardMetadata) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

// ExactAmountIn
type ExactAmountIn struct {
	MinAmountOut cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=min_amount_out,json=minAmountOut,proto3,customtype=cosmossdk.io/math.Int" json:"min_amount_out"`
}

func (m *ExactAmountIn) Reset()         { *m = ExactAmountIn{} }
func (m *ExactAmountIn) String() string { return proto.CompactTextString(m) }
func (*ExactAmountIn) ProtoMessage()    {}
func (*ExactAmountIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_8468e92e3d4c3e01, []int{2}
}
func (m *ExactAmountIn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExactAmountIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExactAmountIn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExactAmountIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExactAmountIn.Merge(m, src)
}
func (m *ExactAmountIn) XXX_Size() int {
	return m.Size()
}
func (m *ExactAmountIn) XXX_DiscardUnknown() {
	xxx_messageInfo_ExactAmountIn.DiscardUnknown(m)
}

var xxx_messageInfo_ExactAmountIn proto.InternalMessageInfo

// ExactAmountOut
type ExactAmountOut struct {
	AmountOut cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount_out,json=amountOut,proto3,customtype=cosmossdk.io/math.Int" json:"amount_out"`
	Change    *ForwardMetadata      `protobuf:"bytes,2,opt,name=change,proto3" json:"change,omitempty"`
}

func (m *ExactAmountOut) Reset()         { *m = ExactAmountOut{} }
func (m *ExactAmountOut) String() string { return proto.CompactTextString(m) }
func (*ExactAmountOut) ProtoMessage()    {}
func (*ExactAmountOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_8468e92e3d4c3e01, []int{3}
}
func (m *ExactAmountOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExactAmountOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExactAmountOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExactAmountOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExactAmountOut.Merge(m, src)
}
func (m *ExactAmountOut) XXX_Size() int {
	return m.Size()
}
func (m *ExactAmountOut) XXX_DiscardUnknown() {
	xxx_messageInfo_ExactAmountOut.DiscardUnknown(m)
}

var xxx_messageInfo_ExactAmountOut proto.InternalMessageInfo

func (m *ExactAmountOut) GetChange() *ForwardMetadata {
	if m != nil {
		return m.Change
	}
	return nil
}

// SwapMetadata
type SwapMetadata struct {
	InterfaceProvider string `protobuf:"bytes,1,opt,name=interface_provider,json=interfaceProvider,proto3" json:"interface_provider,omitempty"`
	Route             *Route `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	// amount_strategy
	//
	// Types that are valid to be assigned to AmountStrategy:
	//	*SwapMetadata_ExactAmountIn
	//	*SwapMetadata_ExactAmountOut
	AmountStrategy isSwapMetadata_AmountStrategy `protobuf_oneof:"amount_strategy"`
	Forward        *ForwardMetadata              `protobuf:"bytes,5,opt,name=forward,proto3" json:"forward,omitempty"`
}

func (m *SwapMetadata) Reset()         { *m = SwapMetadata{} }
func (m *SwapMetadata) String() string { return proto.CompactTextString(m) }
func (*SwapMetadata) ProtoMessage()    {}
func (*SwapMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_8468e92e3d4c3e01, []int{4}
}
func (m *SwapMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapMetadata.Merge(m, src)
}
func (m *SwapMetadata) XXX_Size() int {
	return m.Size()
}
func (m *SwapMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_SwapMetadata proto.InternalMessageInfo

type isSwapMetadata_AmountStrategy interface {
	isSwapMetadata_AmountStrategy()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SwapMetadata_ExactAmountIn struct {
	ExactAmountIn *ExactAmountIn `protobuf:"bytes,3,opt,name=exact_amount_in,json=exactAmountIn,proto3,oneof" json:"exact_amount_in,omitempty"`
}
type SwapMetadata_ExactAmountOut struct {
	ExactAmountOut *ExactAmountOut `protobuf:"bytes,4,opt,name=exact_amount_out,json=exactAmountOut,proto3,oneof" json:"exact_amount_out,omitempty"`
}

func (*SwapMetadata_ExactAmountIn) isSwapMetadata_AmountStrategy()  {}
func (*SwapMetadata_ExactAmountOut) isSwapMetadata_AmountStrategy() {}

func (m *SwapMetadata) GetAmountStrategy() isSwapMetadata_AmountStrategy {
	if m != nil {
		return m.AmountStrategy
	}
	return nil
}

func (m *SwapMetadata) GetInterfaceProvider() string {
	if m != nil {
		return m.InterfaceProvider
	}
	return ""
}

func (m *SwapMetadata) GetRoute() *Route {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *SwapMetadata) GetExactAmountIn() *ExactAmountIn {
	if x, ok := m.GetAmountStrategy().(*SwapMetadata_ExactAmountIn); ok {
		return x.ExactAmountIn
	}
	return nil
}

func (m *SwapMetadata) GetExactAmountOut() *ExactAmountOut {
	if x, ok := m.GetAmountStrategy().(*SwapMetadata_ExactAmountOut); ok {
		return x.ExactAmountOut
	}
	return nil
}

func (m *SwapMetadata) GetForward() *ForwardMetadata {
	if m != nil {
		return m.Forward
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SwapMetadata) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SwapMetadata_ExactAmountIn)(nil),
		(*SwapMetadata_ExactAmountOut)(nil),
	}
}

func init() {
	proto.RegisterType((*PacketMetadata)(nil), "sunrise.swap.v1.PacketMetadata")
	proto.RegisterType((*ForwardMetadata)(nil), "sunrise.swap.v1.ForwardMetadata")
	proto.RegisterType((*ExactAmountIn)(nil), "sunrise.swap.v1.ExactAmountIn")
	proto.RegisterType((*ExactAmountOut)(nil), "sunrise.swap.v1.ExactAmountOut")
	proto.RegisterType((*SwapMetadata)(nil), "sunrise.swap.v1.SwapMetadata")
}

func init() { proto.RegisterFile("sunrise/swap/v1/metadata.proto", fileDescriptor_8468e92e3d4c3e01) }

var fileDescriptor_8468e92e3d4c3e01 = []byte{
	// 577 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xb6, 0xfb, 0xeb, 0xdf, 0x6d, 0x93, 0xfc, 0xba, 0x02, 0xe4, 0x06, 0xe1, 0x44, 0x39, 0x55,
	0xa2, 0xb5, 0x95, 0x70, 0x41, 0x48, 0x1c, 0x08, 0x50, 0x25, 0x20, 0x94, 0x62, 0x6e, 0x5c, 0xa2,
	0x8d, 0xb3, 0x71, 0x56, 0x8d, 0x77, 0xa3, 0xf5, 0x38, 0x7f, 0xde, 0x82, 0x13, 0xe2, 0x41, 0x78,
	0x88, 0x1c, 0x0b, 0x27, 0xc4, 0xa1, 0xa0, 0xe4, 0x45, 0xd0, 0xae, 0xed, 0xd0, 0x24, 0x12, 0x42,
	0xe2, 0xe6, 0x99, 0x6f, 0xf6, 0x9b, 0x6f, 0xe6, 0x1b, 0x23, 0x3b, 0x8a, 0xb9, 0x64, 0x11, 0x75,
	0xa3, 0x31, 0x19, 0xba, 0xa3, 0xaa, 0x1b, 0x52, 0x20, 0x5d, 0x02, 0xc4, 0x19, 0x4a, 0x01, 0x02,
	0x17, 0x52, 0xdc, 0x51, 0xb8, 0x33, 0xaa, 0x16, 0x4f, 0x7c, 0x11, 0x85, 0x22, 0x6a, 0x6b, 0xd8,
	0x4d, 0x82, 0xa4, 0xb6, 0x78, 0x27, 0x10, 0x81, 0x48, 0xf2, 0xea, 0x2b, 0xcd, 0xda, 0x81, 0x10,
	0xc1, 0x80, 0xba, 0x3a, 0xea, 0xc4, 0x3d, 0xb7, 0x1b, 0x4b, 0x02, 0x4c, 0xf0, 0x14, 0xbf, 0xbf,
	0xae, 0x40, 0x8a, 0x18, 0x68, 0x02, 0x56, 0x9e, 0xa3, 0xfc, 0x25, 0xf1, 0xaf, 0x28, 0xbc, 0x49,
	0x65, 0xe1, 0x2a, 0xda, 0x56, 0x85, 0x96, 0x59, 0x36, 0x4f, 0x0f, 0x6b, 0x0f, 0x9c, 0x35, 0x7d,
	0xce, 0xbb, 0x31, 0x19, 0x66, 0xc5, 0x9e, 0x2e, 0xad, 0xcc, 0x4c, 0x54, 0xb8, 0x10, 0x72, 0x4c,
	0x64, 0x77, 0x49, 0x53, 0x44, 0xfb, 0x92, 0xfa, 0x94, 0x8d, 0xa8, 0xd4, 0x54, 0x07, 0xde, 0x32,
	0xc6, 0x18, 0x6d, 0x0f, 0x85, 0x04, 0x6b, 0x4b, 0xe7, 0xf5, 0x37, 0xb6, 0xd0, 0x9e, 0xdf, 0x27,
	0x9c, 0xd3, 0x81, 0xf5, 0x9f, 0x4e, 0x67, 0x21, 0x7e, 0x8a, 0xf6, 0x80, 0x85, 0x54, 0xc4, 0x60,
	0x6d, 0x6b, 0x4d, 0x27, 0x4e, 0x32, 0xb1, 0x93, 0x4d, 0xec, 0xbc, 0x48, 0x27, 0xae, 0xef, 0xcf,
	0x6e, 0x4a, 0xc6, 0xa7, 0x1f, 0x25, 0xd3, 0xcb, 0xde, 0x28, 0x62, 0x49, 0x41, 0x32, 0x1a, 0x59,
	0x3b, 0x65, 0xf3, 0x34, 0xe7, 0x65, 0xa1, 0x92, 0xc1, 0xe9, 0x04, 0xac, 0xdd, 0x44, 0x86, 0xfa,
	0xae, 0x74, 0x50, 0xee, 0xe5, 0x84, 0xf8, 0xf0, 0x2c, 0x14, 0x31, 0x87, 0x26, 0xc7, 0x6f, 0x51,
	0x3e, 0x64, 0xbc, 0x4d, 0x74, 0xdc, 0x56, 0x22, 0xf4, 0x34, 0xf5, 0x87, 0xaa, 0xd3, 0xf7, 0x9b,
	0xd2, 0xdd, 0xc4, 0xa1, 0xa8, 0x7b, 0xe5, 0x30, 0xe1, 0x86, 0x04, 0xfa, 0x4e, 0x93, 0xc3, 0xd7,
	0xcf, 0xe7, 0x28, 0xb5, 0xae, 0xc9, 0xc1, 0x3b, 0x0a, 0x19, 0x4f, 0x18, 0x5b, 0x31, 0x54, 0x3e,
	0x9a, 0x28, 0x7f, 0xab, 0x49, 0x2b, 0x06, 0xfc, 0x0a, 0xa1, 0x7f, 0xeb, 0x70, 0x40, 0x96, 0x5c,
	0x8f, 0xd1, 0xae, 0x5a, 0x5d, 0x40, 0xf5, 0x7e, 0x0f, 0x6b, 0xe5, 0x0d, 0x0b, 0xd7, 0xbc, 0xf2,
	0xd2, 0xfa, 0xca, 0x97, 0x2d, 0x74, 0x74, 0xdb, 0x5e, 0x7c, 0x8e, 0x30, 0xe3, 0x40, 0x65, 0x8f,
	0xf8, 0x54, 0x1d, 0xe4, 0x88, 0x75, 0x97, 0x76, 0x1e, 0x2f, 0x91, 0xcb, 0x14, 0xc0, 0x67, 0x68,
	0x47, 0xdf, 0x56, 0xda, 0xf8, 0xde, 0x46, 0x63, 0x4f, 0xa1, 0x5e, 0x52, 0x84, 0x1b, 0xa8, 0x40,
	0xd5, 0x16, 0xb2, 0xdd, 0x32, 0xae, 0x9d, 0x3f, 0xac, 0xd9, 0x1b, 0xef, 0x56, 0x2c, 0x69, 0x18,
	0x5e, 0x8e, 0xae, 0x78, 0xf4, 0x1a, 0xfd, 0xbf, 0xc2, 0xf4, 0xfb, 0x54, 0x4a, 0x7f, 0xa2, 0x6a,
	0xc5, 0xd0, 0x30, 0xbc, 0x3c, 0x5d, 0xb5, 0xe2, 0x09, 0xda, 0xeb, 0x25, 0xfb, 0xd1, 0xf7, 0xf2,
	0x37, 0xfb, 0xcb, 0x1e, 0xd4, 0x8f, 0x51, 0x21, 0x95, 0x10, 0x81, 0x24, 0x40, 0x83, 0x69, 0xfd,
	0x62, 0x36, 0xb7, 0xcd, 0xeb, 0xb9, 0x6d, 0xfe, 0x9c, 0xdb, 0xe6, 0x87, 0x85, 0x6d, 0x5c, 0x2f,
	0x6c, 0xe3, 0xdb, 0xc2, 0x36, 0xde, 0x9f, 0x05, 0x0c, 0xfa, 0x71, 0xc7, 0xf1, 0x45, 0xe8, 0xa6,
	0x1d, 0x06, 0x64, 0x4a, 0x65, 0x16, 0xb8, 0x93, 0xe4, 0x8f, 0x85, 0xe9, 0x90, 0x46, 0x9d, 0x5d,
	0x7d, 0xec, 0x8f, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x57, 0x37, 0x83, 0xea, 0x50, 0x04, 0x00,
	0x00,
}

func (m *PacketMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Swap != nil {
		{
			size, err := m.Swap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ForwardMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Next) > 0 {
		i -= len(m.Next)
		copy(dAtA[i:], m.Next)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Next)))
		i--
		dAtA[i] = 0x32
	}
	if m.Retries != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Retries))
		i--
		dAtA[i] = 0x28
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.Timeout, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Timeout):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintMetadata(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x22
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExactAmountIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExactAmountIn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExactAmountIn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinAmountOut.Size()
		i -= size
		if _, err := m.MinAmountOut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ExactAmountOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExactAmountOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExactAmountOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != nil {
		{
			size, err := m.Change.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.AmountOut.Size()
		i -= size
		if _, err := m.AmountOut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMetadata(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SwapMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Forward != nil {
		{
			size, err := m.Forward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.AmountStrategy != nil {
		{
			size := m.AmountStrategy.Size()
			i -= size
			if _, err := m.AmountStrategy.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Route != nil {
		{
			size, err := m.Route.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InterfaceProvider) > 0 {
		i -= len(m.InterfaceProvider)
		copy(dAtA[i:], m.InterfaceProvider)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.InterfaceProvider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwapMetadata_ExactAmountIn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapMetadata_ExactAmountIn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExactAmountIn != nil {
		{
			size, err := m.ExactAmountIn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SwapMetadata_ExactAmountOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapMetadata_ExactAmountOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExactAmountOut != nil {
		{
			size, err := m.ExactAmountOut.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func encodeVarintMetadata(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetadata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PacketMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Swap != nil {
		l = m.Swap.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *ForwardMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Timeout)
	n += 1 + l + sovMetadata(uint64(l))
	if m.Retries != 0 {
		n += 1 + sovMetadata(uint64(m.Retries))
	}
	l = len(m.Next)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *ExactAmountIn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MinAmountOut.Size()
	n += 1 + l + sovMetadata(uint64(l))
	return n
}

func (m *ExactAmountOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AmountOut.Size()
	n += 1 + l + sovMetadata(uint64(l))
	if m.Change != nil {
		l = m.Change.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *SwapMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InterfaceProvider)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Route != nil {
		l = m.Route.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.AmountStrategy != nil {
		n += m.AmountStrategy.Size()
	}
	if m.Forward != nil {
		l = m.Forward.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *SwapMetadata_ExactAmountIn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExactAmountIn != nil {
		l = m.ExactAmountIn.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}
func (m *SwapMetadata_ExactAmountOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExactAmountOut != nil {
		l = m.ExactAmountOut.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func sovMetadata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetadata(x uint64) (n int) {
	return sovMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PacketMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Swap == nil {
				m.Swap = &SwapMetadata{}
			}
			if err := m.Swap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForwardMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.Timeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retries", wireType)
			}
			m.Retries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retries |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Next = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExactAmountIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExactAmountIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExactAmountIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinAmountOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExactAmountOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExactAmountOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExactAmountOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Change", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Change == nil {
				m.Change = &ForwardMetadata{}
			}
			if err := m.Change.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterfaceProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Route == nil {
				m.Route = &Route{}
			}
			if err := m.Route.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactAmountIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExactAmountIn{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AmountStrategy = &SwapMetadata_ExactAmountIn{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactAmountOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExactAmountOut{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AmountStrategy = &SwapMetadata_ExactAmountOut{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Forward == nil {
				m.Forward = &ForwardMetadata{}
			}
			if err := m.Forward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetadata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetadata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetadata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetadata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetadata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetadata = fmt.Errorf("proto: unexpected end of group")
)
