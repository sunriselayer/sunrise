// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/swap/v1/route.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RoutePool
type RoutePool struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *RoutePool) Reset()         { *m = RoutePool{} }
func (m *RoutePool) String() string { return proto.CompactTextString(m) }
func (*RoutePool) ProtoMessage()    {}
func (*RoutePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1aed31d89b9544f, []int{0}
}
func (m *RoutePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoutePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoutePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoutePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutePool.Merge(m, src)
}
func (m *RoutePool) XXX_Size() int {
	return m.Size()
}
func (m *RoutePool) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutePool.DiscardUnknown(m)
}

var xxx_messageInfo_RoutePool proto.InternalMessageInfo

func (m *RoutePool) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

// RouteSeries
type RouteSeries struct {
	Routes []Route `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes"`
}

func (m *RouteSeries) Reset()         { *m = RouteSeries{} }
func (m *RouteSeries) String() string { return proto.CompactTextString(m) }
func (*RouteSeries) ProtoMessage()    {}
func (*RouteSeries) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1aed31d89b9544f, []int{1}
}
func (m *RouteSeries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteSeries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteSeries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteSeries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteSeries.Merge(m, src)
}
func (m *RouteSeries) XXX_Size() int {
	return m.Size()
}
func (m *RouteSeries) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteSeries.DiscardUnknown(m)
}

var xxx_messageInfo_RouteSeries proto.InternalMessageInfo

func (m *RouteSeries) GetRoutes() []Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

// RouteParallel
type RouteParallel struct {
	Routes  []Route  `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes"`
	Weights []string `protobuf:"bytes,2,rep,name=weights,proto3" json:"weights,omitempty"`
}

func (m *RouteParallel) Reset()         { *m = RouteParallel{} }
func (m *RouteParallel) String() string { return proto.CompactTextString(m) }
func (*RouteParallel) ProtoMessage()    {}
func (*RouteParallel) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1aed31d89b9544f, []int{2}
}
func (m *RouteParallel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteParallel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteParallel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteParallel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteParallel.Merge(m, src)
}
func (m *RouteParallel) XXX_Size() int {
	return m.Size()
}
func (m *RouteParallel) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteParallel.DiscardUnknown(m)
}

var xxx_messageInfo_RouteParallel proto.InternalMessageInfo

func (m *RouteParallel) GetRoutes() []Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *RouteParallel) GetWeights() []string {
	if m != nil {
		return m.Weights
	}
	return nil
}

// Route
type Route struct {
	DenomIn  string `protobuf:"bytes,1,opt,name=denom_in,json=denomIn,proto3" json:"denom_in,omitempty"`
	DenomOut string `protobuf:"bytes,2,opt,name=denom_out,json=denomOut,proto3" json:"denom_out,omitempty"`
	// strategy
	//
	// Types that are valid to be assigned to Strategy:
	//
	//	*Route_Pool
	//	*Route_Series
	//	*Route_Parallel
	Strategy isRoute_Strategy `protobuf_oneof:"strategy"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1aed31d89b9544f, []int{3}
}
func (m *Route) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Route.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(m, src)
}
func (m *Route) XXX_Size() int {
	return m.Size()
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

type isRoute_Strategy interface {
	isRoute_Strategy()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Route_Pool struct {
	Pool *RoutePool `protobuf:"bytes,3,opt,name=pool,proto3,oneof" json:"pool,omitempty"`
}
type Route_Series struct {
	Series *RouteSeries `protobuf:"bytes,4,opt,name=series,proto3,oneof" json:"series,omitempty"`
}
type Route_Parallel struct {
	Parallel *RouteParallel `protobuf:"bytes,5,opt,name=parallel,proto3,oneof" json:"parallel,omitempty"`
}

func (*Route_Pool) isRoute_Strategy()     {}
func (*Route_Series) isRoute_Strategy()   {}
func (*Route_Parallel) isRoute_Strategy() {}

func (m *Route) GetStrategy() isRoute_Strategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func (m *Route) GetDenomIn() string {
	if m != nil {
		return m.DenomIn
	}
	return ""
}

func (m *Route) GetDenomOut() string {
	if m != nil {
		return m.DenomOut
	}
	return ""
}

func (m *Route) GetPool() *RoutePool {
	if x, ok := m.GetStrategy().(*Route_Pool); ok {
		return x.Pool
	}
	return nil
}

func (m *Route) GetSeries() *RouteSeries {
	if x, ok := m.GetStrategy().(*Route_Series); ok {
		return x.Series
	}
	return nil
}

func (m *Route) GetParallel() *RouteParallel {
	if x, ok := m.GetStrategy().(*Route_Parallel); ok {
		return x.Parallel
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Route) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Route_Pool)(nil),
		(*Route_Series)(nil),
		(*Route_Parallel)(nil),
	}
}

// RouteResultPool
type RouteResultPool struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *RouteResultPool) Reset()         { *m = RouteResultPool{} }
func (m *RouteResultPool) String() string { return proto.CompactTextString(m) }
func (*RouteResultPool) ProtoMessage()    {}
func (*RouteResultPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1aed31d89b9544f, []int{4}
}
func (m *RouteResultPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteResultPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteResultPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteResultPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteResultPool.Merge(m, src)
}
func (m *RouteResultPool) XXX_Size() int {
	return m.Size()
}
func (m *RouteResultPool) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteResultPool.DiscardUnknown(m)
}

var xxx_messageInfo_RouteResultPool proto.InternalMessageInfo

func (m *RouteResultPool) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

// RouteResultSeries
type RouteResultSeries struct {
	RouteResults []RouteResult `protobuf:"bytes,1,rep,name=route_results,json=routeResults,proto3" json:"route_results"`
}

func (m *RouteResultSeries) Reset()         { *m = RouteResultSeries{} }
func (m *RouteResultSeries) String() string { return proto.CompactTextString(m) }
func (*RouteResultSeries) ProtoMessage()    {}
func (*RouteResultSeries) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1aed31d89b9544f, []int{5}
}
func (m *RouteResultSeries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteResultSeries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteResultSeries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteResultSeries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteResultSeries.Merge(m, src)
}
func (m *RouteResultSeries) XXX_Size() int {
	return m.Size()
}
func (m *RouteResultSeries) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteResultSeries.DiscardUnknown(m)
}

var xxx_messageInfo_RouteResultSeries proto.InternalMessageInfo

func (m *RouteResultSeries) GetRouteResults() []RouteResult {
	if m != nil {
		return m.RouteResults
	}
	return nil
}

// RouteResultParallel
type RouteResultParallel struct {
	RouteResults []RouteResult `protobuf:"bytes,1,rep,name=route_results,json=routeResults,proto3" json:"route_results"`
}

func (m *RouteResultParallel) Reset()         { *m = RouteResultParallel{} }
func (m *RouteResultParallel) String() string { return proto.CompactTextString(m) }
func (*RouteResultParallel) ProtoMessage()    {}
func (*RouteResultParallel) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1aed31d89b9544f, []int{6}
}
func (m *RouteResultParallel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteResultParallel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteResultParallel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteResultParallel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteResultParallel.Merge(m, src)
}
func (m *RouteResultParallel) XXX_Size() int {
	return m.Size()
}
func (m *RouteResultParallel) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteResultParallel.DiscardUnknown(m)
}

var xxx_messageInfo_RouteResultParallel proto.InternalMessageInfo

func (m *RouteResultParallel) GetRouteResults() []RouteResult {
	if m != nil {
		return m.RouteResults
	}
	return nil
}

// RouteResult
type RouteResult struct {
	TokenIn  types.Coin `protobuf:"bytes,1,opt,name=token_in,json=tokenIn,proto3" json:"token_in"`
	TokenOut types.Coin `protobuf:"bytes,2,opt,name=token_out,json=tokenOut,proto3" json:"token_out"`
	// strategy
	//
	// Types that are valid to be assigned to Strategy:
	//
	//	*RouteResult_Pool
	//	*RouteResult_Series
	//	*RouteResult_Parallel
	Strategy isRouteResult_Strategy `protobuf_oneof:"strategy"`
}

func (m *RouteResult) Reset()         { *m = RouteResult{} }
func (m *RouteResult) String() string { return proto.CompactTextString(m) }
func (*RouteResult) ProtoMessage()    {}
func (*RouteResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1aed31d89b9544f, []int{7}
}
func (m *RouteResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteResult.Merge(m, src)
}
func (m *RouteResult) XXX_Size() int {
	return m.Size()
}
func (m *RouteResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteResult.DiscardUnknown(m)
}

var xxx_messageInfo_RouteResult proto.InternalMessageInfo

type isRouteResult_Strategy interface {
	isRouteResult_Strategy()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RouteResult_Pool struct {
	Pool *RouteResultPool `protobuf:"bytes,3,opt,name=pool,proto3,oneof" json:"pool,omitempty"`
}
type RouteResult_Series struct {
	Series *RouteResultSeries `protobuf:"bytes,4,opt,name=series,proto3,oneof" json:"series,omitempty"`
}
type RouteResult_Parallel struct {
	Parallel *RouteResultParallel `protobuf:"bytes,5,opt,name=parallel,proto3,oneof" json:"parallel,omitempty"`
}

func (*RouteResult_Pool) isRouteResult_Strategy()     {}
func (*RouteResult_Series) isRouteResult_Strategy()   {}
func (*RouteResult_Parallel) isRouteResult_Strategy() {}

func (m *RouteResult) GetStrategy() isRouteResult_Strategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func (m *RouteResult) GetTokenIn() types.Coin {
	if m != nil {
		return m.TokenIn
	}
	return types.Coin{}
}

func (m *RouteResult) GetTokenOut() types.Coin {
	if m != nil {
		return m.TokenOut
	}
	return types.Coin{}
}

func (m *RouteResult) GetPool() *RouteResultPool {
	if x, ok := m.GetStrategy().(*RouteResult_Pool); ok {
		return x.Pool
	}
	return nil
}

func (m *RouteResult) GetSeries() *RouteResultSeries {
	if x, ok := m.GetStrategy().(*RouteResult_Series); ok {
		return x.Series
	}
	return nil
}

func (m *RouteResult) GetParallel() *RouteResultParallel {
	if x, ok := m.GetStrategy().(*RouteResult_Parallel); ok {
		return x.Parallel
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RouteResult) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RouteResult_Pool)(nil),
		(*RouteResult_Series)(nil),
		(*RouteResult_Parallel)(nil),
	}
}

func init() {
	proto.RegisterType((*RoutePool)(nil), "sunrise.swap.v1.RoutePool")
	proto.RegisterType((*RouteSeries)(nil), "sunrise.swap.v1.RouteSeries")
	proto.RegisterType((*RouteParallel)(nil), "sunrise.swap.v1.RouteParallel")
	proto.RegisterType((*Route)(nil), "sunrise.swap.v1.Route")
	proto.RegisterType((*RouteResultPool)(nil), "sunrise.swap.v1.RouteResultPool")
	proto.RegisterType((*RouteResultSeries)(nil), "sunrise.swap.v1.RouteResultSeries")
	proto.RegisterType((*RouteResultParallel)(nil), "sunrise.swap.v1.RouteResultParallel")
	proto.RegisterType((*RouteResult)(nil), "sunrise.swap.v1.RouteResult")
}

func init() { proto.RegisterFile("sunrise/swap/v1/route.proto", fileDescriptor_c1aed31d89b9544f) }

var fileDescriptor_c1aed31d89b9544f = []byte{
	// 544 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xb5, 0x93, 0x34, 0x8f, 0x1b, 0x4a, 0xc5, 0x80, 0xc0, 0x49, 0x91, 0xb1, 0xac, 0x2e, 0x2c,
	0x04, 0x36, 0x09, 0xa8, 0x0b, 0x94, 0x95, 0x8b, 0x20, 0x59, 0x81, 0xcc, 0x0e, 0x21, 0x22, 0x27,
	0x19, 0xb9, 0x16, 0x8e, 0xc7, 0x9a, 0x19, 0xa7, 0xe4, 0x2f, 0xf8, 0x18, 0x3e, 0xa2, 0x1b, 0xa4,
	0x8a, 0x15, 0x2b, 0x84, 0x92, 0x4f, 0xe0, 0x07, 0x90, 0x67, 0xc6, 0xd0, 0x67, 0x40, 0x88, 0x9d,
	0xef, 0xbd, 0xe7, 0xdc, 0xe7, 0xf1, 0xc0, 0x2e, 0xcb, 0x53, 0x1a, 0x33, 0xec, 0xb1, 0xa3, 0x30,
	0xf3, 0x16, 0x3d, 0x8f, 0x92, 0x9c, 0x63, 0x37, 0xa3, 0x84, 0x13, 0xb4, 0xa3, 0x82, 0x6e, 0x11,
	0x74, 0x17, 0xbd, 0xae, 0x39, 0x25, 0x6c, 0x4e, 0x98, 0x37, 0x09, 0x19, 0xf6, 0x16, 0xbd, 0x09,
	0xe6, 0x61, 0xcf, 0x9b, 0x92, 0x38, 0x95, 0x84, 0x6e, 0x47, 0xc6, 0xc7, 0xc2, 0xf2, 0xa4, 0xa1,
	0x42, 0xb7, 0x22, 0x12, 0x11, 0xe9, 0x2f, 0xbe, 0xa4, 0xd7, 0xde, 0x83, 0x56, 0x50, 0x14, 0x7c,
	0x45, 0x48, 0x82, 0xee, 0x40, 0x23, 0x23, 0x24, 0x19, 0xc7, 0x33, 0x43, 0xb7, 0x74, 0xa7, 0x16,
	0xd4, 0x0b, 0x73, 0x34, 0xb3, 0x0f, 0xa0, 0x2d, 0x50, 0xaf, 0x31, 0x8d, 0x31, 0x43, 0x4f, 0xa0,
	0x2e, 0xba, 0x64, 0x86, 0x6e, 0x55, 0x9d, 0x76, 0xff, 0xb6, 0x7b, 0xae, 0x4f, 0x57, 0xa0, 0xfd,
	0xda, 0xf1, 0xb7, 0x7b, 0x5a, 0xa0, 0xb0, 0x36, 0x81, 0x6d, 0x59, 0x2a, 0xa4, 0x61, 0x92, 0xe0,
	0xe4, 0xdf, 0xd2, 0x20, 0x07, 0x1a, 0x47, 0x38, 0x8e, 0x0e, 0x39, 0x33, 0x2a, 0x56, 0xd5, 0x69,
	0xf9, 0xd7, 0xbf, 0x7c, 0x7a, 0x08, 0x6a, 0xd4, 0x67, 0x78, 0x1a, 0x94, 0x61, 0xfb, 0x87, 0x0e,
	0x5b, 0x22, 0x03, 0xea, 0x40, 0x73, 0x86, 0x53, 0x32, 0x1f, 0xc7, 0xa9, 0x98, 0xac, 0x15, 0x34,
	0x84, 0x3d, 0x4a, 0xd1, 0x2e, 0xb4, 0x64, 0x88, 0xe4, 0xdc, 0xa8, 0x88, 0x98, 0xc4, 0xbe, 0xcc,
	0x39, 0x7a, 0x04, 0xb5, 0x62, 0x03, 0x46, 0xd5, 0xd2, 0x9d, 0x76, 0xbf, 0x7b, 0x79, 0x7f, 0xc5,
	0xea, 0x86, 0x5a, 0x20, 0x90, 0x68, 0x1f, 0xea, 0x4c, 0x2c, 0xc9, 0xa8, 0x09, 0xce, 0xdd, 0xcb,
	0x39, 0x72, 0x91, 0x43, 0x2d, 0x50, 0x68, 0x34, 0x80, 0x66, 0xa6, 0xf6, 0x62, 0x6c, 0x09, 0xa6,
	0x79, 0x45, 0x35, 0x85, 0x1a, 0x6a, 0xc1, 0x2f, 0x86, 0x0f, 0xd0, 0x64, 0x9c, 0x86, 0x1c, 0x47,
	0x4b, 0xfb, 0x3e, 0xec, 0x08, 0x60, 0x80, 0x59, 0x9e, 0xf0, 0xcd, 0x77, 0x7d, 0x0b, 0x37, 0x4e,
	0x61, 0xd5, 0x75, 0x5f, 0xc0, 0xb6, 0x58, 0xf5, 0x98, 0x0a, 0x6f, 0x79, 0x9d, 0x2b, 0x26, 0x91,
	0x54, 0x75, 0xa3, 0x6b, 0xf4, 0xb7, 0x8b, 0xd9, 0xef, 0xe0, 0xe6, 0xe9, 0x4e, 0xca, 0xb3, 0xff,
	0xb7, 0xfc, 0x9f, 0x2b, 0x4a, 0x96, 0xd2, 0x81, 0x9e, 0x42, 0x93, 0x93, 0xf7, 0x38, 0x2d, 0xaf,
	0xdc, 0xee, 0x77, 0x5c, 0xa5, 0x8b, 0xe2, 0x7f, 0x71, 0xd5, 0xff, 0xe2, 0x1e, 0x90, 0x38, 0x55,
	0x09, 0x1b, 0x82, 0x30, 0x4a, 0xd1, 0x00, 0x5a, 0x92, 0x5b, 0xca, 0xe0, 0x2f, 0xc8, 0xb2, 0x5a,
	0xa1, 0x93, 0xfd, 0x33, 0x3a, 0xb1, 0x36, 0x4d, 0x72, 0x46, 0x2d, 0x83, 0x73, 0x6a, 0xb1, 0x37,
	0x31, 0x2f, 0x68, 0xc6, 0xbf, 0xa0, 0x99, 0xbd, 0x8d, 0x95, 0xff, 0xa0, 0x1c, 0xff, 0xf9, 0xf1,
	0xca, 0xd4, 0x4f, 0x56, 0xa6, 0xfe, 0x7d, 0x65, 0xea, 0x1f, 0xd7, 0xa6, 0x76, 0xb2, 0x36, 0xb5,
	0xaf, 0x6b, 0x53, 0x7b, 0xf3, 0x20, 0x8a, 0xf9, 0x61, 0x3e, 0x71, 0xa7, 0x64, 0xee, 0xa9, 0x0a,
	0x49, 0xb8, 0xc4, 0xb4, 0x34, 0xbc, 0x0f, 0xf2, 0xf9, 0xe2, 0xcb, 0x0c, 0xb3, 0x49, 0x5d, 0x3c,
	0x2d, 0x8f, 0x7f, 0x06, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xaf, 0xd1, 0xfd, 0xdb, 0x04, 0x00, 0x00,
}

func (m *RoutePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintRoute(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RouteSeries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteSeries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSeries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRoute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RouteParallel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteParallel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteParallel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Weights) > 0 {
		for iNdEx := len(m.Weights) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Weights[iNdEx])
			copy(dAtA[i:], m.Weights[iNdEx])
			i = encodeVarintRoute(dAtA, i, uint64(len(m.Weights[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRoute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Route) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Route) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Strategy != nil {
		{
			size := m.Strategy.Size()
			i -= size
			if _, err := m.Strategy.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DenomOut) > 0 {
		i -= len(m.DenomOut)
		copy(dAtA[i:], m.DenomOut)
		i = encodeVarintRoute(dAtA, i, uint64(len(m.DenomOut)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DenomIn) > 0 {
		i -= len(m.DenomIn)
		copy(dAtA[i:], m.DenomIn)
		i = encodeVarintRoute(dAtA, i, uint64(len(m.DenomIn)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Route_Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route_Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Route_Series) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route_Series) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Series != nil {
		{
			size, err := m.Series.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Route_Parallel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route_Parallel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Parallel != nil {
		{
			size, err := m.Parallel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *RouteResultPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteResultPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteResultPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintRoute(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RouteResultSeries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteResultSeries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteResultSeries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RouteResults) > 0 {
		for iNdEx := len(m.RouteResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RouteResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRoute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RouteResultParallel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteResultParallel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteResultParallel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RouteResults) > 0 {
		for iNdEx := len(m.RouteResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RouteResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRoute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RouteResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Strategy != nil {
		{
			size := m.Strategy.Size()
			i -= size
			if _, err := m.Strategy.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	{
		size, err := m.TokenOut.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRoute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.TokenIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRoute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RouteResult_Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteResult_Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RouteResult_Series) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteResult_Series) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Series != nil {
		{
			size, err := m.Series.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *RouteResult_Parallel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteResult_Parallel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Parallel != nil {
		{
			size, err := m.Parallel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func encodeVarintRoute(dAtA []byte, offset int, v uint64) int {
	offset -= sovRoute(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RoutePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovRoute(uint64(m.PoolId))
	}
	return n
}

func (m *RouteSeries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovRoute(uint64(l))
		}
	}
	return n
}

func (m *RouteParallel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovRoute(uint64(l))
		}
	}
	if len(m.Weights) > 0 {
		for _, s := range m.Weights {
			l = len(s)
			n += 1 + l + sovRoute(uint64(l))
		}
	}
	return n
}

func (m *Route) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DenomIn)
	if l > 0 {
		n += 1 + l + sovRoute(uint64(l))
	}
	l = len(m.DenomOut)
	if l > 0 {
		n += 1 + l + sovRoute(uint64(l))
	}
	if m.Strategy != nil {
		n += m.Strategy.Size()
	}
	return n
}

func (m *Route_Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovRoute(uint64(l))
	}
	return n
}
func (m *Route_Series) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Series != nil {
		l = m.Series.Size()
		n += 1 + l + sovRoute(uint64(l))
	}
	return n
}
func (m *Route_Parallel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Parallel != nil {
		l = m.Parallel.Size()
		n += 1 + l + sovRoute(uint64(l))
	}
	return n
}
func (m *RouteResultPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovRoute(uint64(m.PoolId))
	}
	return n
}

func (m *RouteResultSeries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RouteResults) > 0 {
		for _, e := range m.RouteResults {
			l = e.Size()
			n += 1 + l + sovRoute(uint64(l))
		}
	}
	return n
}

func (m *RouteResultParallel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RouteResults) > 0 {
		for _, e := range m.RouteResults {
			l = e.Size()
			n += 1 + l + sovRoute(uint64(l))
		}
	}
	return n
}

func (m *RouteResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TokenIn.Size()
	n += 1 + l + sovRoute(uint64(l))
	l = m.TokenOut.Size()
	n += 1 + l + sovRoute(uint64(l))
	if m.Strategy != nil {
		n += m.Strategy.Size()
	}
	return n
}

func (m *RouteResult_Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovRoute(uint64(l))
	}
	return n
}
func (m *RouteResult_Series) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Series != nil {
		l = m.Series.Size()
		n += 1 + l + sovRoute(uint64(l))
	}
	return n
}
func (m *RouteResult_Parallel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Parallel != nil {
		l = m.Parallel.Size()
		n += 1 + l + sovRoute(uint64(l))
	}
	return n
}

func sovRoute(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRoute(x uint64) (n int) {
	return sovRoute(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoutePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteSeries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteSeries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteSeries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, Route{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteParallel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteParallel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteParallel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, Route{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weights", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weights = append(m.Weights, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Route) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Route: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Route: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RoutePool{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Strategy = &Route_Pool{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Series", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteSeries{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Strategy = &Route_Series{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parallel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteParallel{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Strategy = &Route_Parallel{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteResultPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteResultPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteResultPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteResultSeries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteResultSeries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteResultSeries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteResults = append(m.RouteResults, RouteResult{})
			if err := m.RouteResults[len(m.RouteResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteResultParallel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteResultParallel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteResultParallel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteResults = append(m.RouteResults, RouteResult{})
			if err := m.RouteResults[len(m.RouteResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteResultPool{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Strategy = &RouteResult_Pool{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Series", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteResultSeries{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Strategy = &RouteResult_Series{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parallel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteResultParallel{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Strategy = &RouteResult_Parallel{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoute(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRoute
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRoute
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRoute
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRoute        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoute          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRoute = fmt.Errorf("proto: unexpected end of group")
)
