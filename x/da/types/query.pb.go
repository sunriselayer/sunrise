// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/da/v0/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30467cfe054d35a6, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30467cfe054d35a6, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryPublishedDataRequest is request type for the Query/PublishedData RPC
// method.
type QueryPublishedDataRequest struct {
	MetadataUri string `protobuf:"bytes,1,opt,name=metadata_uri,json=metadataUri,proto3" json:"metadata_uri,omitempty"`
}

func (m *QueryPublishedDataRequest) Reset()         { *m = QueryPublishedDataRequest{} }
func (m *QueryPublishedDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPublishedDataRequest) ProtoMessage()    {}
func (*QueryPublishedDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30467cfe054d35a6, []int{2}
}
func (m *QueryPublishedDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPublishedDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPublishedDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPublishedDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPublishedDataRequest.Merge(m, src)
}
func (m *QueryPublishedDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPublishedDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPublishedDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPublishedDataRequest proto.InternalMessageInfo

func (m *QueryPublishedDataRequest) GetMetadataUri() string {
	if m != nil {
		return m.MetadataUri
	}
	return ""
}

// QueryPublishedDataResponse is response type for the Query/PublishedData RPC
// method.
type QueryPublishedDataResponse struct {
	Data PublishedData `protobuf:"bytes,1,opt,name=data,proto3" json:"data"`
}

func (m *QueryPublishedDataResponse) Reset()         { *m = QueryPublishedDataResponse{} }
func (m *QueryPublishedDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPublishedDataResponse) ProtoMessage()    {}
func (*QueryPublishedDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30467cfe054d35a6, []int{3}
}
func (m *QueryPublishedDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPublishedDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPublishedDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPublishedDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPublishedDataResponse.Merge(m, src)
}
func (m *QueryPublishedDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPublishedDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPublishedDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPublishedDataResponse proto.InternalMessageInfo

func (m *QueryPublishedDataResponse) GetData() PublishedData {
	if m != nil {
		return m.Data
	}
	return PublishedData{}
}

// QueryAllPublishedDataRequest is request type for the
// Query/AllPublishedData RPC method.
type QueryAllPublishedDataRequest struct {
}

func (m *QueryAllPublishedDataRequest) Reset()         { *m = QueryAllPublishedDataRequest{} }
func (m *QueryAllPublishedDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPublishedDataRequest) ProtoMessage()    {}
func (*QueryAllPublishedDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30467cfe054d35a6, []int{4}
}
func (m *QueryAllPublishedDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPublishedDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPublishedDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPublishedDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPublishedDataRequest.Merge(m, src)
}
func (m *QueryAllPublishedDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPublishedDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPublishedDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPublishedDataRequest proto.InternalMessageInfo

// QueryAllPublishedDataResponse is response type for the
// Query/AllPublishedData RPC method.
type QueryAllPublishedDataResponse struct {
	Data []PublishedData `protobuf:"bytes,1,rep,name=data,proto3" json:"data"`
}

func (m *QueryAllPublishedDataResponse) Reset()         { *m = QueryAllPublishedDataResponse{} }
func (m *QueryAllPublishedDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPublishedDataResponse) ProtoMessage()    {}
func (*QueryAllPublishedDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30467cfe054d35a6, []int{5}
}
func (m *QueryAllPublishedDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPublishedDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPublishedDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPublishedDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPublishedDataResponse.Merge(m, src)
}
func (m *QueryAllPublishedDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPublishedDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPublishedDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPublishedDataResponse proto.InternalMessageInfo

func (m *QueryAllPublishedDataResponse) GetData() []PublishedData {
	if m != nil {
		return m.Data
	}
	return nil
}

// QueryValidityProofRequest is request type for the Query/ValidityProof RPC
// method.
type QueryValidityProofRequest struct {
	MetadataUri      string `protobuf:"bytes,1,opt,name=metadata_uri,json=metadataUri,proto3" json:"metadata_uri,omitempty"`
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *QueryValidityProofRequest) Reset()         { *m = QueryValidityProofRequest{} }
func (m *QueryValidityProofRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidityProofRequest) ProtoMessage()    {}
func (*QueryValidityProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30467cfe054d35a6, []int{6}
}
func (m *QueryValidityProofRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidityProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidityProofRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidityProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidityProofRequest.Merge(m, src)
}
func (m *QueryValidityProofRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidityProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidityProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidityProofRequest proto.InternalMessageInfo

func (m *QueryValidityProofRequest) GetMetadataUri() string {
	if m != nil {
		return m.MetadataUri
	}
	return ""
}

func (m *QueryValidityProofRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

// QueryValidityProofResponse is response type for the Query/ValidityProof RPC
// method.
type QueryValidityProofResponse struct {
	Proof Proof `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof"`
}

func (m *QueryValidityProofResponse) Reset()         { *m = QueryValidityProofResponse{} }
func (m *QueryValidityProofResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidityProofResponse) ProtoMessage()    {}
func (*QueryValidityProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30467cfe054d35a6, []int{7}
}
func (m *QueryValidityProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidityProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidityProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidityProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidityProofResponse.Merge(m, src)
}
func (m *QueryValidityProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidityProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidityProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidityProofResponse proto.InternalMessageInfo

func (m *QueryValidityProofResponse) GetProof() Proof {
	if m != nil {
		return m.Proof
	}
	return Proof{}
}

// QueryAllValidityProofsRequest is request type for the Query/AllValidityProofs RPC
// method.
type QueryAllValidityProofsRequest struct {
	MetadataUri string `protobuf:"bytes,1,opt,name=metadata_uri,json=metadataUri,proto3" json:"metadata_uri,omitempty"`
}

func (m *QueryAllValidityProofsRequest) Reset()         { *m = QueryAllValidityProofsRequest{} }
func (m *QueryAllValidityProofsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllValidityProofsRequest) ProtoMessage()    {}
func (*QueryAllValidityProofsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30467cfe054d35a6, []int{8}
}
func (m *QueryAllValidityProofsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValidityProofsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValidityProofsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValidityProofsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValidityProofsRequest.Merge(m, src)
}
func (m *QueryAllValidityProofsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValidityProofsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValidityProofsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValidityProofsRequest proto.InternalMessageInfo

func (m *QueryAllValidityProofsRequest) GetMetadataUri() string {
	if m != nil {
		return m.MetadataUri
	}
	return ""
}

// QueryAllValidityProofsResponse is response type for the Query/AllValidityProofs RPC
// method.
type QueryAllValidityProofsResponse struct {
	Proofs []Proof `protobuf:"bytes,1,rep,name=proofs,proto3" json:"proofs"`
}

func (m *QueryAllValidityProofsResponse) Reset()         { *m = QueryAllValidityProofsResponse{} }
func (m *QueryAllValidityProofsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllValidityProofsResponse) ProtoMessage()    {}
func (*QueryAllValidityProofsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30467cfe054d35a6, []int{9}
}
func (m *QueryAllValidityProofsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValidityProofsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValidityProofsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValidityProofsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValidityProofsResponse.Merge(m, src)
}
func (m *QueryAllValidityProofsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValidityProofsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValidityProofsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValidityProofsResponse proto.InternalMessageInfo

func (m *QueryAllValidityProofsResponse) GetProofs() []Proof {
	if m != nil {
		return m.Proofs
	}
	return nil
}

// QueryInvalidityProofRequest is request type for the Query/Invalidity RPC
// method.
type QueryInvalidityRequest struct {
	MetadataUri   string `protobuf:"bytes,1,opt,name=metadata_uri,json=metadataUri,proto3" json:"metadata_uri,omitempty"`
	SenderAddress string `protobuf:"bytes,2,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
}

func (m *QueryInvalidityRequest) Reset()         { *m = QueryInvalidityRequest{} }
func (m *QueryInvalidityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInvalidityRequest) ProtoMessage()    {}
func (*QueryInvalidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30467cfe054d35a6, []int{10}
}
func (m *QueryInvalidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInvalidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInvalidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInvalidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInvalidityRequest.Merge(m, src)
}
func (m *QueryInvalidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInvalidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInvalidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInvalidityRequest proto.InternalMessageInfo

func (m *QueryInvalidityRequest) GetMetadataUri() string {
	if m != nil {
		return m.MetadataUri
	}
	return ""
}

func (m *QueryInvalidityRequest) GetSenderAddress() string {
	if m != nil {
		return m.SenderAddress
	}
	return ""
}

// QueryInvalidityResponse is response type for the Query/Invalidity RPC
// method.
type QueryInvalidityResponse struct {
	Invalidity Invalidity `protobuf:"bytes,1,opt,name=invalidity,proto3" json:"invalidity"`
}

func (m *QueryInvalidityResponse) Reset()         { *m = QueryInvalidityResponse{} }
func (m *QueryInvalidityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInvalidityResponse) ProtoMessage()    {}
func (*QueryInvalidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30467cfe054d35a6, []int{11}
}
func (m *QueryInvalidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInvalidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInvalidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInvalidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInvalidityResponse.Merge(m, src)
}
func (m *QueryInvalidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInvalidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInvalidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInvalidityResponse proto.InternalMessageInfo

func (m *QueryInvalidityResponse) GetInvalidity() Invalidity {
	if m != nil {
		return m.Invalidity
	}
	return Invalidity{}
}

// QueryAllInvalidityProofRequest is request type for the Query/AllInvalidity RPC
// method.
type QueryAllInvalidityRequest struct {
	MetadataUri string `protobuf:"bytes,1,opt,name=metadata_uri,json=metadataUri,proto3" json:"metadata_uri,omitempty"`
}

func (m *QueryAllInvalidityRequest) Reset()         { *m = QueryAllInvalidityRequest{} }
func (m *QueryAllInvalidityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllInvalidityRequest) ProtoMessage()    {}
func (*QueryAllInvalidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30467cfe054d35a6, []int{12}
}
func (m *QueryAllInvalidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInvalidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInvalidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInvalidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInvalidityRequest.Merge(m, src)
}
func (m *QueryAllInvalidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInvalidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInvalidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInvalidityRequest proto.InternalMessageInfo

func (m *QueryAllInvalidityRequest) GetMetadataUri() string {
	if m != nil {
		return m.MetadataUri
	}
	return ""
}

// QueryAllInvalidityResponse is response type for the Query/AllInvalidity RPC
// method.
type QueryAllInvalidityResponse struct {
	Invalidity []Invalidity `protobuf:"bytes,1,rep,name=invalidity,proto3" json:"invalidity"`
}

func (m *QueryAllInvalidityResponse) Reset()         { *m = QueryAllInvalidityResponse{} }
func (m *QueryAllInvalidityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllInvalidityResponse) ProtoMessage()    {}
func (*QueryAllInvalidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30467cfe054d35a6, []int{13}
}
func (m *QueryAllInvalidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInvalidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInvalidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInvalidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInvalidityResponse.Merge(m, src)
}
func (m *QueryAllInvalidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInvalidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInvalidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInvalidityResponse proto.InternalMessageInfo

func (m *QueryAllInvalidityResponse) GetInvalidity() []Invalidity {
	if m != nil {
		return m.Invalidity
	}
	return nil
}

// QueryValidatorShardIndicesRequest is request type for the
// Query/ValidatorShardIndices RPC method.
type QueryValidatorShardIndicesRequest struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	ShardCount       uint64 `protobuf:"varint,2,opt,name=shard_count,json=shardCount,proto3" json:"shard_count,omitempty"`
}

func (m *QueryValidatorShardIndicesRequest) Reset()         { *m = QueryValidatorShardIndicesRequest{} }
func (m *QueryValidatorShardIndicesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorShardIndicesRequest) ProtoMessage()    {}
func (*QueryValidatorShardIndicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30467cfe054d35a6, []int{14}
}
func (m *QueryValidatorShardIndicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorShardIndicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorShardIndicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorShardIndicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorShardIndicesRequest.Merge(m, src)
}
func (m *QueryValidatorShardIndicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorShardIndicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorShardIndicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorShardIndicesRequest proto.InternalMessageInfo

func (m *QueryValidatorShardIndicesRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *QueryValidatorShardIndicesRequest) GetShardCount() uint64 {
	if m != nil {
		return m.ShardCount
	}
	return 0
}

// QueryValidatorShardIndicesResponse is response type for the
// Query/ValidatorShardIndices RPC method.
type QueryValidatorShardIndicesResponse struct {
	ShardIndices []uint64 `protobuf:"varint,1,rep,packed,name=shard_indices,json=shardIndices,proto3" json:"shard_indices,omitempty"`
}

func (m *QueryValidatorShardIndicesResponse) Reset()         { *m = QueryValidatorShardIndicesResponse{} }
func (m *QueryValidatorShardIndicesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorShardIndicesResponse) ProtoMessage()    {}
func (*QueryValidatorShardIndicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30467cfe054d35a6, []int{15}
}
func (m *QueryValidatorShardIndicesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorShardIndicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorShardIndicesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorShardIndicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorShardIndicesResponse.Merge(m, src)
}
func (m *QueryValidatorShardIndicesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorShardIndicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorShardIndicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorShardIndicesResponse proto.InternalMessageInfo

func (m *QueryValidatorShardIndicesResponse) GetShardIndices() []uint64 {
	if m != nil {
		return m.ShardIndices
	}
	return nil
}

// QueryZkpProofThresholdRequest is request type for the
// Query/ZkpProofThreshold RPC method.
type QueryZkpProofThresholdRequest struct {
	ShardCount uint64 `protobuf:"varint,1,opt,name=shard_count,json=shardCount,proto3" json:"shard_count,omitempty"`
}

func (m *QueryZkpProofThresholdRequest) Reset()         { *m = QueryZkpProofThresholdRequest{} }
func (m *QueryZkpProofThresholdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryZkpProofThresholdRequest) ProtoMessage()    {}
func (*QueryZkpProofThresholdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30467cfe054d35a6, []int{16}
}
func (m *QueryZkpProofThresholdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryZkpProofThresholdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryZkpProofThresholdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryZkpProofThresholdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryZkpProofThresholdRequest.Merge(m, src)
}
func (m *QueryZkpProofThresholdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryZkpProofThresholdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryZkpProofThresholdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryZkpProofThresholdRequest proto.InternalMessageInfo

func (m *QueryZkpProofThresholdRequest) GetShardCount() uint64 {
	if m != nil {
		return m.ShardCount
	}
	return 0
}

// QueryZkpProofThresholdResponse is response type for the
// Query/ZkpProofThreshold RPC method.
type QueryZkpProofThresholdResponse struct {
	Threshold uint64 `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (m *QueryZkpProofThresholdResponse) Reset()         { *m = QueryZkpProofThresholdResponse{} }
func (m *QueryZkpProofThresholdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryZkpProofThresholdResponse) ProtoMessage()    {}
func (*QueryZkpProofThresholdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30467cfe054d35a6, []int{17}
}
func (m *QueryZkpProofThresholdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryZkpProofThresholdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryZkpProofThresholdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryZkpProofThresholdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryZkpProofThresholdResponse.Merge(m, src)
}
func (m *QueryZkpProofThresholdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryZkpProofThresholdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryZkpProofThresholdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryZkpProofThresholdResponse proto.InternalMessageInfo

func (m *QueryZkpProofThresholdResponse) GetThreshold() uint64 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

// QueryProofDeputyRequest is request type for the
// Query/ProofDeputy RPC method.
type QueryProofDeputyRequest struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *QueryProofDeputyRequest) Reset()         { *m = QueryProofDeputyRequest{} }
func (m *QueryProofDeputyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProofDeputyRequest) ProtoMessage()    {}
func (*QueryProofDeputyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30467cfe054d35a6, []int{18}
}
func (m *QueryProofDeputyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProofDeputyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProofDeputyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProofDeputyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProofDeputyRequest.Merge(m, src)
}
func (m *QueryProofDeputyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProofDeputyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProofDeputyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProofDeputyRequest proto.InternalMessageInfo

func (m *QueryProofDeputyRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

// QueryProofDeputyResponse is response type for the
// Query/ProofDeputy RPC method.
type QueryProofDeputyResponse struct {
	DeputyAddress string `protobuf:"bytes,1,opt,name=deputy_address,json=deputyAddress,proto3" json:"deputy_address,omitempty"`
}

func (m *QueryProofDeputyResponse) Reset()         { *m = QueryProofDeputyResponse{} }
func (m *QueryProofDeputyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProofDeputyResponse) ProtoMessage()    {}
func (*QueryProofDeputyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30467cfe054d35a6, []int{19}
}
func (m *QueryProofDeputyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProofDeputyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProofDeputyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProofDeputyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProofDeputyResponse.Merge(m, src)
}
func (m *QueryProofDeputyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProofDeputyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProofDeputyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProofDeputyResponse proto.InternalMessageInfo

func (m *QueryProofDeputyResponse) GetDeputyAddress() string {
	if m != nil {
		return m.DeputyAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "sunrise.da.v0.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "sunrise.da.v0.QueryParamsResponse")
	proto.RegisterType((*QueryPublishedDataRequest)(nil), "sunrise.da.v0.QueryPublishedDataRequest")
	proto.RegisterType((*QueryPublishedDataResponse)(nil), "sunrise.da.v0.QueryPublishedDataResponse")
	proto.RegisterType((*QueryAllPublishedDataRequest)(nil), "sunrise.da.v0.QueryAllPublishedDataRequest")
	proto.RegisterType((*QueryAllPublishedDataResponse)(nil), "sunrise.da.v0.QueryAllPublishedDataResponse")
	proto.RegisterType((*QueryValidityProofRequest)(nil), "sunrise.da.v0.QueryValidityProofRequest")
	proto.RegisterType((*QueryValidityProofResponse)(nil), "sunrise.da.v0.QueryValidityProofResponse")
	proto.RegisterType((*QueryAllValidityProofsRequest)(nil), "sunrise.da.v0.QueryAllValidityProofsRequest")
	proto.RegisterType((*QueryAllValidityProofsResponse)(nil), "sunrise.da.v0.QueryAllValidityProofsResponse")
	proto.RegisterType((*QueryInvalidityRequest)(nil), "sunrise.da.v0.QueryInvalidityRequest")
	proto.RegisterType((*QueryInvalidityResponse)(nil), "sunrise.da.v0.QueryInvalidityResponse")
	proto.RegisterType((*QueryAllInvalidityRequest)(nil), "sunrise.da.v0.QueryAllInvalidityRequest")
	proto.RegisterType((*QueryAllInvalidityResponse)(nil), "sunrise.da.v0.QueryAllInvalidityResponse")
	proto.RegisterType((*QueryValidatorShardIndicesRequest)(nil), "sunrise.da.v0.QueryValidatorShardIndicesRequest")
	proto.RegisterType((*QueryValidatorShardIndicesResponse)(nil), "sunrise.da.v0.QueryValidatorShardIndicesResponse")
	proto.RegisterType((*QueryZkpProofThresholdRequest)(nil), "sunrise.da.v0.QueryZkpProofThresholdRequest")
	proto.RegisterType((*QueryZkpProofThresholdResponse)(nil), "sunrise.da.v0.QueryZkpProofThresholdResponse")
	proto.RegisterType((*QueryProofDeputyRequest)(nil), "sunrise.da.v0.QueryProofDeputyRequest")
	proto.RegisterType((*QueryProofDeputyResponse)(nil), "sunrise.da.v0.QueryProofDeputyResponse")
}

func init() { proto.RegisterFile("sunrise/da/v0/query.proto", fileDescriptor_30467cfe054d35a6) }

var fileDescriptor_30467cfe054d35a6 = []byte{
	// 1012 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xb6, 0x49, 0xa4, 0x3c, 0x37, 0x55, 0x33, 0x24, 0x34, 0xde, 0xc6, 0x0e, 0x9e, 0xd0,
	0x92, 0x06, 0xd6, 0x1b, 0x82, 0x84, 0x38, 0x51, 0x62, 0xc2, 0x21, 0x97, 0x52, 0xdc, 0x52, 0xa4,
	0x20, 0x64, 0x4d, 0xb2, 0x8b, 0xbd, 0xea, 0x7a, 0x67, 0xbb, 0xb3, 0xb6, 0x08, 0x42, 0x1c, 0xe0,
	0x88, 0x84, 0x90, 0xe0, 0xc0, 0x81, 0x1f, 0xc0, 0x01, 0x09, 0x0e, 0xfd, 0x11, 0x3d, 0x56, 0xe5,
	0xc2, 0x09, 0xa1, 0x04, 0x89, 0xbf, 0x81, 0x76, 0xe6, 0xad, 0xed, 0xdd, 0x9d, 0x4d, 0xe3, 0xaa,
	0x97, 0xaa, 0x7e, 0xf3, 0xcd, 0x7b, 0xdf, 0xfb, 0xe6, 0xdb, 0xf7, 0x14, 0xa8, 0x8a, 0x41, 0x10,
	0x79, 0xc2, 0xb5, 0x1d, 0x66, 0x0f, 0xb7, 0xed, 0x87, 0x03, 0x37, 0x3a, 0x6e, 0x86, 0x11, 0x8f,
	0x39, 0x59, 0xc4, 0xa3, 0xa6, 0xc3, 0x9a, 0xc3, 0x6d, 0x73, 0x89, 0xf5, 0xbd, 0x80, 0xdb, 0xf2,
	0x5f, 0x85, 0x30, 0xab, 0x47, 0x5c, 0xf4, 0xb9, 0xe8, 0xc8, 0x5f, 0xb6, 0xfa, 0x81, 0x47, 0xcb,
	0x5d, 0xde, 0xe5, 0x2a, 0x9e, 0xfc, 0x0f, 0xa3, 0x6b, 0x5d, 0xce, 0xbb, 0xbe, 0x6b, 0xb3, 0xd0,
	0xb3, 0x59, 0x10, 0xf0, 0x98, 0xc5, 0x1e, 0x0f, 0xd2, 0x3b, 0x66, 0x96, 0x4b, 0xc8, 0x22, 0xd6,
	0x4f, 0xcf, 0x68, 0xee, 0x6c, 0x70, 0xe8, 0x7b, 0xa2, 0xe7, 0x3a, 0x1d, 0x87, 0xc5, 0x4c, 0x61,
	0xe8, 0x32, 0x90, 0x8f, 0x12, 0xfe, 0x77, 0xe4, 0xc5, 0xb6, 0xfb, 0x70, 0xe0, 0x8a, 0x98, 0x7e,
	0x08, 0x2f, 0x65, 0xa2, 0x22, 0xe4, 0x81, 0x70, 0xc9, 0x3b, 0x30, 0xaf, 0x0a, 0xac, 0x1a, 0xaf,
	0x18, 0x9b, 0x95, 0x9d, 0x95, 0x66, 0xa6, 0xdd, 0xa6, 0x82, 0xb7, 0x16, 0x1e, 0xff, 0xbd, 0x3e,
	0xf3, 0xeb, 0x7f, 0x7f, 0x6c, 0x19, 0x6d, 0xc4, 0xd3, 0x77, 0xa1, 0xaa, 0x12, 0xa6, 0x1c, 0xf6,
	0x58, 0xcc, 0xb0, 0x1a, 0x69, 0xc0, 0xa5, 0xbe, 0x1b, 0xb3, 0x84, 0x55, 0x67, 0x10, 0x79, 0x32,
	0xf9, 0x42, 0xbb, 0x92, 0xc6, 0x3e, 0x8e, 0x3c, 0x7a, 0x0f, 0x4c, 0xdd, 0x7d, 0xe4, 0xf5, 0x36,
	0xcc, 0x26, 0x40, 0x64, 0xb5, 0x96, 0x67, 0x35, 0x79, 0xa7, 0x35, 0x9b, 0x90, 0x6b, 0x4b, 0x3c,
	0xad, 0xc3, 0x9a, 0xcc, 0xba, 0xeb, 0xfb, 0x3a, 0x62, 0xf4, 0x13, 0xa8, 0x95, 0x9c, 0x17, 0x0a,
	0x5f, 0x9c, 0xaa, 0xf0, 0xf7, 0x06, 0xea, 0x71, 0x9f, 0xf9, 0x9e, 0xe3, 0xc5, 0xc7, 0x77, 0x22,
	0xce, 0x3f, 0x3f, 0xbf, 0x1e, 0xe4, 0x36, 0x2c, 0x0d, 0x93, 0xab, 0x2c, 0xe6, 0x51, 0x87, 0x39,
	0x4e, 0xe4, 0x0a, 0xb1, 0x7a, 0x21, 0xc1, 0xb5, 0x1a, 0x4f, 0x1f, 0x59, 0x35, 0xf4, 0xd5, 0xfd,
	0x14, 0xb3, 0xab, 0x20, 0x77, 0xe3, 0xc8, 0x0b, 0xba, 0xed, 0x2b, 0xc3, 0x5c, 0x9c, 0xde, 0x46,
	0x7d, 0x73, 0x7c, 0xb0, 0xcd, 0x6d, 0x98, 0x0b, 0x93, 0x00, 0x0a, 0xbc, 0x9c, 0xef, 0x33, 0x39,
	0xc3, 0xfe, 0x14, 0x90, 0xb6, 0xc6, 0xca, 0x65, 0x52, 0x8a, 0xa9, 0xde, 0xbc, 0x5e, 0x96, 0x03,
	0x79, 0xed, 0xc0, 0xbc, 0x2c, 0x27, 0xf0, 0x01, 0xce, 0x22, 0x86, 0x48, 0xfa, 0x15, 0xbc, 0x2c,
	0xb3, 0xee, 0x07, 0x43, 0x4c, 0x3a, 0x85, 0xec, 0xb7, 0xe0, 0xb2, 0x70, 0x03, 0xc7, 0xcd, 0x6b,
	0xbe, 0xfa, 0xf4, 0x91, 0xb5, 0x8c, 0x9a, 0x67, 0xa5, 0x5e, 0x54, 0xf8, 0x54, 0xe7, 0x03, 0xb8,
	0x5a, 0xa8, 0x8e, 0xcd, 0xdc, 0x02, 0xf0, 0x46, 0x51, 0x54, 0xba, 0x9a, 0x6b, 0x68, 0x7c, 0x0d,
	0xbb, 0x9a, 0xb8, 0x32, 0xfa, 0xc6, 0x76, 0x7d, 0xff, 0x79, 0x9a, 0xa3, 0x9f, 0xa1, 0x07, 0x72,
	0xf7, 0x4b, 0xe8, 0x5d, 0x9c, 0x96, 0xde, 0x4f, 0x06, 0x34, 0xc6, 0x1e, 0x4b, 0xcc, 0x77, 0xb7,
	0xc7, 0x22, 0x67, 0x3f, 0x70, 0xbc, 0x23, 0x77, 0xe4, 0x0b, 0xad, 0xb1, 0x8d, 0xe7, 0x36, 0x36,
	0x59, 0x87, 0x8a, 0x48, 0xca, 0x74, 0x8e, 0xf8, 0x20, 0x88, 0xe5, 0x73, 0xcd, 0xb6, 0x41, 0x86,
	0xde, 0x4f, 0x22, 0x74, 0x1f, 0xe8, 0x59, 0xac, 0xb0, 0xfb, 0x0d, 0x58, 0x54, 0x69, 0x3c, 0x75,
	0x20, 0x05, 0x98, 0x6d, 0x5f, 0x12, 0x13, 0x60, 0xfa, 0x1e, 0x9a, 0xfe, 0xe0, 0x41, 0x28, 0x9d,
	0x77, 0xaf, 0x17, 0xb9, 0xa2, 0xc7, 0x7d, 0x27, 0x6d, 0x2e, 0x47, 0xc6, 0x28, 0x90, 0xf9, 0x00,
	0x2d, 0xaf, 0xc9, 0x30, 0x22, 0xb2, 0x10, 0xa7, 0x41, 0x95, 0xa0, 0x35, 0xa7, 0x46, 0xed, 0x38,
	0x4e, 0x3d, 0x74, 0x99, 0xcc, 0xb1, 0xe7, 0x86, 0x83, 0xb1, 0x0f, 0x5e, 0xb0, 0xbe, 0xf4, 0x53,
	0x58, 0x2d, 0x96, 0x1a, 0x59, 0xe6, 0xb2, 0x23, 0x23, 0xb9, 0x42, 0x67, 0x7c, 0x2d, 0x0a, 0x8f,
	0xc1, 0x9d, 0xdf, 0x2b, 0x30, 0x27, 0xb3, 0x93, 0x00, 0xe6, 0xd5, 0x72, 0x21, 0x8d, 0x9c, 0xe7,
	0x8a, 0xdb, 0xcb, 0xa4, 0x67, 0x41, 0x14, 0x37, 0x5a, 0xfb, 0xe6, 0xcf, 0x7f, 0x7f, 0xbc, 0x70,
	0x95, 0xac, 0xd8, 0xba, 0x05, 0x4a, 0xbe, 0x33, 0x60, 0x31, 0x33, 0xbe, 0xc9, 0xa6, 0x36, 0xa9,
	0x66, 0x6b, 0x98, 0x37, 0xcf, 0x81, 0x44, 0x16, 0xd7, 0x25, 0x8b, 0x75, 0x52, 0xb3, 0x4b, 0x56,
	0xb5, 0x95, 0x7c, 0x9c, 0xe4, 0x67, 0x03, 0xae, 0xe4, 0x77, 0x10, 0x79, 0x5d, 0x57, 0xa6, 0x64,
	0x93, 0x99, 0x6f, 0x9c, 0x0f, 0x8c, 0xb4, 0x6e, 0x4a, 0x5a, 0x1b, 0xa4, 0x91, 0xa3, 0xc5, 0x7c,
	0xdf, 0xca, 0x51, 0x4b, 0x84, 0xca, 0x4c, 0x67, 0xbd, 0x50, 0xba, 0x3d, 0xa7, 0x17, 0x4a, 0xbb,
	0x81, 0x4a, 0x85, 0x4a, 0xa7, 0x8b, 0x25, 0xa7, 0x3b, 0xf9, 0xc5, 0x80, 0xa5, 0xc2, 0xba, 0x20,
	0x65, 0xcd, 0x6b, 0x37, 0x93, 0x69, 0x9d, 0x13, 0x8d, 0xcc, 0xb6, 0x24, 0xb3, 0x57, 0x09, 0xd5,
	0x68, 0x95, 0x65, 0x27, 0xc8, 0xd7, 0x00, 0xe3, 0x11, 0x49, 0xae, 0xeb, 0x0a, 0x15, 0x26, 0xb7,
	0x79, 0xe3, 0x59, 0x30, 0x24, 0xd2, 0x90, 0x44, 0xae, 0x91, 0x6a, 0x8e, 0xc8, 0x78, 0x04, 0xcb,
	0xc7, 0xca, 0x4c, 0x77, 0xfd, 0x63, 0xe9, 0x16, 0x88, 0xfe, 0xb1, 0xb4, 0xab, 0xa2, 0xf4, 0xb1,
	0x12, 0x49, 0x26, 0xd8, 0xfc, 0x66, 0xc0, 0x8a, 0x76, 0xea, 0x92, 0xed, 0x52, 0x63, 0x94, 0xac,
	0x0d, 0xf3, 0xcd, 0x29, 0x6e, 0x20, 0xcb, 0xa6, 0x64, 0xb9, 0x49, 0x6e, 0xe8, 0x2c, 0x95, 0xdc,
	0xb2, 0xe4, 0x60, 0xb6, 0x70, 0xe2, 0x4b, 0x6f, 0x15, 0xe6, 0xb2, 0xde, 0x5b, 0x65, 0x0b, 0x40,
	0xef, 0xad, 0xd2, 0x61, 0x5f, 0xea, 0xad, 0x2f, 0x1f, 0x84, 0xca, 0x52, 0xd6, 0x68, 0xe6, 0x93,
	0x6f, 0x0d, 0xa8, 0x4c, 0x0c, 0x61, 0xa2, 0xb5, 0x4d, 0x71, 0x21, 0x98, 0xaf, 0x3d, 0x13, 0x87,
	0x64, 0x36, 0x24, 0x99, 0x1a, 0xb9, 0x96, 0x9f, 0x55, 0x92, 0x88, 0x1a, 0xdc, 0xad, 0xbd, 0xc7,
	0x27, 0x75, 0xe3, 0xc9, 0x49, 0xdd, 0xf8, 0xe7, 0xa4, 0x6e, 0xfc, 0x70, 0x5a, 0x9f, 0x79, 0x72,
	0x5a, 0x9f, 0xf9, 0xeb, 0xb4, 0x3e, 0x73, 0xb0, 0xd5, 0xf5, 0xe2, 0xde, 0xe0, 0xb0, 0x79, 0xc4,
	0xfb, 0x69, 0x02, 0x9f, 0x1d, 0xbb, 0xd1, 0x28, 0xdb, 0x17, 0x49, 0xbe, 0xf8, 0x38, 0x74, 0xc5,
	0xe1, 0xbc, 0xfc, 0xdb, 0xe4, 0xad, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x59, 0x9c, 0xaf, 0x6f,
	0x69, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// PublishedData queries published data
	PublishedData(ctx context.Context, in *QueryPublishedDataRequest, opts ...grpc.CallOption) (*QueryPublishedDataResponse, error)
	// AllPublishedData queries published data
	AllPublishedData(ctx context.Context, in *QueryAllPublishedDataRequest, opts ...grpc.CallOption) (*QueryAllPublishedDataResponse, error)
	// ValidityProof queries validity proof from the validator
	ValidityProof(ctx context.Context, in *QueryValidityProofRequest, opts ...grpc.CallOption) (*QueryValidityProofResponse, error)
	// AllValidityProofs queries all validity proofs
	AllValidityProofs(ctx context.Context, in *QueryAllValidityProofsRequest, opts ...grpc.CallOption) (*QueryAllValidityProofsResponse, error)
	// Invalidity queries invalidity report
	Invalidity(ctx context.Context, in *QueryInvalidityRequest, opts ...grpc.CallOption) (*QueryInvalidityResponse, error)
	// AllInvalidity queries all invalidity reports
	AllInvalidity(ctx context.Context, in *QueryAllInvalidityRequest, opts ...grpc.CallOption) (*QueryAllInvalidityResponse, error)
	// ValidatorShardIndices
	ValidatorShardIndices(ctx context.Context, in *QueryValidatorShardIndicesRequest, opts ...grpc.CallOption) (*QueryValidatorShardIndicesResponse, error)
	// ZkpProofThreshold
	ZkpProofThreshold(ctx context.Context, in *QueryZkpProofThresholdRequest, opts ...grpc.CallOption) (*QueryZkpProofThresholdResponse, error)
	// ProofDeputy
	ProofDeputy(ctx context.Context, in *QueryProofDeputyRequest, opts ...grpc.CallOption) (*QueryProofDeputyResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/sunrise.da.v0.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PublishedData(ctx context.Context, in *QueryPublishedDataRequest, opts ...grpc.CallOption) (*QueryPublishedDataResponse, error) {
	out := new(QueryPublishedDataResponse)
	err := c.cc.Invoke(ctx, "/sunrise.da.v0.Query/PublishedData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllPublishedData(ctx context.Context, in *QueryAllPublishedDataRequest, opts ...grpc.CallOption) (*QueryAllPublishedDataResponse, error) {
	out := new(QueryAllPublishedDataResponse)
	err := c.cc.Invoke(ctx, "/sunrise.da.v0.Query/AllPublishedData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidityProof(ctx context.Context, in *QueryValidityProofRequest, opts ...grpc.CallOption) (*QueryValidityProofResponse, error) {
	out := new(QueryValidityProofResponse)
	err := c.cc.Invoke(ctx, "/sunrise.da.v0.Query/ValidityProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllValidityProofs(ctx context.Context, in *QueryAllValidityProofsRequest, opts ...grpc.CallOption) (*QueryAllValidityProofsResponse, error) {
	out := new(QueryAllValidityProofsResponse)
	err := c.cc.Invoke(ctx, "/sunrise.da.v0.Query/AllValidityProofs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Invalidity(ctx context.Context, in *QueryInvalidityRequest, opts ...grpc.CallOption) (*QueryInvalidityResponse, error) {
	out := new(QueryInvalidityResponse)
	err := c.cc.Invoke(ctx, "/sunrise.da.v0.Query/Invalidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllInvalidity(ctx context.Context, in *QueryAllInvalidityRequest, opts ...grpc.CallOption) (*QueryAllInvalidityResponse, error) {
	out := new(QueryAllInvalidityResponse)
	err := c.cc.Invoke(ctx, "/sunrise.da.v0.Query/AllInvalidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorShardIndices(ctx context.Context, in *QueryValidatorShardIndicesRequest, opts ...grpc.CallOption) (*QueryValidatorShardIndicesResponse, error) {
	out := new(QueryValidatorShardIndicesResponse)
	err := c.cc.Invoke(ctx, "/sunrise.da.v0.Query/ValidatorShardIndices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ZkpProofThreshold(ctx context.Context, in *QueryZkpProofThresholdRequest, opts ...grpc.CallOption) (*QueryZkpProofThresholdResponse, error) {
	out := new(QueryZkpProofThresholdResponse)
	err := c.cc.Invoke(ctx, "/sunrise.da.v0.Query/ZkpProofThreshold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProofDeputy(ctx context.Context, in *QueryProofDeputyRequest, opts ...grpc.CallOption) (*QueryProofDeputyResponse, error) {
	out := new(QueryProofDeputyResponse)
	err := c.cc.Invoke(ctx, "/sunrise.da.v0.Query/ProofDeputy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// PublishedData queries published data
	PublishedData(context.Context, *QueryPublishedDataRequest) (*QueryPublishedDataResponse, error)
	// AllPublishedData queries published data
	AllPublishedData(context.Context, *QueryAllPublishedDataRequest) (*QueryAllPublishedDataResponse, error)
	// ValidityProof queries validity proof from the validator
	ValidityProof(context.Context, *QueryValidityProofRequest) (*QueryValidityProofResponse, error)
	// AllValidityProofs queries all validity proofs
	AllValidityProofs(context.Context, *QueryAllValidityProofsRequest) (*QueryAllValidityProofsResponse, error)
	// Invalidity queries invalidity report
	Invalidity(context.Context, *QueryInvalidityRequest) (*QueryInvalidityResponse, error)
	// AllInvalidity queries all invalidity reports
	AllInvalidity(context.Context, *QueryAllInvalidityRequest) (*QueryAllInvalidityResponse, error)
	// ValidatorShardIndices
	ValidatorShardIndices(context.Context, *QueryValidatorShardIndicesRequest) (*QueryValidatorShardIndicesResponse, error)
	// ZkpProofThreshold
	ZkpProofThreshold(context.Context, *QueryZkpProofThresholdRequest) (*QueryZkpProofThresholdResponse, error)
	// ProofDeputy
	ProofDeputy(context.Context, *QueryProofDeputyRequest) (*QueryProofDeputyResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) PublishedData(ctx context.Context, req *QueryPublishedDataRequest) (*QueryPublishedDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishedData not implemented")
}
func (*UnimplementedQueryServer) AllPublishedData(ctx context.Context, req *QueryAllPublishedDataRequest) (*QueryAllPublishedDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllPublishedData not implemented")
}
func (*UnimplementedQueryServer) ValidityProof(ctx context.Context, req *QueryValidityProofRequest) (*QueryValidityProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidityProof not implemented")
}
func (*UnimplementedQueryServer) AllValidityProofs(ctx context.Context, req *QueryAllValidityProofsRequest) (*QueryAllValidityProofsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllValidityProofs not implemented")
}
func (*UnimplementedQueryServer) Invalidity(ctx context.Context, req *QueryInvalidityRequest) (*QueryInvalidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invalidity not implemented")
}
func (*UnimplementedQueryServer) AllInvalidity(ctx context.Context, req *QueryAllInvalidityRequest) (*QueryAllInvalidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllInvalidity not implemented")
}
func (*UnimplementedQueryServer) ValidatorShardIndices(ctx context.Context, req *QueryValidatorShardIndicesRequest) (*QueryValidatorShardIndicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorShardIndices not implemented")
}
func (*UnimplementedQueryServer) ZkpProofThreshold(ctx context.Context, req *QueryZkpProofThresholdRequest) (*QueryZkpProofThresholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZkpProofThreshold not implemented")
}
func (*UnimplementedQueryServer) ProofDeputy(ctx context.Context, req *QueryProofDeputyRequest) (*QueryProofDeputyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProofDeputy not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.da.v0.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PublishedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPublishedDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PublishedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.da.v0.Query/PublishedData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PublishedData(ctx, req.(*QueryPublishedDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllPublishedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPublishedDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllPublishedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.da.v0.Query/AllPublishedData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllPublishedData(ctx, req.(*QueryAllPublishedDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidityProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidityProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidityProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.da.v0.Query/ValidityProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidityProof(ctx, req.(*QueryValidityProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllValidityProofs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllValidityProofsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllValidityProofs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.da.v0.Query/AllValidityProofs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllValidityProofs(ctx, req.(*QueryAllValidityProofsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Invalidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInvalidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Invalidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.da.v0.Query/Invalidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Invalidity(ctx, req.(*QueryInvalidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllInvalidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInvalidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllInvalidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.da.v0.Query/AllInvalidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllInvalidity(ctx, req.(*QueryAllInvalidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorShardIndices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorShardIndicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorShardIndices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.da.v0.Query/ValidatorShardIndices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorShardIndices(ctx, req.(*QueryValidatorShardIndicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ZkpProofThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryZkpProofThresholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ZkpProofThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.da.v0.Query/ZkpProofThreshold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ZkpProofThreshold(ctx, req.(*QueryZkpProofThresholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProofDeputy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProofDeputyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProofDeputy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.da.v0.Query/ProofDeputy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProofDeputy(ctx, req.(*QueryProofDeputyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sunrise.da.v0.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "PublishedData",
			Handler:    _Query_PublishedData_Handler,
		},
		{
			MethodName: "AllPublishedData",
			Handler:    _Query_AllPublishedData_Handler,
		},
		{
			MethodName: "ValidityProof",
			Handler:    _Query_ValidityProof_Handler,
		},
		{
			MethodName: "AllValidityProofs",
			Handler:    _Query_AllValidityProofs_Handler,
		},
		{
			MethodName: "Invalidity",
			Handler:    _Query_Invalidity_Handler,
		},
		{
			MethodName: "AllInvalidity",
			Handler:    _Query_AllInvalidity_Handler,
		},
		{
			MethodName: "ValidatorShardIndices",
			Handler:    _Query_ValidatorShardIndices_Handler,
		},
		{
			MethodName: "ZkpProofThreshold",
			Handler:    _Query_ZkpProofThreshold_Handler,
		},
		{
			MethodName: "ProofDeputy",
			Handler:    _Query_ProofDeputy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sunrise/da/v0/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPublishedDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPublishedDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPublishedDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetadataUri) > 0 {
		i -= len(m.MetadataUri)
		copy(dAtA[i:], m.MetadataUri)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MetadataUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPublishedDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPublishedDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPublishedDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPublishedDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPublishedDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPublishedDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllPublishedDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPublishedDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPublishedDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidityProofRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidityProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidityProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MetadataUri) > 0 {
		i -= len(m.MetadataUri)
		copy(dAtA[i:], m.MetadataUri)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MetadataUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidityProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidityProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidityProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllValidityProofsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValidityProofsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValidityProofsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetadataUri) > 0 {
		i -= len(m.MetadataUri)
		copy(dAtA[i:], m.MetadataUri)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MetadataUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllValidityProofsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValidityProofsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValidityProofsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proofs) > 0 {
		for iNdEx := len(m.Proofs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Proofs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryInvalidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInvalidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInvalidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MetadataUri) > 0 {
		i -= len(m.MetadataUri)
		copy(dAtA[i:], m.MetadataUri)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MetadataUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInvalidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInvalidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInvalidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Invalidity.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllInvalidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInvalidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInvalidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetadataUri) > 0 {
		i -= len(m.MetadataUri)
		copy(dAtA[i:], m.MetadataUri)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MetadataUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInvalidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInvalidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInvalidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Invalidity) > 0 {
		for iNdEx := len(m.Invalidity) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Invalidity[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorShardIndicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorShardIndicesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorShardIndicesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShardCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ShardCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorShardIndicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorShardIndicesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorShardIndicesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ShardIndices) > 0 {
		dAtA6 := make([]byte, len(m.ShardIndices)*10)
		var j5 int
		for _, num := range m.ShardIndices {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintQuery(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryZkpProofThresholdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryZkpProofThresholdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryZkpProofThresholdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShardCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ShardCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryZkpProofThresholdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryZkpProofThresholdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryZkpProofThresholdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Threshold != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryProofDeputyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProofDeputyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProofDeputyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProofDeputyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProofDeputyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProofDeputyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeputyAddress) > 0 {
		i -= len(m.DeputyAddress)
		copy(dAtA[i:], m.DeputyAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DeputyAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPublishedDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetadataUri)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPublishedDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Data.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPublishedDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllPublishedDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryValidityProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetadataUri)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidityProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Proof.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllValidityProofsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetadataUri)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllValidityProofsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Proofs) > 0 {
		for _, e := range m.Proofs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryInvalidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetadataUri)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInvalidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Invalidity.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllInvalidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetadataUri)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInvalidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Invalidity) > 0 {
		for _, e := range m.Invalidity {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryValidatorShardIndicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ShardCount != 0 {
		n += 1 + sovQuery(uint64(m.ShardCount))
	}
	return n
}

func (m *QueryValidatorShardIndicesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ShardIndices) > 0 {
		l = 0
		for _, e := range m.ShardIndices {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryZkpProofThresholdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardCount != 0 {
		n += 1 + sovQuery(uint64(m.ShardCount))
	}
	return n
}

func (m *QueryZkpProofThresholdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Threshold != 0 {
		n += 1 + sovQuery(uint64(m.Threshold))
	}
	return n
}

func (m *QueryProofDeputyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProofDeputyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeputyAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPublishedDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPublishedDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPublishedDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPublishedDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPublishedDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPublishedDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPublishedDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPublishedDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPublishedDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPublishedDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPublishedDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPublishedDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, PublishedData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidityProofRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidityProofRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidityProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidityProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidityProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidityProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValidityProofsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValidityProofsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValidityProofsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValidityProofsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValidityProofsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValidityProofsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proofs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proofs = append(m.Proofs, Proof{})
			if err := m.Proofs[len(m.Proofs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInvalidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInvalidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInvalidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInvalidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInvalidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInvalidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invalidity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Invalidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInvalidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInvalidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInvalidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInvalidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInvalidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInvalidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invalidity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Invalidity = append(m.Invalidity, Invalidity{})
			if err := m.Invalidity[len(m.Invalidity)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorShardIndicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorShardIndicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorShardIndicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardCount", wireType)
			}
			m.ShardCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorShardIndicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorShardIndicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorShardIndicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ShardIndices = append(m.ShardIndices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ShardIndices) == 0 {
					m.ShardIndices = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ShardIndices = append(m.ShardIndices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardIndices", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryZkpProofThresholdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryZkpProofThresholdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryZkpProofThresholdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardCount", wireType)
			}
			m.ShardCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryZkpProofThresholdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryZkpProofThresholdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryZkpProofThresholdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProofDeputyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProofDeputyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProofDeputyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProofDeputyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProofDeputyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProofDeputyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeputyAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeputyAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
