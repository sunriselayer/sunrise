// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/da/v1/genesis.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	any "github.com/cosmos/gogoproto/types/any"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the da module's genesis state.
type GenesisState struct {
	// params defines all the parameters of the module.
	Params                  Params                   `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	CommitmentKeys          []CommitmentKey          `protobuf:"bytes,2,rep,name=commitment_keys,json=commitmentKeys,proto3" json:"commitment_keys"`
	BlobDeclarations        []BlobDeclaration        `protobuf:"bytes,3,rep,name=blob_declarations,json=blobDeclarations,proto3" json:"blob_declarations"`
	ValidatorPowerSnapshots []ValidatorPowerSnapshot `protobuf:"bytes,4,rep,name=validator_power_snapshots,json=validatorPowerSnapshots,proto3" json:"validator_power_snapshots"`
	BlobCommitments         []BlobCommitment         `protobuf:"bytes,5,rep,name=blob_commitments,json=blobCommitments,proto3" json:"blob_commitments"`
	Challenges              []Challenge              `protobuf:"bytes,6,rep,name=challenges,proto3" json:"challenges"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_156bf98d51299588, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetCommitmentKeys() []CommitmentKey {
	if m != nil {
		return m.CommitmentKeys
	}
	return nil
}

func (m *GenesisState) GetBlobDeclarations() []BlobDeclaration {
	if m != nil {
		return m.BlobDeclarations
	}
	return nil
}

func (m *GenesisState) GetValidatorPowerSnapshots() []ValidatorPowerSnapshot {
	if m != nil {
		return m.ValidatorPowerSnapshots
	}
	return nil
}

func (m *GenesisState) GetBlobCommitments() []BlobCommitment {
	if m != nil {
		return m.BlobCommitments
	}
	return nil
}

func (m *GenesisState) GetChallenges() []Challenge {
	if m != nil {
		return m.Challenges
	}
	return nil
}

// CommitmentKey
type CommitmentKey struct {
	Validator string   `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	Pubkey    *any.Any `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *CommitmentKey) Reset()         { *m = CommitmentKey{} }
func (m *CommitmentKey) String() string { return proto.CompactTextString(m) }
func (*CommitmentKey) ProtoMessage()    {}
func (*CommitmentKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_156bf98d51299588, []int{1}
}
func (m *CommitmentKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitmentKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitmentKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitmentKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitmentKey.Merge(m, src)
}
func (m *CommitmentKey) XXX_Size() int {
	return m.Size()
}
func (m *CommitmentKey) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitmentKey.DiscardUnknown(m)
}

var xxx_messageInfo_CommitmentKey proto.InternalMessageInfo

func (m *CommitmentKey) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *CommitmentKey) GetPubkey() *any.Any {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

// ValidatorPowerSnapshot
type ValidatorPowerSnapshot struct {
	BlockHeight int64                 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Validator   string                `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	Power       cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=power,proto3,customtype=cosmossdk.io/math.Int" json:"power"`
}

func (m *ValidatorPowerSnapshot) Reset()         { *m = ValidatorPowerSnapshot{} }
func (m *ValidatorPowerSnapshot) String() string { return proto.CompactTextString(m) }
func (*ValidatorPowerSnapshot) ProtoMessage()    {}
func (*ValidatorPowerSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_156bf98d51299588, []int{2}
}
func (m *ValidatorPowerSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorPowerSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorPowerSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorPowerSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorPowerSnapshot.Merge(m, src)
}
func (m *ValidatorPowerSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorPowerSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorPowerSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorPowerSnapshot proto.InternalMessageInfo

func (m *ValidatorPowerSnapshot) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ValidatorPowerSnapshot) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

// Challenge
type Challenge struct {
	ShardsMerkleRoot     []byte `protobuf:"bytes,1,opt,name=shards_merkle_root,json=shardsMerkleRoot,proto3" json:"shards_merkle_root,omitempty"`
	ShardIndex           uint32 `protobuf:"varint,2,opt,name=shard_index,json=shardIndex,proto3" json:"shard_index,omitempty"`
	EvaluationPointIndex uint32 `protobuf:"varint,3,opt,name=evaluation_point_index,json=evaluationPointIndex,proto3" json:"evaluation_point_index,omitempty"`
}

func (m *Challenge) Reset()         { *m = Challenge{} }
func (m *Challenge) String() string { return proto.CompactTextString(m) }
func (*Challenge) ProtoMessage()    {}
func (*Challenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_156bf98d51299588, []int{3}
}
func (m *Challenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Challenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Challenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Challenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Challenge.Merge(m, src)
}
func (m *Challenge) XXX_Size() int {
	return m.Size()
}
func (m *Challenge) XXX_DiscardUnknown() {
	xxx_messageInfo_Challenge.DiscardUnknown(m)
}

var xxx_messageInfo_Challenge proto.InternalMessageInfo

func (m *Challenge) GetShardsMerkleRoot() []byte {
	if m != nil {
		return m.ShardsMerkleRoot
	}
	return nil
}

func (m *Challenge) GetShardIndex() uint32 {
	if m != nil {
		return m.ShardIndex
	}
	return 0
}

func (m *Challenge) GetEvaluationPointIndex() uint32 {
	if m != nil {
		return m.EvaluationPointIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "sunrise.da.v1.GenesisState")
	proto.RegisterType((*CommitmentKey)(nil), "sunrise.da.v1.CommitmentKey")
	proto.RegisterType((*ValidatorPowerSnapshot)(nil), "sunrise.da.v1.ValidatorPowerSnapshot")
	proto.RegisterType((*Challenge)(nil), "sunrise.da.v1.Challenge")
}

func init() { proto.RegisterFile("sunrise/da/v1/genesis.proto", fileDescriptor_156bf98d51299588) }

var fileDescriptor_156bf98d51299588 = []byte{
	// 643 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4f, 0x4f, 0xd4, 0x40,
	0x1c, 0xdd, 0xb2, 0xb0, 0x09, 0xb3, 0x20, 0x38, 0x59, 0xb0, 0xa0, 0x14, 0xd8, 0xc4, 0x84, 0xa8,
	0x4c, 0x03, 0x78, 0xd6, 0xb0, 0x12, 0x95, 0x10, 0xcd, 0x5a, 0x12, 0x0f, 0x5e, 0x9a, 0x69, 0x3b,
	0xb6, 0xcd, 0xb6, 0x33, 0xcd, 0xcc, 0xec, 0x4a, 0xbf, 0x05, 0x47, 0x3f, 0x08, 0x77, 0xaf, 0xc4,
	0x13, 0xe1, 0x64, 0x8c, 0x21, 0x06, 0xbe, 0x88, 0xe9, 0x74, 0x76, 0x97, 0x6e, 0xf6, 0xe4, 0x6d,
	0xe7, 0xbd, 0xf7, 0x7b, 0xbf, 0x3f, 0x7d, 0x59, 0xf0, 0x58, 0xf4, 0x29, 0x8f, 0x05, 0xb1, 0x03,
	0x6c, 0x0f, 0xf6, 0xec, 0x90, 0x50, 0x22, 0x62, 0x81, 0x32, 0xce, 0x24, 0x83, 0x8b, 0x9a, 0x44,
	0x01, 0x46, 0x83, 0xbd, 0xf5, 0x35, 0x9f, 0x89, 0x94, 0x09, 0x57, 0x91, 0x76, 0xf9, 0x28, 0x95,
	0xeb, 0xad, 0x90, 0x85, 0xac, 0xc4, 0x8b, 0x5f, 0x1a, 0x5d, 0x0b, 0x19, 0x0b, 0x13, 0x62, 0xab,
	0x97, 0xd7, 0xff, 0x6a, 0x63, 0x9a, 0x6b, 0xca, 0xac, 0xf6, 0xf5, 0x12, 0xe6, 0x69, 0x66, 0xbd,
	0xca, 0x64, 0x98, 0xe3, 0x54, 0xb7, 0x69, 0xff, 0xa9, 0x83, 0x85, 0x77, 0xe5, 0x88, 0xa7, 0x12,
	0x4b, 0x02, 0x0f, 0x40, 0xa3, 0x14, 0x98, 0xc6, 0x96, 0xb1, 0xd3, 0xdc, 0x5f, 0x41, 0x95, 0x91,
	0x51, 0x57, 0x91, 0x9d, 0xd9, 0xcb, 0x9b, 0xcd, 0x9a, 0xa3, 0xa5, 0xf0, 0x04, 0x2c, 0xf9, 0x2c,
	0x4d, 0x63, 0x99, 0x12, 0x2a, 0xdd, 0x1e, 0xc9, 0x85, 0x39, 0xb3, 0x55, 0xdf, 0x69, 0xee, 0x3f,
	0x99, 0xa8, 0x7e, 0x33, 0x52, 0x9d, 0x90, 0x5c, 0x9b, 0x3c, 0xf0, 0xef, 0x83, 0x02, 0x7e, 0x02,
	0x0f, 0x8b, 0xe1, 0xdd, 0x80, 0xf8, 0x09, 0xe6, 0x58, 0xc6, 0x8c, 0x0a, 0xb3, 0xae, 0xec, 0xac,
	0x09, 0xbb, 0x4e, 0xc2, 0xbc, 0xa3, 0xb1, 0x4c, 0x1b, 0x2e, 0x7b, 0x55, 0x58, 0xc0, 0x10, 0xac,
	0x0d, 0x70, 0x12, 0x07, 0x58, 0x32, 0xee, 0x66, 0xec, 0x1b, 0xe1, 0xae, 0xa0, 0x38, 0x13, 0x11,
	0x93, 0xc2, 0x9c, 0x55, 0xd6, 0x4f, 0x27, 0xac, 0x3f, 0x0f, 0xf5, 0xdd, 0x42, 0x7e, 0xaa, 0xd5,
	0xba, 0xc3, 0xa3, 0xc1, 0x54, 0x56, 0xc0, 0x8f, 0x40, 0x35, 0x77, 0xc7, 0x2b, 0x09, 0x73, 0x4e,
	0xf9, 0x6f, 0x4c, 0x19, 0x7d, 0x7c, 0x0d, 0xed, 0xbb, 0xe4, 0x55, 0x50, 0x01, 0x5f, 0x01, 0xe0,
	0x47, 0x38, 0x49, 0x08, 0x0d, 0x89, 0x30, 0x1b, 0xca, 0xc9, 0x9c, 0xbc, 0xe9, 0x50, 0xa0, 0x4d,
	0xee, 0x55, 0xb4, 0xbf, 0x1b, 0x60, 0xb1, 0x72, 0x73, 0xf8, 0x1a, 0xcc, 0x8f, 0x86, 0x57, 0x9f,
	0x78, 0xbe, 0xb3, 0x7d, 0x7d, 0xb1, 0xbb, 0xa1, 0xc3, 0x37, 0x5a, 0xfb, 0x30, 0x08, 0x38, 0x11,
	0xe2, 0x54, 0xf2, 0x98, 0x86, 0xce, 0xb8, 0x06, 0xbe, 0x05, 0x8d, 0xac, 0xef, 0xf5, 0x48, 0x6e,
	0xce, 0xa8, 0x80, 0xb4, 0x50, 0x99, 0x49, 0x34, 0xcc, 0x24, 0x3a, 0xa4, 0x79, 0xc7, 0xfc, 0x79,
	0xb1, 0xdb, 0xd2, 0x9e, 0x3e, 0xcf, 0x33, 0xc9, 0x50, 0xb7, 0xef, 0x9d, 0x90, 0xdc, 0xd1, 0xd5,
	0xed, 0x1f, 0x06, 0x58, 0x9d, 0x7e, 0x64, 0xb8, 0x0d, 0x16, 0xbc, 0x84, 0xf9, 0x3d, 0x37, 0x22,
	0x71, 0x18, 0x49, 0x35, 0x66, 0xdd, 0x69, 0x2a, 0xec, 0xbd, 0x82, 0xaa, 0x6b, 0xcc, 0xfc, 0xc7,
	0x1a, 0x87, 0x60, 0x4e, 0x05, 0xc1, 0xac, 0xab, 0xe2, 0xe7, 0xc5, 0xe9, 0x7e, 0xdf, 0x6c, 0xae,
	0x94, 0x06, 0x22, 0xe8, 0xa1, 0x98, 0xd9, 0x29, 0x96, 0x11, 0x3a, 0xa6, 0xf2, 0xfa, 0x62, 0x17,
	0x68, 0xe7, 0x63, 0x2a, 0x9d, 0xb2, 0xb2, 0x7d, 0x6e, 0x80, 0xf9, 0xd1, 0xf1, 0xe1, 0x0b, 0x00,
	0x45, 0x84, 0x79, 0x20, 0xdc, 0x94, 0xf0, 0x5e, 0x42, 0x5c, 0xce, 0x58, 0x39, 0xfa, 0x82, 0xb3,
	0x5c, 0x32, 0x1f, 0x14, 0xe1, 0x30, 0x26, 0xe1, 0x26, 0x68, 0x2a, 0xcc, 0x8d, 0x69, 0x40, 0xce,
	0xd4, 0x06, 0x8b, 0x0e, 0x50, 0xd0, 0x71, 0x81, 0xc0, 0x97, 0x60, 0x95, 0x0c, 0x70, 0xd2, 0x57,
	0x09, 0x76, 0x33, 0x16, 0x53, 0xa9, 0xb5, 0x75, 0xa5, 0x6d, 0x8d, 0xd9, 0x6e, 0x41, 0xaa, 0xaa,
	0xce, 0xd1, 0xe5, 0xad, 0x65, 0x5c, 0xdd, 0x5a, 0xc6, 0xdf, 0x5b, 0xcb, 0x38, 0xbf, 0xb3, 0x6a,
	0x57, 0x77, 0x56, 0xed, 0xd7, 0x9d, 0x55, 0xfb, 0xf2, 0x2c, 0x8c, 0x65, 0xd4, 0xf7, 0x90, 0xcf,
	0x52, 0x5b, 0xe7, 0x27, 0xc1, 0x39, 0xe1, 0xc3, 0x87, 0x7d, 0x56, 0xfc, 0x3d, 0xc8, 0x3c, 0x23,
	0xc2, 0x6b, 0xa8, 0x4f, 0x79, 0xf0, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x3a, 0x56, 0x82, 0xcb,
	0x04, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Challenges) > 0 {
		for iNdEx := len(m.Challenges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Challenges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.BlobCommitments) > 0 {
		for iNdEx := len(m.BlobCommitments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlobCommitments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ValidatorPowerSnapshots) > 0 {
		for iNdEx := len(m.ValidatorPowerSnapshots) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorPowerSnapshots[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.BlobDeclarations) > 0 {
		for iNdEx := len(m.BlobDeclarations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlobDeclarations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CommitmentKeys) > 0 {
		for iNdEx := len(m.CommitmentKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CommitmentKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CommitmentKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitmentKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitmentKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorPowerSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorPowerSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorPowerSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Power.Size()
		i -= size
		if _, err := m.Power.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if m.BlockHeight != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Challenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Challenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Challenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EvaluationPointIndex != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.EvaluationPointIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.ShardIndex != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ShardIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ShardsMerkleRoot) > 0 {
		i -= len(m.ShardsMerkleRoot)
		copy(dAtA[i:], m.ShardsMerkleRoot)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ShardsMerkleRoot)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.CommitmentKeys) > 0 {
		for _, e := range m.CommitmentKeys {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BlobDeclarations) > 0 {
		for _, e := range m.BlobDeclarations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ValidatorPowerSnapshots) > 0 {
		for _, e := range m.ValidatorPowerSnapshots {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BlobCommitments) > 0 {
		for _, e := range m.BlobCommitments {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Challenges) > 0 {
		for _, e := range m.Challenges {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *CommitmentKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *ValidatorPowerSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovGenesis(uint64(m.BlockHeight))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.Power.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *Challenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShardsMerkleRoot)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.ShardIndex != 0 {
		n += 1 + sovGenesis(uint64(m.ShardIndex))
	}
	if m.EvaluationPointIndex != 0 {
		n += 1 + sovGenesis(uint64(m.EvaluationPointIndex))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitmentKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitmentKeys = append(m.CommitmentKeys, CommitmentKey{})
			if err := m.CommitmentKeys[len(m.CommitmentKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlobDeclarations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlobDeclarations = append(m.BlobDeclarations, BlobDeclaration{})
			if err := m.BlobDeclarations[len(m.BlobDeclarations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorPowerSnapshots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorPowerSnapshots = append(m.ValidatorPowerSnapshots, ValidatorPowerSnapshot{})
			if err := m.ValidatorPowerSnapshots[len(m.ValidatorPowerSnapshots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlobCommitments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlobCommitments = append(m.BlobCommitments, BlobCommitment{})
			if err := m.BlobCommitments[len(m.BlobCommitments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenges = append(m.Challenges, Challenge{})
			if err := m.Challenges[len(m.Challenges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitmentKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitmentKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitmentKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &any.Any{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorPowerSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorPowerSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorPowerSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Power.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Challenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Challenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Challenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardsMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardsMerkleRoot = append(m.ShardsMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ShardsMerkleRoot == nil {
				m.ShardsMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardIndex", wireType)
			}
			m.ShardIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationPointIndex", wireType)
			}
			m.EvaluationPointIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EvaluationPointIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
