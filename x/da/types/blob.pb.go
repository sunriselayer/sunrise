// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/da/v1/blob.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BlobDeclaration
type BlobDeclaration struct {
	Sender      string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// Poseidon
	ShardsMerkleRoot         []byte      `protobuf:"bytes,3,opt,name=shards_merkle_root,json=shardsMerkleRoot,proto3" json:"shards_merkle_root,omitempty"`
	ShardCount               uint32      `protobuf:"varint,4,opt,name=shard_count,json=shardCount,proto3" json:"shard_count,omitempty"`
	KzgCommitmentsMerkleRoot []byte      `protobuf:"bytes,5,opt,name=kzg_commitments_merkle_root,json=kzgCommitmentsMerkleRoot,proto3" json:"kzg_commitments_merkle_root,omitempty"`
	BundlerReward            *types.Coin `protobuf:"bytes,6,opt,name=bundler_reward,json=bundlerReward,proto3" json:"bundler_reward,omitempty"`
	Expiry                   time.Time   `protobuf:"bytes,7,opt,name=expiry,proto3,stdtime" json:"expiry"`
}

func (m *BlobDeclaration) Reset()         { *m = BlobDeclaration{} }
func (m *BlobDeclaration) String() string { return proto.CompactTextString(m) }
func (*BlobDeclaration) ProtoMessage()    {}
func (*BlobDeclaration) Descriptor() ([]byte, []int) {
	return fileDescriptor_b381009697d0db2a, []int{0}
}
func (m *BlobDeclaration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlobDeclaration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlobDeclaration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlobDeclaration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlobDeclaration.Merge(m, src)
}
func (m *BlobDeclaration) XXX_Size() int {
	return m.Size()
}
func (m *BlobDeclaration) XXX_DiscardUnknown() {
	xxx_messageInfo_BlobDeclaration.DiscardUnknown(m)
}

var xxx_messageInfo_BlobDeclaration proto.InternalMessageInfo

func (m *BlobDeclaration) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *BlobDeclaration) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *BlobDeclaration) GetShardsMerkleRoot() []byte {
	if m != nil {
		return m.ShardsMerkleRoot
	}
	return nil
}

func (m *BlobDeclaration) GetShardCount() uint32 {
	if m != nil {
		return m.ShardCount
	}
	return 0
}

func (m *BlobDeclaration) GetKzgCommitmentsMerkleRoot() []byte {
	if m != nil {
		return m.KzgCommitmentsMerkleRoot
	}
	return nil
}

func (m *BlobDeclaration) GetBundlerReward() *types.Coin {
	if m != nil {
		return m.BundlerReward
	}
	return nil
}

func (m *BlobDeclaration) GetExpiry() time.Time {
	if m != nil {
		return m.Expiry
	}
	return time.Time{}
}

// Directly included in block as Tx
type Blob struct {
	ShardsMerkleRoot         []byte `protobuf:"bytes,1,opt,name=shards_merkle_root,json=shardsMerkleRoot,proto3" json:"shards_merkle_root,omitempty"`
	ShardCount               uint32 `protobuf:"varint,2,opt,name=shard_count,json=shardCount,proto3" json:"shard_count,omitempty"`
	KzgCommitmentsMerkleRoot []byte `protobuf:"bytes,3,opt,name=kzg_commitments_merkle_root,json=kzgCommitmentsMerkleRoot,proto3" json:"kzg_commitments_merkle_root,omitempty"`
}

func (m *Blob) Reset()         { *m = Blob{} }
func (m *Blob) String() string { return proto.CompactTextString(m) }
func (*Blob) ProtoMessage()    {}
func (*Blob) Descriptor() ([]byte, []int) {
	return fileDescriptor_b381009697d0db2a, []int{1}
}
func (m *Blob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Blob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Blob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Blob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Blob.Merge(m, src)
}
func (m *Blob) XXX_Size() int {
	return m.Size()
}
func (m *Blob) XXX_DiscardUnknown() {
	xxx_messageInfo_Blob.DiscardUnknown(m)
}

var xxx_messageInfo_Blob proto.InternalMessageInfo

func (m *Blob) GetShardsMerkleRoot() []byte {
	if m != nil {
		return m.ShardsMerkleRoot
	}
	return nil
}

func (m *Blob) GetShardCount() uint32 {
	if m != nil {
		return m.ShardCount
	}
	return 0
}

func (m *Blob) GetKzgCommitmentsMerkleRoot() []byte {
	if m != nil {
		return m.KzgCommitmentsMerkleRoot
	}
	return nil
}

// BlobCommitment
type BlobCommitment struct {
	ShardsMerkleRoot         []byte    `protobuf:"bytes,1,opt,name=shards_merkle_root,json=shardsMerkleRoot,proto3" json:"shards_merkle_root,omitempty"`
	BlockHeight              int64     `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	ShardCount               uint32    `protobuf:"varint,3,opt,name=shard_count,json=shardCount,proto3" json:"shard_count,omitempty"`
	KzgCommitmentsMerkleRoot []byte    `protobuf:"bytes,4,opt,name=kzg_commitments_merkle_root,json=kzgCommitmentsMerkleRoot,proto3" json:"kzg_commitments_merkle_root,omitempty"`
	Expiry                   time.Time `protobuf:"bytes,5,opt,name=expiry,proto3,stdtime" json:"expiry"`
}

func (m *BlobCommitment) Reset()         { *m = BlobCommitment{} }
func (m *BlobCommitment) String() string { return proto.CompactTextString(m) }
func (*BlobCommitment) ProtoMessage()    {}
func (*BlobCommitment) Descriptor() ([]byte, []int) {
	return fileDescriptor_b381009697d0db2a, []int{2}
}
func (m *BlobCommitment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlobCommitment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlobCommitment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlobCommitment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlobCommitment.Merge(m, src)
}
func (m *BlobCommitment) XXX_Size() int {
	return m.Size()
}
func (m *BlobCommitment) XXX_DiscardUnknown() {
	xxx_messageInfo_BlobCommitment.DiscardUnknown(m)
}

var xxx_messageInfo_BlobCommitment proto.InternalMessageInfo

func (m *BlobCommitment) GetShardsMerkleRoot() []byte {
	if m != nil {
		return m.ShardsMerkleRoot
	}
	return nil
}

func (m *BlobCommitment) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *BlobCommitment) GetShardCount() uint32 {
	if m != nil {
		return m.ShardCount
	}
	return 0
}

func (m *BlobCommitment) GetKzgCommitmentsMerkleRoot() []byte {
	if m != nil {
		return m.KzgCommitmentsMerkleRoot
	}
	return nil
}

func (m *BlobCommitment) GetExpiry() time.Time {
	if m != nil {
		return m.Expiry
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*BlobDeclaration)(nil), "sunrise.da.v1.BlobDeclaration")
	proto.RegisterType((*Blob)(nil), "sunrise.da.v1.Blob")
	proto.RegisterType((*BlobCommitment)(nil), "sunrise.da.v1.BlobCommitment")
}

func init() { proto.RegisterFile("sunrise/da/v1/blob.proto", fileDescriptor_b381009697d0db2a) }

var fileDescriptor_b381009697d0db2a = []byte{
	// 490 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x31, 0x8f, 0xd3, 0x30,
	0x14, 0xae, 0xdb, 0x5e, 0x01, 0xf7, 0x7a, 0xa0, 0xe8, 0x86, 0x5c, 0x91, 0xd2, 0xd2, 0xa9, 0x42,
	0x60, 0x53, 0x58, 0x41, 0x82, 0xf6, 0x06, 0x16, 0x96, 0xc0, 0xc4, 0x12, 0xd9, 0x89, 0x49, 0xad,
	0x26, 0x79, 0x95, 0xed, 0x96, 0xeb, 0xfd, 0x8a, 0x1b, 0xf8, 0x29, 0xfc, 0x88, 0x1b, 0x4f, 0x4c,
	0x4c, 0x80, 0xda, 0xbf, 0xc0, 0x0e, 0x8a, 0xe3, 0xaa, 0x80, 0x04, 0x5c, 0xb7, 0xbc, 0xef, 0xfb,
	0xde, 0xb3, 0xdf, 0xf7, 0xc5, 0xd8, 0xd7, 0x8b, 0x42, 0x49, 0x2d, 0x68, 0xc2, 0xe8, 0x72, 0x44,
	0x79, 0x06, 0x9c, 0xcc, 0x15, 0x18, 0xf0, 0x3a, 0x8e, 0x21, 0x09, 0x23, 0xcb, 0x51, 0x37, 0x88,
	0x41, 0xe7, 0xa0, 0x29, 0x67, 0x5a, 0xd0, 0xe5, 0x88, 0x0b, 0xc3, 0x46, 0x34, 0x06, 0x59, 0x54,
	0xf2, 0xee, 0x49, 0xc5, 0x47, 0xb6, 0xa2, 0x55, 0xe1, 0xa8, 0xe3, 0x14, 0x52, 0xa8, 0xf0, 0xf2,
	0xcb, 0xa1, 0xbd, 0x14, 0x20, 0xcd, 0x04, 0xb5, 0x15, 0x5f, 0xbc, 0xa3, 0x46, 0xe6, 0x42, 0x1b,
	0x96, 0xcf, 0x2b, 0xc1, 0xe0, 0x7b, 0x1d, 0xdf, 0x1e, 0x67, 0xc0, 0x4f, 0x45, 0x9c, 0x31, 0xc5,
	0x8c, 0x84, 0xc2, 0x7b, 0x84, 0x5b, 0x5a, 0x14, 0x89, 0x50, 0x3e, 0xea, 0xa3, 0xe1, 0xad, 0xb1,
	0xff, 0xe9, 0xe3, 0xc3, 0x63, 0x77, 0xd8, 0x8b, 0x24, 0x51, 0x42, 0xeb, 0xd7, 0x46, 0xc9, 0x22,
	0x0d, 0x9d, 0xce, 0xbb, 0x87, 0x0f, 0x79, 0x06, 0xf1, 0x2c, 0x9a, 0x0a, 0x99, 0x4e, 0x8d, 0x5f,
	0xef, 0xa3, 0x61, 0x23, 0x6c, 0x5b, 0xec, 0xa5, 0x85, 0xbc, 0x07, 0xd8, 0xd3, 0x53, 0xa6, 0x12,
	0x1d, 0xe5, 0x42, 0xcd, 0x32, 0x11, 0x29, 0x00, 0xe3, 0x37, 0xfa, 0x68, 0x78, 0x18, 0xde, 0xa9,
	0x98, 0x57, 0x96, 0x08, 0x01, 0x8c, 0xd7, 0xc3, 0x6d, 0x8b, 0x45, 0x31, 0x2c, 0x0a, 0xe3, 0x37,
	0xfb, 0x68, 0xd8, 0x09, 0xb1, 0x85, 0x26, 0x25, 0xe2, 0x3d, 0xc3, 0x77, 0x67, 0xe7, 0x69, 0x14,
	0x43, 0x9e, 0x4b, 0x93, 0x8b, 0xc2, 0xfc, 0x3e, 0xf7, 0xc0, 0xce, 0xf5, 0x67, 0xe7, 0xe9, 0x64,
	0xa7, 0xf8, 0x65, 0xfe, 0x73, 0x7c, 0xc4, 0x17, 0x45, 0x92, 0x09, 0x15, 0x29, 0xf1, 0x9e, 0xa9,
	0xc4, 0x6f, 0xf5, 0xd1, 0xb0, 0xfd, 0xf8, 0x84, 0xb8, 0x3d, 0xcb, 0x04, 0x88, 0x4b, 0x80, 0x4c,
	0x40, 0x16, 0x61, 0xc7, 0x35, 0x84, 0x56, 0xef, 0x3d, 0xc5, 0x2d, 0x71, 0x36, 0x97, 0x6a, 0xe5,
	0xdf, 0xb0, 0x9d, 0x5d, 0x52, 0x59, 0x4d, 0xb6, 0x56, 0x93, 0x37, 0x5b, 0xab, 0xc7, 0x37, 0x2f,
	0xbf, 0xf4, 0x6a, 0x17, 0x5f, 0x7b, 0x28, 0x74, 0x3d, 0x83, 0x0f, 0x08, 0x37, 0x4b, 0xdb, 0xff,
	0x62, 0x0b, 0xba, 0x9e, 0x2d, 0xf5, 0x7d, 0x6d, 0x69, 0xfc, 0xdb, 0x96, 0xc1, 0x0f, 0x84, 0x8f,
	0xca, 0x6b, 0xed, 0xd8, 0x3d, 0x2f, 0x78, 0x8d, 0x1f, 0xe1, 0x8f, 0x1d, 0x1a, 0xfb, 0xee, 0xd0,
	0xfc, 0x4f, 0xb4, 0xbb, 0x60, 0x0e, 0xf6, 0x0f, 0x66, 0x7c, 0x7a, 0xb9, 0x0e, 0xd0, 0xd5, 0x3a,
	0x40, 0xdf, 0xd6, 0x01, 0xba, 0xd8, 0x04, 0xb5, 0xab, 0x4d, 0x50, 0xfb, 0xbc, 0x09, 0x6a, 0x6f,
	0xef, 0xa7, 0xd2, 0x4c, 0x17, 0x9c, 0xc4, 0x90, 0x53, 0xf7, 0x6a, 0x33, 0xb6, 0x12, 0x6a, 0x5b,
	0xd0, 0xb3, 0xf2, 0x79, 0x9b, 0xd5, 0x5c, 0x68, 0xde, 0xb2, 0x67, 0x3d, 0xf9, 0x19, 0x00, 0x00,
	0xff, 0xff, 0x6e, 0x33, 0x18, 0x37, 0xf9, 0x03, 0x00, 0x00,
}

func (m *BlobDeclaration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlobDeclaration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobDeclaration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Expiry, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Expiry):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintBlob(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x3a
	if m.BundlerReward != nil {
		{
			size, err := m.BundlerReward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBlob(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.KzgCommitmentsMerkleRoot) > 0 {
		i -= len(m.KzgCommitmentsMerkleRoot)
		copy(dAtA[i:], m.KzgCommitmentsMerkleRoot)
		i = encodeVarintBlob(dAtA, i, uint64(len(m.KzgCommitmentsMerkleRoot)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ShardCount != 0 {
		i = encodeVarintBlob(dAtA, i, uint64(m.ShardCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ShardsMerkleRoot) > 0 {
		i -= len(m.ShardsMerkleRoot)
		copy(dAtA[i:], m.ShardsMerkleRoot)
		i = encodeVarintBlob(dAtA, i, uint64(len(m.ShardsMerkleRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintBlob(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintBlob(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Blob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Blob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Blob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KzgCommitmentsMerkleRoot) > 0 {
		i -= len(m.KzgCommitmentsMerkleRoot)
		copy(dAtA[i:], m.KzgCommitmentsMerkleRoot)
		i = encodeVarintBlob(dAtA, i, uint64(len(m.KzgCommitmentsMerkleRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ShardCount != 0 {
		i = encodeVarintBlob(dAtA, i, uint64(m.ShardCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ShardsMerkleRoot) > 0 {
		i -= len(m.ShardsMerkleRoot)
		copy(dAtA[i:], m.ShardsMerkleRoot)
		i = encodeVarintBlob(dAtA, i, uint64(len(m.ShardsMerkleRoot)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlobCommitment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlobCommitment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobCommitment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Expiry, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Expiry):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintBlob(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x2a
	if len(m.KzgCommitmentsMerkleRoot) > 0 {
		i -= len(m.KzgCommitmentsMerkleRoot)
		copy(dAtA[i:], m.KzgCommitmentsMerkleRoot)
		i = encodeVarintBlob(dAtA, i, uint64(len(m.KzgCommitmentsMerkleRoot)))
		i--
		dAtA[i] = 0x22
	}
	if m.ShardCount != 0 {
		i = encodeVarintBlob(dAtA, i, uint64(m.ShardCount))
		i--
		dAtA[i] = 0x18
	}
	if m.BlockHeight != 0 {
		i = encodeVarintBlob(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ShardsMerkleRoot) > 0 {
		i -= len(m.ShardsMerkleRoot)
		copy(dAtA[i:], m.ShardsMerkleRoot)
		i = encodeVarintBlob(dAtA, i, uint64(len(m.ShardsMerkleRoot)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBlob(dAtA []byte, offset int, v uint64) int {
	offset -= sovBlob(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BlobDeclaration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovBlob(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovBlob(uint64(m.BlockHeight))
	}
	l = len(m.ShardsMerkleRoot)
	if l > 0 {
		n += 1 + l + sovBlob(uint64(l))
	}
	if m.ShardCount != 0 {
		n += 1 + sovBlob(uint64(m.ShardCount))
	}
	l = len(m.KzgCommitmentsMerkleRoot)
	if l > 0 {
		n += 1 + l + sovBlob(uint64(l))
	}
	if m.BundlerReward != nil {
		l = m.BundlerReward.Size()
		n += 1 + l + sovBlob(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Expiry)
	n += 1 + l + sovBlob(uint64(l))
	return n
}

func (m *Blob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShardsMerkleRoot)
	if l > 0 {
		n += 1 + l + sovBlob(uint64(l))
	}
	if m.ShardCount != 0 {
		n += 1 + sovBlob(uint64(m.ShardCount))
	}
	l = len(m.KzgCommitmentsMerkleRoot)
	if l > 0 {
		n += 1 + l + sovBlob(uint64(l))
	}
	return n
}

func (m *BlobCommitment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShardsMerkleRoot)
	if l > 0 {
		n += 1 + l + sovBlob(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovBlob(uint64(m.BlockHeight))
	}
	if m.ShardCount != 0 {
		n += 1 + sovBlob(uint64(m.ShardCount))
	}
	l = len(m.KzgCommitmentsMerkleRoot)
	if l > 0 {
		n += 1 + l + sovBlob(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Expiry)
	n += 1 + l + sovBlob(uint64(l))
	return n
}

func sovBlob(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBlob(x uint64) (n int) {
	return sovBlob(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BlobDeclaration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlobDeclaration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlobDeclaration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardsMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlob
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardsMerkleRoot = append(m.ShardsMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ShardsMerkleRoot == nil {
				m.ShardsMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardCount", wireType)
			}
			m.ShardCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KzgCommitmentsMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlob
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KzgCommitmentsMerkleRoot = append(m.KzgCommitmentsMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.KzgCommitmentsMerkleRoot == nil {
				m.KzgCommitmentsMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundlerReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlob
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BundlerReward == nil {
				m.BundlerReward = &types.Coin{}
			}
			if err := m.BundlerReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlob
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Expiry, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Blob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Blob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Blob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardsMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlob
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardsMerkleRoot = append(m.ShardsMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ShardsMerkleRoot == nil {
				m.ShardsMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardCount", wireType)
			}
			m.ShardCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KzgCommitmentsMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlob
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KzgCommitmentsMerkleRoot = append(m.KzgCommitmentsMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.KzgCommitmentsMerkleRoot == nil {
				m.KzgCommitmentsMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlobCommitment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlobCommitment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlobCommitment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardsMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlob
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardsMerkleRoot = append(m.ShardsMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ShardsMerkleRoot == nil {
				m.ShardsMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardCount", wireType)
			}
			m.ShardCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KzgCommitmentsMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlob
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KzgCommitmentsMerkleRoot = append(m.KzgCommitmentsMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.KzgCommitmentsMerkleRoot == nil {
				m.KzgCommitmentsMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlob
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Expiry, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlob(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlob
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlob
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlob
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBlob
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBlob
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBlob
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBlob        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlob          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBlob = fmt.Errorf("proto: unexpected end of group")
)
