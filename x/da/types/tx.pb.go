// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/da/v0/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a6904dbb1bda07, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a6904dbb1bda07, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgPublishData
type MsgPublishData struct {
	Sender            string   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	MetadataUri       string   `protobuf:"bytes,2,opt,name=metadata_uri,json=metadataUri,proto3" json:"metadata_uri,omitempty"`
	ParityShardCount  uint64   `protobuf:"varint,3,opt,name=parity_shard_count,json=parityShardCount,proto3" json:"parity_shard_count,omitempty"`
	ShardDoubleHashes [][]byte `protobuf:"bytes,4,rep,name=shard_double_hashes,json=shardDoubleHashes,proto3" json:"shard_double_hashes,omitempty"`
	DataSourceInfo    string   `protobuf:"bytes,5,opt,name=data_source_info,json=dataSourceInfo,proto3" json:"data_source_info,omitempty"`
}

func (m *MsgPublishData) Reset()         { *m = MsgPublishData{} }
func (m *MsgPublishData) String() string { return proto.CompactTextString(m) }
func (*MsgPublishData) ProtoMessage()    {}
func (*MsgPublishData) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a6904dbb1bda07, []int{2}
}
func (m *MsgPublishData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPublishData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPublishData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPublishData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPublishData.Merge(m, src)
}
func (m *MsgPublishData) XXX_Size() int {
	return m.Size()
}
func (m *MsgPublishData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPublishData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPublishData proto.InternalMessageInfo

func (m *MsgPublishData) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgPublishData) GetMetadataUri() string {
	if m != nil {
		return m.MetadataUri
	}
	return ""
}

func (m *MsgPublishData) GetParityShardCount() uint64 {
	if m != nil {
		return m.ParityShardCount
	}
	return 0
}

func (m *MsgPublishData) GetShardDoubleHashes() [][]byte {
	if m != nil {
		return m.ShardDoubleHashes
	}
	return nil
}

func (m *MsgPublishData) GetDataSourceInfo() string {
	if m != nil {
		return m.DataSourceInfo
	}
	return ""
}

// MsgPublishDataResponse
type MsgPublishDataResponse struct {
}

func (m *MsgPublishDataResponse) Reset()         { *m = MsgPublishDataResponse{} }
func (m *MsgPublishDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPublishDataResponse) ProtoMessage()    {}
func (*MsgPublishDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a6904dbb1bda07, []int{3}
}
func (m *MsgPublishDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPublishDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPublishDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPublishDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPublishDataResponse.Merge(m, src)
}
func (m *MsgPublishDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPublishDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPublishDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPublishDataResponse proto.InternalMessageInfo

// MsgSubmitInvalidity
type MsgSubmitInvalidity struct {
	Sender      string  `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	MetadataUri string  `protobuf:"bytes,2,opt,name=metadata_uri,json=metadataUri,proto3" json:"metadata_uri,omitempty"`
	Indices     []int64 `protobuf:"varint,3,rep,packed,name=indices,proto3" json:"indices,omitempty"`
}

func (m *MsgSubmitInvalidity) Reset()         { *m = MsgSubmitInvalidity{} }
func (m *MsgSubmitInvalidity) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitInvalidity) ProtoMessage()    {}
func (*MsgSubmitInvalidity) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a6904dbb1bda07, []int{4}
}
func (m *MsgSubmitInvalidity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitInvalidity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitInvalidity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitInvalidity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitInvalidity.Merge(m, src)
}
func (m *MsgSubmitInvalidity) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitInvalidity) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitInvalidity.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitInvalidity proto.InternalMessageInfo

func (m *MsgSubmitInvalidity) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSubmitInvalidity) GetMetadataUri() string {
	if m != nil {
		return m.MetadataUri
	}
	return ""
}

func (m *MsgSubmitInvalidity) GetIndices() []int64 {
	if m != nil {
		return m.Indices
	}
	return nil
}

// MsgSubmitInvalidityResponse
type MsgSubmitInvalidityResponse struct {
}

func (m *MsgSubmitInvalidityResponse) Reset()         { *m = MsgSubmitInvalidityResponse{} }
func (m *MsgSubmitInvalidityResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitInvalidityResponse) ProtoMessage()    {}
func (*MsgSubmitInvalidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a6904dbb1bda07, []int{5}
}
func (m *MsgSubmitInvalidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitInvalidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitInvalidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitInvalidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitInvalidityResponse.Merge(m, src)
}
func (m *MsgSubmitInvalidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitInvalidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitInvalidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitInvalidityResponse proto.InternalMessageInfo

// MsgSubmitValidityProof
type MsgSubmitValidityProof struct {
	Sender           string   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ValidatorAddress string   `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	MetadataUri      string   `protobuf:"bytes,3,opt,name=metadata_uri,json=metadataUri,proto3" json:"metadata_uri,omitempty"`
	Indices          []int64  `protobuf:"varint,4,rep,packed,name=indices,proto3" json:"indices,omitempty"`
	Proofs           [][]byte `protobuf:"bytes,5,rep,name=proofs,proto3" json:"proofs,omitempty"`
}

func (m *MsgSubmitValidityProof) Reset()         { *m = MsgSubmitValidityProof{} }
func (m *MsgSubmitValidityProof) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitValidityProof) ProtoMessage()    {}
func (*MsgSubmitValidityProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a6904dbb1bda07, []int{6}
}
func (m *MsgSubmitValidityProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitValidityProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitValidityProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitValidityProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitValidityProof.Merge(m, src)
}
func (m *MsgSubmitValidityProof) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitValidityProof) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitValidityProof.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitValidityProof proto.InternalMessageInfo

func (m *MsgSubmitValidityProof) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSubmitValidityProof) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *MsgSubmitValidityProof) GetMetadataUri() string {
	if m != nil {
		return m.MetadataUri
	}
	return ""
}

func (m *MsgSubmitValidityProof) GetIndices() []int64 {
	if m != nil {
		return m.Indices
	}
	return nil
}

func (m *MsgSubmitValidityProof) GetProofs() [][]byte {
	if m != nil {
		return m.Proofs
	}
	return nil
}

// MsgSubmitValidityProofResponse
type MsgSubmitValidityProofResponse struct {
}

func (m *MsgSubmitValidityProofResponse) Reset()         { *m = MsgSubmitValidityProofResponse{} }
func (m *MsgSubmitValidityProofResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitValidityProofResponse) ProtoMessage()    {}
func (*MsgSubmitValidityProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a6904dbb1bda07, []int{7}
}
func (m *MsgSubmitValidityProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitValidityProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitValidityProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitValidityProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitValidityProofResponse.Merge(m, src)
}
func (m *MsgSubmitValidityProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitValidityProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitValidityProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitValidityProofResponse proto.InternalMessageInfo

// MsgRegisterProofDeputy
type MsgRegisterProofDeputy struct {
	Sender        string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	DeputyAddress string `protobuf:"bytes,2,opt,name=deputy_address,json=deputyAddress,proto3" json:"deputy_address,omitempty"`
}

func (m *MsgRegisterProofDeputy) Reset()         { *m = MsgRegisterProofDeputy{} }
func (m *MsgRegisterProofDeputy) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterProofDeputy) ProtoMessage()    {}
func (*MsgRegisterProofDeputy) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a6904dbb1bda07, []int{8}
}
func (m *MsgRegisterProofDeputy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterProofDeputy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterProofDeputy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterProofDeputy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterProofDeputy.Merge(m, src)
}
func (m *MsgRegisterProofDeputy) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterProofDeputy) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterProofDeputy.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterProofDeputy proto.InternalMessageInfo

func (m *MsgRegisterProofDeputy) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgRegisterProofDeputy) GetDeputyAddress() string {
	if m != nil {
		return m.DeputyAddress
	}
	return ""
}

// MsgRegisterProofDeputyResponse
type MsgRegisterProofDeputyResponse struct {
}

func (m *MsgRegisterProofDeputyResponse) Reset()         { *m = MsgRegisterProofDeputyResponse{} }
func (m *MsgRegisterProofDeputyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterProofDeputyResponse) ProtoMessage()    {}
func (*MsgRegisterProofDeputyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a6904dbb1bda07, []int{9}
}
func (m *MsgRegisterProofDeputyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterProofDeputyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterProofDeputyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterProofDeputyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterProofDeputyResponse.Merge(m, src)
}
func (m *MsgRegisterProofDeputyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterProofDeputyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterProofDeputyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterProofDeputyResponse proto.InternalMessageInfo

// MsgUnregisterProofDeputy
type MsgUnregisterProofDeputy struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgUnregisterProofDeputy) Reset()         { *m = MsgUnregisterProofDeputy{} }
func (m *MsgUnregisterProofDeputy) String() string { return proto.CompactTextString(m) }
func (*MsgUnregisterProofDeputy) ProtoMessage()    {}
func (*MsgUnregisterProofDeputy) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a6904dbb1bda07, []int{10}
}
func (m *MsgUnregisterProofDeputy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnregisterProofDeputy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnregisterProofDeputy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnregisterProofDeputy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnregisterProofDeputy.Merge(m, src)
}
func (m *MsgUnregisterProofDeputy) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnregisterProofDeputy) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnregisterProofDeputy.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnregisterProofDeputy proto.InternalMessageInfo

func (m *MsgUnregisterProofDeputy) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgUnregisterProofDeputyResponse
type MsgUnregisterProofDeputyResponse struct {
}

func (m *MsgUnregisterProofDeputyResponse) Reset()         { *m = MsgUnregisterProofDeputyResponse{} }
func (m *MsgUnregisterProofDeputyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnregisterProofDeputyResponse) ProtoMessage()    {}
func (*MsgUnregisterProofDeputyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a6904dbb1bda07, []int{11}
}
func (m *MsgUnregisterProofDeputyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnregisterProofDeputyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnregisterProofDeputyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnregisterProofDeputyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnregisterProofDeputyResponse.Merge(m, src)
}
func (m *MsgUnregisterProofDeputyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnregisterProofDeputyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnregisterProofDeputyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnregisterProofDeputyResponse proto.InternalMessageInfo

// MsgVerifyData defines the message to trigger the data verification process.
type MsgVerifyData struct {
	// sender is the address of the account that triggers the process.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgVerifyData) Reset()         { *m = MsgVerifyData{} }
func (m *MsgVerifyData) String() string { return proto.CompactTextString(m) }
func (*MsgVerifyData) ProtoMessage()    {}
func (*MsgVerifyData) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a6904dbb1bda07, []int{12}
}
func (m *MsgVerifyData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVerifyData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVerifyData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVerifyData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVerifyData.Merge(m, src)
}
func (m *MsgVerifyData) XXX_Size() int {
	return m.Size()
}
func (m *MsgVerifyData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVerifyData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVerifyData proto.InternalMessageInfo

func (m *MsgVerifyData) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgVerifyDataResponse defines the response for MsgVerifyData.
type MsgVerifyDataResponse struct {
}

func (m *MsgVerifyDataResponse) Reset()         { *m = MsgVerifyDataResponse{} }
func (m *MsgVerifyDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVerifyDataResponse) ProtoMessage()    {}
func (*MsgVerifyDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a6904dbb1bda07, []int{13}
}
func (m *MsgVerifyDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVerifyDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVerifyDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVerifyDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVerifyDataResponse.Merge(m, src)
}
func (m *MsgVerifyDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVerifyDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVerifyDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVerifyDataResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "sunrise.da.v0.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "sunrise.da.v0.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgPublishData)(nil), "sunrise.da.v0.MsgPublishData")
	proto.RegisterType((*MsgPublishDataResponse)(nil), "sunrise.da.v0.MsgPublishDataResponse")
	proto.RegisterType((*MsgSubmitInvalidity)(nil), "sunrise.da.v0.MsgSubmitInvalidity")
	proto.RegisterType((*MsgSubmitInvalidityResponse)(nil), "sunrise.da.v0.MsgSubmitInvalidityResponse")
	proto.RegisterType((*MsgSubmitValidityProof)(nil), "sunrise.da.v0.MsgSubmitValidityProof")
	proto.RegisterType((*MsgSubmitValidityProofResponse)(nil), "sunrise.da.v0.MsgSubmitValidityProofResponse")
	proto.RegisterType((*MsgRegisterProofDeputy)(nil), "sunrise.da.v0.MsgRegisterProofDeputy")
	proto.RegisterType((*MsgRegisterProofDeputyResponse)(nil), "sunrise.da.v0.MsgRegisterProofDeputyResponse")
	proto.RegisterType((*MsgUnregisterProofDeputy)(nil), "sunrise.da.v0.MsgUnregisterProofDeputy")
	proto.RegisterType((*MsgUnregisterProofDeputyResponse)(nil), "sunrise.da.v0.MsgUnregisterProofDeputyResponse")
	proto.RegisterType((*MsgVerifyData)(nil), "sunrise.da.v0.MsgVerifyData")
	proto.RegisterType((*MsgVerifyDataResponse)(nil), "sunrise.da.v0.MsgVerifyDataResponse")
}

func init() { proto.RegisterFile("sunrise/da/v0/tx.proto", fileDescriptor_43a6904dbb1bda07) }

var fileDescriptor_43a6904dbb1bda07 = []byte{
	// 852 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcf, 0x6f, 0xe3, 0x44,
	0x18, 0x8d, 0x9b, 0x26, 0x28, 0xd3, 0x1f, 0xa4, 0xee, 0xa6, 0xf5, 0x7a, 0xa9, 0xf1, 0x5a, 0x74,
	0x89, 0x02, 0xb1, 0xc3, 0x22, 0x21, 0x94, 0x0b, 0x22, 0xe4, 0xc0, 0x1e, 0x82, 0x22, 0x47, 0x9b,
	0x03, 0x97, 0x68, 0x12, 0x4f, 0x1c, 0x8b, 0xc4, 0x63, 0x66, 0xec, 0x68, 0x73, 0x41, 0x88, 0x23,
	0x27, 0x2e, 0x9c, 0xb9, 0x72, 0x2c, 0xa8, 0x37, 0xf8, 0x03, 0x7a, 0xac, 0x7a, 0xe2, 0x84, 0x50,
	0x7b, 0xe8, 0xbf, 0x81, 0x3c, 0x76, 0x1c, 0xdb, 0x71, 0xd3, 0xaa, 0x82, 0x4b, 0xdb, 0xf9, 0xde,
	0x9b, 0xef, 0x7b, 0xef, 0x79, 0x3c, 0x35, 0x38, 0xa2, 0x9e, 0x4d, 0x2c, 0x8a, 0x34, 0x03, 0x6a,
	0xf3, 0x86, 0xe6, 0xbe, 0x51, 0x1d, 0x82, 0x5d, 0xcc, 0xef, 0x85, 0x75, 0xd5, 0x80, 0xea, 0xbc,
	0x21, 0x1e, 0xc0, 0x99, 0x65, 0x63, 0x8d, 0xfd, 0x0c, 0x18, 0xe2, 0xf1, 0x08, 0xd3, 0x19, 0xa6,
	0xda, 0x8c, 0x9a, 0xda, 0xfc, 0x23, 0xff, 0x57, 0x08, 0x3c, 0x0d, 0x80, 0x01, 0x5b, 0x69, 0xc1,
	0x22, 0x84, 0x9e, 0x98, 0xd8, 0xc4, 0x41, 0xdd, 0xff, 0x2b, 0xac, 0x8a, 0x49, 0x0d, 0x0e, 0x24,
	0x70, 0x16, 0xee, 0x50, 0x7e, 0xe7, 0xc0, 0xdb, 0x1d, 0x6a, 0xbe, 0x76, 0x0c, 0xe8, 0xa2, 0x2e,
	0x43, 0xf8, 0x4f, 0x40, 0x09, 0x7a, 0xee, 0x04, 0x13, 0xcb, 0x5d, 0x08, 0x9c, 0xcc, 0x55, 0x4b,
	0x2d, 0xe1, 0xea, 0xbc, 0xfe, 0x24, 0x1c, 0xf5, 0xb9, 0x61, 0x10, 0x44, 0x69, 0xcf, 0x25, 0x96,
	0x6d, 0xea, 0x2b, 0x2a, 0xff, 0x29, 0x28, 0x06, 0xbd, 0x85, 0x2d, 0x99, 0xab, 0xee, 0xbc, 0xac,
	0xa8, 0x09, 0x93, 0x6a, 0xd0, 0xbe, 0x55, 0xba, 0xf8, 0xfb, 0xdd, 0xdc, 0xaf, 0xb7, 0x67, 0x35,
	0x4e, 0x0f, 0xf9, 0xcd, 0xfa, 0x0f, 0xb7, 0x67, 0xb5, 0x55, 0xa7, 0x1f, 0x6f, 0xcf, 0x6a, 0x71,
	0xd1, 0x29, 0x81, 0xca, 0x53, 0x70, 0x9c, 0x2a, 0xe9, 0x88, 0x3a, 0xd8, 0xa6, 0x48, 0xf9, 0x79,
	0x0b, 0xec, 0x77, 0xa8, 0xd9, 0xf5, 0x86, 0x53, 0x8b, 0x4e, 0xda, 0xd0, 0x85, 0x7c, 0x03, 0x14,
	0x29, 0xb2, 0x0d, 0x44, 0xee, 0xf5, 0x12, 0xf2, 0xf8, 0xe7, 0x60, 0x77, 0x86, 0x5c, 0x68, 0x40,
	0x17, 0x0e, 0x3c, 0x62, 0x31, 0x3b, 0x25, 0x7d, 0x67, 0x59, 0x7b, 0x4d, 0x2c, 0xfe, 0x43, 0xc0,
	0x3b, 0xd0, 0xd7, 0x3a, 0xa0, 0x13, 0x48, 0x8c, 0xc1, 0x08, 0x7b, 0xb6, 0x2b, 0xe4, 0x65, 0xae,
	0xba, 0xad, 0x97, 0x03, 0xa4, 0xe7, 0x03, 0x5f, 0xf8, 0x75, 0x5e, 0x05, 0x87, 0x01, 0xcd, 0xc0,
	0xde, 0x70, 0x8a, 0x06, 0x13, 0x48, 0x27, 0x88, 0x0a, 0xdb, 0x72, 0xbe, 0xba, 0xab, 0x1f, 0x30,
	0xa8, 0xcd, 0x90, 0x2f, 0x19, 0xc0, 0x57, 0x41, 0x99, 0x0d, 0xa7, 0xd8, 0x23, 0x23, 0x34, 0xb0,
	0xec, 0x31, 0x16, 0x0a, 0x4c, 0xc4, 0xbe, 0x5f, 0xef, 0xb1, 0xf2, 0x2b, 0x7b, 0x8c, 0x9b, 0x2f,
	0xfc, 0xe4, 0x42, 0xdd, 0x7e, 0x6c, 0xd1, 0x79, 0x4b, 0x86, 0xa0, 0x08, 0xe0, 0x28, 0x59, 0x89,
	0x12, 0xfb, 0x8d, 0x03, 0x87, 0x1d, 0x6a, 0xf6, 0xbc, 0xe1, 0xcc, 0x72, 0x5f, 0xd9, 0x73, 0x38,
	0xb5, 0x0c, 0xff, 0x69, 0xfe, 0x2f, 0xb1, 0x09, 0xe0, 0x2d, 0xcb, 0x36, 0xac, 0x11, 0xa2, 0x42,
	0x5e, 0xce, 0x57, 0xf3, 0xfa, 0x72, 0xd9, 0xfc, 0x20, 0x65, 0xe4, 0x59, 0xcc, 0x48, 0x5a, 0x9b,
	0x72, 0x02, 0x9e, 0x65, 0x94, 0x23, 0x4b, 0xbf, 0x6c, 0x31, 0xb7, 0x01, 0xde, 0x0f, 0xd1, 0x2e,
	0xc1, 0x78, 0xfc, 0x08, 0x57, 0x5f, 0x81, 0x03, 0x36, 0x00, 0xba, 0x98, 0x0c, 0x60, 0x40, 0x09,
	0xac, 0xb5, 0x9e, 0x5f, 0x9d, 0xd7, 0x4f, 0xc2, 0xcd, 0xfd, 0x25, 0x27, 0xd9, 0xa5, 0x3c, 0x4f,
	0xd5, 0xd7, 0x52, 0xca, 0x6f, 0x4c, 0x69, 0x3b, 0x91, 0x12, 0x7f, 0x04, 0x8a, 0x8e, 0xef, 0x83,
	0x0a, 0x05, 0x76, 0x76, 0xc2, 0x55, 0x53, 0x4d, 0xa5, 0x27, 0xad, 0xa5, 0x97, 0x88, 0x41, 0x91,
	0x81, 0x94, 0x8d, 0x44, 0x19, 0xfe, 0xc1, 0xb1, 0x0c, 0x75, 0x64, 0x5a, 0xd4, 0x45, 0x84, 0x81,
	0x6d, 0xe4, 0x78, 0x8f, 0x3a, 0x19, 0x9f, 0x81, 0x7d, 0x83, 0xed, 0x4d, 0x05, 0x78, 0xf7, 0xce,
	0xbd, 0x80, 0x1f, 0x16, 0x37, 0xfa, 0xcb, 0x90, 0x18, 0xfa, 0xcb, 0x40, 0x22, 0x7f, 0xdf, 0x01,
	0xc1, 0xbf, 0x43, 0x6c, 0xf2, 0x5f, 0x18, 0x6c, 0x36, 0x52, 0xfa, 0xe4, 0x98, 0xbe, 0xcc, 0x19,
	0x8a, 0x02, 0xe4, 0xbb, 0xb0, 0x48, 0xe3, 0x04, 0xec, 0x75, 0xa8, 0xd9, 0x47, 0xc4, 0x1a, 0x2f,
	0x1e, 0x77, 0x95, 0x35, 0x4f, 0x53, 0xc2, 0x2a, 0x31, 0x61, 0xab, 0xc6, 0xca, 0x31, 0xa8, 0x24,
	0x0a, 0x4b, 0x09, 0x2f, 0xff, 0x2c, 0x80, 0x7c, 0x87, 0x9a, 0x7c, 0x1f, 0xec, 0x26, 0xfe, 0x47,
	0x48, 0xa9, 0xbb, 0x3d, 0x75, 0x1f, 0x8b, 0x2f, 0x36, 0xe3, 0xcb, 0xfe, 0x7c, 0x0f, 0xec, 0xc4,
	0xef, 0xea, 0x93, 0xf5, 0x6d, 0x31, 0x58, 0x3c, 0xdd, 0x08, 0x47, 0x4d, 0x87, 0xa0, 0xbc, 0x76,
	0x9d, 0x29, 0xeb, 0x5b, 0xd3, 0x1c, 0xb1, 0x76, 0x3f, 0x27, 0x9a, 0xf1, 0x0d, 0x38, 0xcc, 0xba,
	0x5f, 0x4e, 0xef, 0x6a, 0x91, 0xa0, 0x89, 0xf5, 0x07, 0xd1, 0xe2, 0xc3, 0xb2, 0x5e, 0xc4, 0x8c,
	0x61, 0x19, 0xb4, 0xac, 0x61, 0x1b, 0xde, 0x0c, 0xfe, 0x5b, 0x50, 0xc9, 0x7e, 0x2d, 0xde, 0xcf,
	0x78, 0xa6, 0x59, 0x44, 0x51, 0x7b, 0x20, 0x31, 0x1a, 0xd9, 0x05, 0x20, 0x76, 0xca, 0xdf, 0x59,
	0xdf, 0xbe, 0x42, 0xc5, 0xf7, 0x36, 0xa1, 0xcb, 0x8e, 0x62, 0xe1, 0x7b, 0xff, 0x03, 0xa3, 0xd5,
	0xbe, 0xb8, 0x96, 0xb8, 0xcb, 0x6b, 0x89, 0xfb, 0xe7, 0x5a, 0xe2, 0x7e, 0xba, 0x91, 0x72, 0x97,
	0x37, 0x52, 0xee, 0xaf, 0x1b, 0x29, 0xf7, 0x75, 0xcd, 0xb4, 0xdc, 0x89, 0x37, 0x54, 0x47, 0x78,
	0xa6, 0x85, 0x0d, 0xa7, 0x70, 0x81, 0xc8, 0x72, 0xa1, 0xbd, 0xf1, 0xbf, 0x3c, 0xdc, 0x85, 0x83,
	0xe8, 0xb0, 0xc8, 0xbe, 0x95, 0x3e, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x57, 0x69, 0xcb,
	0xcd, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// PublishData
	PublishData(ctx context.Context, in *MsgPublishData, opts ...grpc.CallOption) (*MsgPublishDataResponse, error)
	// SubmitInvalidity
	SubmitInvalidity(ctx context.Context, in *MsgSubmitInvalidity, opts ...grpc.CallOption) (*MsgSubmitInvalidityResponse, error)
	// SubmitValidityProof
	SubmitValidityProof(ctx context.Context, in *MsgSubmitValidityProof, opts ...grpc.CallOption) (*MsgSubmitValidityProofResponse, error)
	// RegisterProofDeputy
	RegisterProofDeputy(ctx context.Context, in *MsgRegisterProofDeputy, opts ...grpc.CallOption) (*MsgRegisterProofDeputyResponse, error)
	// UnregisterProofDeputy
	UnregisterProofDeputy(ctx context.Context, in *MsgUnregisterProofDeputy, opts ...grpc.CallOption) (*MsgUnregisterProofDeputyResponse, error)
	// VerifyData triggers the verification and lifecycle management of DA data,
	// which was previously handled in the EndBlocker. This can be called by anyone.
	VerifyData(ctx context.Context, in *MsgVerifyData, opts ...grpc.CallOption) (*MsgVerifyDataResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/sunrise.da.v0.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PublishData(ctx context.Context, in *MsgPublishData, opts ...grpc.CallOption) (*MsgPublishDataResponse, error) {
	out := new(MsgPublishDataResponse)
	err := c.cc.Invoke(ctx, "/sunrise.da.v0.Msg/PublishData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitInvalidity(ctx context.Context, in *MsgSubmitInvalidity, opts ...grpc.CallOption) (*MsgSubmitInvalidityResponse, error) {
	out := new(MsgSubmitInvalidityResponse)
	err := c.cc.Invoke(ctx, "/sunrise.da.v0.Msg/SubmitInvalidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitValidityProof(ctx context.Context, in *MsgSubmitValidityProof, opts ...grpc.CallOption) (*MsgSubmitValidityProofResponse, error) {
	out := new(MsgSubmitValidityProofResponse)
	err := c.cc.Invoke(ctx, "/sunrise.da.v0.Msg/SubmitValidityProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterProofDeputy(ctx context.Context, in *MsgRegisterProofDeputy, opts ...grpc.CallOption) (*MsgRegisterProofDeputyResponse, error) {
	out := new(MsgRegisterProofDeputyResponse)
	err := c.cc.Invoke(ctx, "/sunrise.da.v0.Msg/RegisterProofDeputy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnregisterProofDeputy(ctx context.Context, in *MsgUnregisterProofDeputy, opts ...grpc.CallOption) (*MsgUnregisterProofDeputyResponse, error) {
	out := new(MsgUnregisterProofDeputyResponse)
	err := c.cc.Invoke(ctx, "/sunrise.da.v0.Msg/UnregisterProofDeputy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VerifyData(ctx context.Context, in *MsgVerifyData, opts ...grpc.CallOption) (*MsgVerifyDataResponse, error) {
	out := new(MsgVerifyDataResponse)
	err := c.cc.Invoke(ctx, "/sunrise.da.v0.Msg/VerifyData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// PublishData
	PublishData(context.Context, *MsgPublishData) (*MsgPublishDataResponse, error)
	// SubmitInvalidity
	SubmitInvalidity(context.Context, *MsgSubmitInvalidity) (*MsgSubmitInvalidityResponse, error)
	// SubmitValidityProof
	SubmitValidityProof(context.Context, *MsgSubmitValidityProof) (*MsgSubmitValidityProofResponse, error)
	// RegisterProofDeputy
	RegisterProofDeputy(context.Context, *MsgRegisterProofDeputy) (*MsgRegisterProofDeputyResponse, error)
	// UnregisterProofDeputy
	UnregisterProofDeputy(context.Context, *MsgUnregisterProofDeputy) (*MsgUnregisterProofDeputyResponse, error)
	// VerifyData triggers the verification and lifecycle management of DA data,
	// which was previously handled in the EndBlocker. This can be called by anyone.
	VerifyData(context.Context, *MsgVerifyData) (*MsgVerifyDataResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) PublishData(ctx context.Context, req *MsgPublishData) (*MsgPublishDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishData not implemented")
}
func (*UnimplementedMsgServer) SubmitInvalidity(ctx context.Context, req *MsgSubmitInvalidity) (*MsgSubmitInvalidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitInvalidity not implemented")
}
func (*UnimplementedMsgServer) SubmitValidityProof(ctx context.Context, req *MsgSubmitValidityProof) (*MsgSubmitValidityProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitValidityProof not implemented")
}
func (*UnimplementedMsgServer) RegisterProofDeputy(ctx context.Context, req *MsgRegisterProofDeputy) (*MsgRegisterProofDeputyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProofDeputy not implemented")
}
func (*UnimplementedMsgServer) UnregisterProofDeputy(ctx context.Context, req *MsgUnregisterProofDeputy) (*MsgUnregisterProofDeputyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterProofDeputy not implemented")
}
func (*UnimplementedMsgServer) VerifyData(ctx context.Context, req *MsgVerifyData) (*MsgVerifyDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyData not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.da.v0.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PublishData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPublishData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PublishData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.da.v0.Msg/PublishData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PublishData(ctx, req.(*MsgPublishData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitInvalidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitInvalidity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitInvalidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.da.v0.Msg/SubmitInvalidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitInvalidity(ctx, req.(*MsgSubmitInvalidity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitValidityProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitValidityProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitValidityProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.da.v0.Msg/SubmitValidityProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitValidityProof(ctx, req.(*MsgSubmitValidityProof))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterProofDeputy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterProofDeputy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterProofDeputy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.da.v0.Msg/RegisterProofDeputy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterProofDeputy(ctx, req.(*MsgRegisterProofDeputy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnregisterProofDeputy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnregisterProofDeputy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnregisterProofDeputy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.da.v0.Msg/UnregisterProofDeputy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnregisterProofDeputy(ctx, req.(*MsgUnregisterProofDeputy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VerifyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVerifyData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VerifyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.da.v0.Msg/VerifyData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VerifyData(ctx, req.(*MsgVerifyData))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sunrise.da.v0.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "PublishData",
			Handler:    _Msg_PublishData_Handler,
		},
		{
			MethodName: "SubmitInvalidity",
			Handler:    _Msg_SubmitInvalidity_Handler,
		},
		{
			MethodName: "SubmitValidityProof",
			Handler:    _Msg_SubmitValidityProof_Handler,
		},
		{
			MethodName: "RegisterProofDeputy",
			Handler:    _Msg_RegisterProofDeputy_Handler,
		},
		{
			MethodName: "UnregisterProofDeputy",
			Handler:    _Msg_UnregisterProofDeputy_Handler,
		},
		{
			MethodName: "VerifyData",
			Handler:    _Msg_VerifyData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sunrise/da/v0/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPublishData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPublishData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPublishData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataSourceInfo) > 0 {
		i -= len(m.DataSourceInfo)
		copy(dAtA[i:], m.DataSourceInfo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DataSourceInfo)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ShardDoubleHashes) > 0 {
		for iNdEx := len(m.ShardDoubleHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ShardDoubleHashes[iNdEx])
			copy(dAtA[i:], m.ShardDoubleHashes[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ShardDoubleHashes[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ParityShardCount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ParityShardCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MetadataUri) > 0 {
		i -= len(m.MetadataUri)
		copy(dAtA[i:], m.MetadataUri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MetadataUri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPublishDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPublishDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPublishDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitInvalidity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitInvalidity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitInvalidity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Indices) > 0 {
		dAtA3 := make([]byte, len(m.Indices)*10)
		var j2 int
		for _, num1 := range m.Indices {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintTx(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MetadataUri) > 0 {
		i -= len(m.MetadataUri)
		copy(dAtA[i:], m.MetadataUri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MetadataUri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitInvalidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitInvalidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitInvalidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitValidityProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitValidityProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitValidityProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proofs) > 0 {
		for iNdEx := len(m.Proofs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Proofs[iNdEx])
			copy(dAtA[i:], m.Proofs[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Proofs[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Indices) > 0 {
		dAtA5 := make([]byte, len(m.Indices)*10)
		var j4 int
		for _, num1 := range m.Indices {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintTx(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MetadataUri) > 0 {
		i -= len(m.MetadataUri)
		copy(dAtA[i:], m.MetadataUri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MetadataUri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitValidityProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitValidityProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitValidityProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterProofDeputy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterProofDeputy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterProofDeputy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeputyAddress) > 0 {
		i -= len(m.DeputyAddress)
		copy(dAtA[i:], m.DeputyAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DeputyAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterProofDeputyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterProofDeputyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterProofDeputyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnregisterProofDeputy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnregisterProofDeputy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnregisterProofDeputy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnregisterProofDeputyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnregisterProofDeputyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnregisterProofDeputyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVerifyData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVerifyData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVerifyData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVerifyDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVerifyDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVerifyDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPublishData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MetadataUri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ParityShardCount != 0 {
		n += 1 + sovTx(uint64(m.ParityShardCount))
	}
	if len(m.ShardDoubleHashes) > 0 {
		for _, b := range m.ShardDoubleHashes {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.DataSourceInfo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPublishDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitInvalidity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MetadataUri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Indices) > 0 {
		l = 0
		for _, e := range m.Indices {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgSubmitInvalidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitValidityProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MetadataUri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Indices) > 0 {
		l = 0
		for _, e := range m.Indices {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if len(m.Proofs) > 0 {
		for _, b := range m.Proofs {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSubmitValidityProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterProofDeputy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DeputyAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterProofDeputyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnregisterProofDeputy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnregisterProofDeputyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVerifyData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgVerifyDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPublishData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPublishData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPublishData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParityShardCount", wireType)
			}
			m.ParityShardCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParityShardCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardDoubleHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardDoubleHashes = append(m.ShardDoubleHashes, make([]byte, postIndex-iNdEx))
			copy(m.ShardDoubleHashes[len(m.ShardDoubleHashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSourceInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSourceInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPublishDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPublishDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPublishDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitInvalidity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitInvalidity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitInvalidity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Indices = append(m.Indices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Indices) == 0 {
					m.Indices = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Indices = append(m.Indices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Indices", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitInvalidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitInvalidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitInvalidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitValidityProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitValidityProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitValidityProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Indices = append(m.Indices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Indices) == 0 {
					m.Indices = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Indices = append(m.Indices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Indices", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proofs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proofs = append(m.Proofs, make([]byte, postIndex-iNdEx))
			copy(m.Proofs[len(m.Proofs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitValidityProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitValidityProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitValidityProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterProofDeputy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterProofDeputy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterProofDeputy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeputyAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeputyAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterProofDeputyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterProofDeputyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterProofDeputyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnregisterProofDeputy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnregisterProofDeputy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnregisterProofDeputy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnregisterProofDeputyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnregisterProofDeputyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnregisterProofDeputyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVerifyData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVerifyData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVerifyData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVerifyDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVerifyDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVerifyDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
