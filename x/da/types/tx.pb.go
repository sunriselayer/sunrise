// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/da/v1/tx.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgDeclareBlob
type MsgDeclareBlob struct {
	Sender       string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	MetadataSize uint64 `protobuf:"varint,2,opt,name=metadata_size,json=metadataSize,proto3" json:"metadata_size,omitempty"`
	// Poseidon
	ShardsMerkleRoot []byte `protobuf:"bytes,3,opt,name=shards_merkle_root,json=shardsMerkleRoot,proto3" json:"shards_merkle_root,omitempty"`
	BlobSize         uint64 `protobuf:"varint,4,opt,name=blob_size,json=blobSize,proto3" json:"blob_size,omitempty"`
	// Poseidon
	KzgCommitmentsMerkleRoot []byte      `protobuf:"bytes,5,opt,name=kzg_commitments_merkle_root,json=kzgCommitmentsMerkleRoot,proto3" json:"kzg_commitments_merkle_root,omitempty"`
	BundlerReward            *types.Coin `protobuf:"bytes,6,opt,name=bundler_reward,json=bundlerReward,proto3" json:"bundler_reward,omitempty"`
}

func (m *MsgDeclareBlob) Reset()         { *m = MsgDeclareBlob{} }
func (m *MsgDeclareBlob) String() string { return proto.CompactTextString(m) }
func (*MsgDeclareBlob) ProtoMessage()    {}
func (*MsgDeclareBlob) Descriptor() ([]byte, []int) {
	return fileDescriptor_8776d5690e46d2ba, []int{0}
}
func (m *MsgDeclareBlob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeclareBlob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeclareBlob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeclareBlob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeclareBlob.Merge(m, src)
}
func (m *MsgDeclareBlob) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeclareBlob) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeclareBlob.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeclareBlob proto.InternalMessageInfo

func (m *MsgDeclareBlob) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgDeclareBlob) GetMetadataSize() uint64 {
	if m != nil {
		return m.MetadataSize
	}
	return 0
}

func (m *MsgDeclareBlob) GetShardsMerkleRoot() []byte {
	if m != nil {
		return m.ShardsMerkleRoot
	}
	return nil
}

func (m *MsgDeclareBlob) GetBlobSize() uint64 {
	if m != nil {
		return m.BlobSize
	}
	return 0
}

func (m *MsgDeclareBlob) GetKzgCommitmentsMerkleRoot() []byte {
	if m != nil {
		return m.KzgCommitmentsMerkleRoot
	}
	return nil
}

func (m *MsgDeclareBlob) GetBundlerReward() *types.Coin {
	if m != nil {
		return m.BundlerReward
	}
	return nil
}

// MsgDeclareBlobResponse
type MsgDeclareBlobResponse struct {
}

func (m *MsgDeclareBlobResponse) Reset()         { *m = MsgDeclareBlobResponse{} }
func (m *MsgDeclareBlobResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeclareBlobResponse) ProtoMessage()    {}
func (*MsgDeclareBlobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8776d5690e46d2ba, []int{1}
}
func (m *MsgDeclareBlobResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeclareBlobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeclareBlobResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeclareBlobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeclareBlobResponse.Merge(m, src)
}
func (m *MsgDeclareBlobResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeclareBlobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeclareBlobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeclareBlobResponse proto.InternalMessageInfo

// MsgBundleCommitments
type MsgBundleCommitments struct {
	Sender      string                   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Commitments []AvailabilityCommitment `protobuf:"bytes,2,rep,name=commitments,proto3" json:"commitments"`
	// Sign message is protobuf serialized AvailabilityCommitment
	// The signer is the validator's deputy
	Signatures [][]byte `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (m *MsgBundleCommitments) Reset()         { *m = MsgBundleCommitments{} }
func (m *MsgBundleCommitments) String() string { return proto.CompactTextString(m) }
func (*MsgBundleCommitments) ProtoMessage()    {}
func (*MsgBundleCommitments) Descriptor() ([]byte, []int) {
	return fileDescriptor_8776d5690e46d2ba, []int{2}
}
func (m *MsgBundleCommitments) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBundleCommitments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBundleCommitments.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBundleCommitments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBundleCommitments.Merge(m, src)
}
func (m *MsgBundleCommitments) XXX_Size() int {
	return m.Size()
}
func (m *MsgBundleCommitments) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBundleCommitments.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBundleCommitments proto.InternalMessageInfo

func (m *MsgBundleCommitments) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgBundleCommitments) GetCommitments() []AvailabilityCommitment {
	if m != nil {
		return m.Commitments
	}
	return nil
}

func (m *MsgBundleCommitments) GetSignatures() [][]byte {
	if m != nil {
		return m.Signatures
	}
	return nil
}

// MsgBundleCommitmentsResponse
type MsgBundleCommitmentsResponse struct {
}

func (m *MsgBundleCommitmentsResponse) Reset()         { *m = MsgBundleCommitmentsResponse{} }
func (m *MsgBundleCommitmentsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBundleCommitmentsResponse) ProtoMessage()    {}
func (*MsgBundleCommitmentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8776d5690e46d2ba, []int{3}
}
func (m *MsgBundleCommitmentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBundleCommitmentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBundleCommitmentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBundleCommitmentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBundleCommitmentsResponse.Merge(m, src)
}
func (m *MsgBundleCommitmentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBundleCommitmentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBundleCommitmentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBundleCommitmentsResponse proto.InternalMessageInfo

// AvailabilityCommitment
type AvailabilityCommitment struct {
	// Replay protection
	DeclarationHeight int64 `protobuf:"varint,1,opt,name=declaration_height,json=declarationHeight,proto3" json:"declaration_height,omitempty"`
	// Poseidon
	ShardsMerkleRoot    []byte              `protobuf:"bytes,2,opt,name=shards_merkle_root,json=shardsMerkleRoot,proto3" json:"shards_merkle_root,omitempty"`
	Validator           string              `protobuf:"bytes,3,opt,name=validator,proto3" json:"validator,omitempty"`
	IsValidDeclaration  bool                `protobuf:"varint,4,opt,name=is_valid_declaration,json=isValidDeclaration,proto3" json:"is_valid_declaration,omitempty"`
	ShardAvailabilities []ShardAvailability `protobuf:"bytes,5,rep,name=shard_availabilities,json=shardAvailabilities,proto3" json:"shard_availabilities"`
}

func (m *AvailabilityCommitment) Reset()         { *m = AvailabilityCommitment{} }
func (m *AvailabilityCommitment) String() string { return proto.CompactTextString(m) }
func (*AvailabilityCommitment) ProtoMessage()    {}
func (*AvailabilityCommitment) Descriptor() ([]byte, []int) {
	return fileDescriptor_8776d5690e46d2ba, []int{4}
}
func (m *AvailabilityCommitment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AvailabilityCommitment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AvailabilityCommitment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AvailabilityCommitment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvailabilityCommitment.Merge(m, src)
}
func (m *AvailabilityCommitment) XXX_Size() int {
	return m.Size()
}
func (m *AvailabilityCommitment) XXX_DiscardUnknown() {
	xxx_messageInfo_AvailabilityCommitment.DiscardUnknown(m)
}

var xxx_messageInfo_AvailabilityCommitment proto.InternalMessageInfo

func (m *AvailabilityCommitment) GetDeclarationHeight() int64 {
	if m != nil {
		return m.DeclarationHeight
	}
	return 0
}

func (m *AvailabilityCommitment) GetShardsMerkleRoot() []byte {
	if m != nil {
		return m.ShardsMerkleRoot
	}
	return nil
}

func (m *AvailabilityCommitment) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *AvailabilityCommitment) GetIsValidDeclaration() bool {
	if m != nil {
		return m.IsValidDeclaration
	}
	return false
}

func (m *AvailabilityCommitment) GetShardAvailabilities() []ShardAvailability {
	if m != nil {
		return m.ShardAvailabilities
	}
	return nil
}

// ShardAvailability
type ShardAvailability struct {
	Index        uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Availability bool   `protobuf:"varint,2,opt,name=availability,proto3" json:"availability,omitempty"`
}

func (m *ShardAvailability) Reset()         { *m = ShardAvailability{} }
func (m *ShardAvailability) String() string { return proto.CompactTextString(m) }
func (*ShardAvailability) ProtoMessage()    {}
func (*ShardAvailability) Descriptor() ([]byte, []int) {
	return fileDescriptor_8776d5690e46d2ba, []int{5}
}
func (m *ShardAvailability) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardAvailability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardAvailability.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardAvailability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardAvailability.Merge(m, src)
}
func (m *ShardAvailability) XXX_Size() int {
	return m.Size()
}
func (m *ShardAvailability) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardAvailability.DiscardUnknown(m)
}

var xxx_messageInfo_ShardAvailability proto.InternalMessageInfo

func (m *ShardAvailability) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ShardAvailability) GetAvailability() bool {
	if m != nil {
		return m.Availability
	}
	return false
}

// MsgChallengeUnavailability
type MsgChallengeUnavailability struct {
	Sender     string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Validator  string `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	ShardIndex uint32 `protobuf:"varint,3,opt,name=shard_index,json=shardIndex,proto3" json:"shard_index,omitempty"`
}

func (m *MsgChallengeUnavailability) Reset()         { *m = MsgChallengeUnavailability{} }
func (m *MsgChallengeUnavailability) String() string { return proto.CompactTextString(m) }
func (*MsgChallengeUnavailability) ProtoMessage()    {}
func (*MsgChallengeUnavailability) Descriptor() ([]byte, []int) {
	return fileDescriptor_8776d5690e46d2ba, []int{6}
}
func (m *MsgChallengeUnavailability) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChallengeUnavailability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChallengeUnavailability.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChallengeUnavailability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChallengeUnavailability.Merge(m, src)
}
func (m *MsgChallengeUnavailability) XXX_Size() int {
	return m.Size()
}
func (m *MsgChallengeUnavailability) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChallengeUnavailability.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChallengeUnavailability proto.InternalMessageInfo

func (m *MsgChallengeUnavailability) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgChallengeUnavailability) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *MsgChallengeUnavailability) GetShardIndex() uint32 {
	if m != nil {
		return m.ShardIndex
	}
	return 0
}

// MsgChallengeUnavailabilityResponse
type MsgChallengeUnavailabilityResponse struct {
}

func (m *MsgChallengeUnavailabilityResponse) Reset()         { *m = MsgChallengeUnavailabilityResponse{} }
func (m *MsgChallengeUnavailabilityResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChallengeUnavailabilityResponse) ProtoMessage()    {}
func (*MsgChallengeUnavailabilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8776d5690e46d2ba, []int{7}
}
func (m *MsgChallengeUnavailabilityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChallengeUnavailabilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChallengeUnavailabilityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChallengeUnavailabilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChallengeUnavailabilityResponse.Merge(m, src)
}
func (m *MsgChallengeUnavailabilityResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChallengeUnavailabilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChallengeUnavailabilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChallengeUnavailabilityResponse proto.InternalMessageInfo

// MsgRespondToChallenge
type MsgRespondToChallenge struct {
	Sender                  string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Validator               string `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	ChallengeId             uint64 `protobuf:"varint,3,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	KzgCommitment           []byte `protobuf:"bytes,4,opt,name=kzg_commitment,json=kzgCommitment,proto3" json:"kzg_commitment,omitempty"`
	KzgCommitmentMerklePath []byte `protobuf:"bytes,5,opt,name=kzg_commitment_merkle_path,json=kzgCommitmentMerklePath,proto3" json:"kzg_commitment_merkle_path,omitempty"`
	KzgOpeningProof         []byte `protobuf:"bytes,6,opt,name=kzg_opening_proof,json=kzgOpeningProof,proto3" json:"kzg_opening_proof,omitempty"`
}

func (m *MsgRespondToChallenge) Reset()         { *m = MsgRespondToChallenge{} }
func (m *MsgRespondToChallenge) String() string { return proto.CompactTextString(m) }
func (*MsgRespondToChallenge) ProtoMessage()    {}
func (*MsgRespondToChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_8776d5690e46d2ba, []int{8}
}
func (m *MsgRespondToChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRespondToChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRespondToChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRespondToChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRespondToChallenge.Merge(m, src)
}
func (m *MsgRespondToChallenge) XXX_Size() int {
	return m.Size()
}
func (m *MsgRespondToChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRespondToChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRespondToChallenge proto.InternalMessageInfo

func (m *MsgRespondToChallenge) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgRespondToChallenge) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *MsgRespondToChallenge) GetChallengeId() uint64 {
	if m != nil {
		return m.ChallengeId
	}
	return 0
}

func (m *MsgRespondToChallenge) GetKzgCommitment() []byte {
	if m != nil {
		return m.KzgCommitment
	}
	return nil
}

func (m *MsgRespondToChallenge) GetKzgCommitmentMerklePath() []byte {
	if m != nil {
		return m.KzgCommitmentMerklePath
	}
	return nil
}

func (m *MsgRespondToChallenge) GetKzgOpeningProof() []byte {
	if m != nil {
		return m.KzgOpeningProof
	}
	return nil
}

// MsgRespondToChallengeResponse
type MsgRespondToChallengeResponse struct {
}

func (m *MsgRespondToChallengeResponse) Reset()         { *m = MsgRespondToChallengeResponse{} }
func (m *MsgRespondToChallengeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRespondToChallengeResponse) ProtoMessage()    {}
func (*MsgRespondToChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8776d5690e46d2ba, []int{9}
}
func (m *MsgRespondToChallengeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRespondToChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRespondToChallengeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRespondToChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRespondToChallengeResponse.Merge(m, src)
}
func (m *MsgRespondToChallengeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRespondToChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRespondToChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRespondToChallengeResponse proto.InternalMessageInfo

// MsgRegisterDeputy
type MsgRegisterDeputy struct {
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	Deputy    string `protobuf:"bytes,2,opt,name=deputy,proto3" json:"deputy,omitempty"`
}

func (m *MsgRegisterDeputy) Reset()         { *m = MsgRegisterDeputy{} }
func (m *MsgRegisterDeputy) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterDeputy) ProtoMessage()    {}
func (*MsgRegisterDeputy) Descriptor() ([]byte, []int) {
	return fileDescriptor_8776d5690e46d2ba, []int{10}
}
func (m *MsgRegisterDeputy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterDeputy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterDeputy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterDeputy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterDeputy.Merge(m, src)
}
func (m *MsgRegisterDeputy) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterDeputy) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterDeputy.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterDeputy proto.InternalMessageInfo

func (m *MsgRegisterDeputy) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *MsgRegisterDeputy) GetDeputy() string {
	if m != nil {
		return m.Deputy
	}
	return ""
}

// MsgRegisterDeputyResponse
type MsgRegisterDeputyResponse struct {
}

func (m *MsgRegisterDeputyResponse) Reset()         { *m = MsgRegisterDeputyResponse{} }
func (m *MsgRegisterDeputyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterDeputyResponse) ProtoMessage()    {}
func (*MsgRegisterDeputyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8776d5690e46d2ba, []int{11}
}
func (m *MsgRegisterDeputyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterDeputyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterDeputyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterDeputyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterDeputyResponse.Merge(m, src)
}
func (m *MsgRegisterDeputyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterDeputyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterDeputyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterDeputyResponse proto.InternalMessageInfo

// MsgUnregisterDeputy
type MsgUnregisterDeputy struct {
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *MsgUnregisterDeputy) Reset()         { *m = MsgUnregisterDeputy{} }
func (m *MsgUnregisterDeputy) String() string { return proto.CompactTextString(m) }
func (*MsgUnregisterDeputy) ProtoMessage()    {}
func (*MsgUnregisterDeputy) Descriptor() ([]byte, []int) {
	return fileDescriptor_8776d5690e46d2ba, []int{12}
}
func (m *MsgUnregisterDeputy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnregisterDeputy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnregisterDeputy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnregisterDeputy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnregisterDeputy.Merge(m, src)
}
func (m *MsgUnregisterDeputy) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnregisterDeputy) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnregisterDeputy.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnregisterDeputy proto.InternalMessageInfo

func (m *MsgUnregisterDeputy) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

// MsgUnregisterDeputyResponse
type MsgUnregisterDeputyResponse struct {
}

func (m *MsgUnregisterDeputyResponse) Reset()         { *m = MsgUnregisterDeputyResponse{} }
func (m *MsgUnregisterDeputyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnregisterDeputyResponse) ProtoMessage()    {}
func (*MsgUnregisterDeputyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8776d5690e46d2ba, []int{13}
}
func (m *MsgUnregisterDeputyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnregisterDeputyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnregisterDeputyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnregisterDeputyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnregisterDeputyResponse.Merge(m, src)
}
func (m *MsgUnregisterDeputyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnregisterDeputyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnregisterDeputyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnregisterDeputyResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgDeclareBlob)(nil), "sunrise.da.v1.MsgDeclareBlob")
	proto.RegisterType((*MsgDeclareBlobResponse)(nil), "sunrise.da.v1.MsgDeclareBlobResponse")
	proto.RegisterType((*MsgBundleCommitments)(nil), "sunrise.da.v1.MsgBundleCommitments")
	proto.RegisterType((*MsgBundleCommitmentsResponse)(nil), "sunrise.da.v1.MsgBundleCommitmentsResponse")
	proto.RegisterType((*AvailabilityCommitment)(nil), "sunrise.da.v1.AvailabilityCommitment")
	proto.RegisterType((*ShardAvailability)(nil), "sunrise.da.v1.ShardAvailability")
	proto.RegisterType((*MsgChallengeUnavailability)(nil), "sunrise.da.v1.MsgChallengeUnavailability")
	proto.RegisterType((*MsgChallengeUnavailabilityResponse)(nil), "sunrise.da.v1.MsgChallengeUnavailabilityResponse")
	proto.RegisterType((*MsgRespondToChallenge)(nil), "sunrise.da.v1.MsgRespondToChallenge")
	proto.RegisterType((*MsgRespondToChallengeResponse)(nil), "sunrise.da.v1.MsgRespondToChallengeResponse")
	proto.RegisterType((*MsgRegisterDeputy)(nil), "sunrise.da.v1.MsgRegisterDeputy")
	proto.RegisterType((*MsgRegisterDeputyResponse)(nil), "sunrise.da.v1.MsgRegisterDeputyResponse")
	proto.RegisterType((*MsgUnregisterDeputy)(nil), "sunrise.da.v1.MsgUnregisterDeputy")
	proto.RegisterType((*MsgUnregisterDeputyResponse)(nil), "sunrise.da.v1.MsgUnregisterDeputyResponse")
}

func init() { proto.RegisterFile("sunrise/da/v1/tx.proto", fileDescriptor_8776d5690e46d2ba) }

var fileDescriptor_8776d5690e46d2ba = []byte{
	// 871 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xda, 0x49, 0x94, 0x3c, 0xdb, 0x81, 0x4c, 0x4d, 0xba, 0x49, 0x88, 0xe3, 0x9a, 0x56,
	0xb2, 0x22, 0xb2, 0xdb, 0x94, 0x5b, 0x11, 0x82, 0x3a, 0x39, 0xd0, 0xc3, 0x8a, 0x6a, 0x43, 0x91,
	0xe0, 0xb2, 0x9a, 0xf5, 0x4e, 0xc7, 0xa3, 0xec, 0xee, 0x58, 0x33, 0x63, 0x13, 0xfb, 0xc8, 0x5f,
	0xc0, 0x89, 0xbf, 0x83, 0x43, 0xaf, 0x48, 0x48, 0x5c, 0x2a, 0x4e, 0x55, 0x4f, 0x9c, 0x10, 0x4a,
	0x0e, 0xfc, 0x1b, 0x68, 0x67, 0xc7, 0xf6, 0x6e, 0x7e, 0x70, 0x88, 0x90, 0xb8, 0x79, 0xbe, 0xef,
	0xbd, 0x37, 0xef, 0xfb, 0xe6, 0xcd, 0xac, 0x61, 0x4b, 0x8e, 0x52, 0xc1, 0x24, 0x71, 0x23, 0xec,
	0x8e, 0x8f, 0x5c, 0x75, 0xee, 0x0c, 0x05, 0x57, 0x1c, 0x35, 0x0c, 0xee, 0x44, 0xd8, 0x19, 0x1f,
	0xed, 0xb4, 0xfa, 0x5c, 0x26, 0x5c, 0xba, 0x21, 0x96, 0xc4, 0x1d, 0x1f, 0x85, 0x44, 0xe1, 0x23,
	0xb7, 0xcf, 0x59, 0x9a, 0x87, 0xef, 0xdc, 0x37, 0x7c, 0x22, 0x69, 0x56, 0x26, 0x91, 0xd4, 0x10,
	0xdb, 0x39, 0x11, 0xe8, 0x95, 0x9b, 0x2f, 0x0c, 0xd5, 0xa4, 0x9c, 0xf2, 0x1c, 0xcf, 0x7e, 0xe5,
	0x68, 0xe7, 0xd7, 0x0a, 0x6c, 0x78, 0x92, 0x9e, 0x90, 0x7e, 0x8c, 0x05, 0xe9, 0xc5, 0x3c, 0x44,
	0x8f, 0x61, 0x55, 0x92, 0x34, 0x22, 0xc2, 0xb6, 0xda, 0x56, 0x77, 0xbd, 0x67, 0xbf, 0x7b, 0x7d,
	0xd8, 0x34, 0xa5, 0x9e, 0x45, 0x91, 0x20, 0x52, 0x9e, 0x2a, 0xc1, 0x52, 0xea, 0x9b, 0x38, 0xf4,
	0x11, 0x34, 0x12, 0xa2, 0x70, 0x84, 0x15, 0x0e, 0x24, 0x9b, 0x12, 0xbb, 0xd2, 0xb6, 0xba, 0xcb,
	0x7e, 0x7d, 0x06, 0x9e, 0xb2, 0x29, 0x41, 0x1f, 0x03, 0x92, 0x03, 0x2c, 0x22, 0x19, 0x24, 0x44,
	0x9c, 0xc5, 0x24, 0x10, 0x9c, 0x2b, 0xbb, 0xda, 0xb6, 0xba, 0x75, 0xff, 0xfd, 0x9c, 0xf1, 0x34,
	0xe1, 0x73, 0xae, 0xd0, 0x2e, 0xac, 0x87, 0x31, 0x0f, 0xf3, 0x72, 0xcb, 0xba, 0xdc, 0x5a, 0x06,
	0xe8, 0x52, 0x9f, 0xc1, 0xee, 0xd9, 0x94, 0x06, 0x7d, 0x9e, 0x24, 0x4c, 0x25, 0x24, 0x55, 0xe5,
	0x9a, 0x2b, 0xba, 0xa6, 0x7d, 0x36, 0xa5, 0xc7, 0x8b, 0x88, 0x42, 0xed, 0x2f, 0x60, 0x23, 0x1c,
	0xa5, 0x51, 0x4c, 0x44, 0x20, 0xc8, 0xf7, 0x58, 0x44, 0xf6, 0x6a, 0xdb, 0xea, 0xd6, 0x9e, 0x6c,
	0x3b, 0x46, 0x65, 0x66, 0xbb, 0x63, 0x6c, 0x77, 0x8e, 0x39, 0x4b, 0xfd, 0x86, 0x49, 0xf0, 0x75,
	0xfc, 0xd3, 0xda, 0x0f, 0x7f, 0xff, 0x7c, 0x60, 0xd4, 0x77, 0x6c, 0xd8, 0x2a, 0x3b, 0xe8, 0x13,
	0x39, 0xe4, 0xa9, 0x24, 0x9d, 0xdf, 0x2d, 0x68, 0x7a, 0x92, 0xf6, 0x74, 0x6e, 0xa1, 0x97, 0x3b,
	0x58, 0xec, 0x41, 0xad, 0x20, 0xd7, 0xae, 0xb4, 0xab, 0xdd, 0xda, 0x93, 0x47, 0x4e, 0x69, 0x6c,
	0x9c, 0x67, 0x63, 0xcc, 0x62, 0x1c, 0xb2, 0x98, 0xa9, 0xc9, 0x62, 0xbb, 0xde, 0xf2, 0x9b, 0x3f,
	0xf7, 0x97, 0xfc, 0x62, 0x3e, 0x7a, 0x08, 0x20, 0x19, 0x4d, 0xb1, 0x1a, 0x09, 0x22, 0xed, 0x6a,
	0xbb, 0xda, 0xad, 0x9b, 0xb0, 0x02, 0x5e, 0x96, 0xd9, 0x82, 0x0f, 0x6f, 0xd2, 0x32, 0x17, 0xfb,
	0x5b, 0x05, 0xb6, 0x6e, 0x6e, 0x00, 0x1d, 0x02, 0x8a, 0xb4, 0x3d, 0x58, 0x31, 0x9e, 0x06, 0x03,
	0xc2, 0xe8, 0x40, 0x69, 0xe9, 0x55, 0x7f, 0xb3, 0xc0, 0x7c, 0xa9, 0x89, 0x5b, 0x26, 0xa5, 0x72,
	0xcb, 0xa4, 0x7c, 0x0e, 0xeb, 0x63, 0x1c, 0xb3, 0x08, 0x2b, 0x2e, 0xf4, 0x38, 0xad, 0xf7, 0x1e,
	0xbc, 0x7b, 0x7d, 0xb8, 0x67, 0xec, 0xfc, 0x66, 0xc6, 0x95, 0x7d, 0x5d, 0xe4, 0xa0, 0xc7, 0xd0,
	0x64, 0x32, 0xd0, 0xeb, 0xa0, 0xd0, 0x8c, 0x9e, 0xba, 0x35, 0x1f, 0x31, 0xa9, 0x4b, 0x9c, 0x2c,
	0x18, 0xf4, 0x2d, 0x34, 0x75, 0x1b, 0x01, 0x5e, 0xe8, 0x65, 0x44, 0xda, 0x2b, 0xfa, 0x54, 0xda,
	0x57, 0x4e, 0xe5, 0x34, 0x0b, 0x2d, 0x3a, 0x63, 0x9c, 0xbe, 0x27, 0xaf, 0x10, 0x8c, 0xc8, 0x8e,
	0x07, 0x9b, 0xd7, 0xe2, 0x51, 0x13, 0x56, 0x58, 0x1a, 0x91, 0x73, 0x6d, 0x59, 0xc3, 0xcf, 0x17,
	0xa8, 0x03, 0xf5, 0xc2, 0xfe, 0x13, 0x6d, 0xd0, 0x9a, 0x5f, 0xc2, 0x3a, 0xbf, 0x58, 0xb0, 0xe3,
	0x49, 0x7a, 0x3c, 0xc0, 0x71, 0x4c, 0x52, 0x4a, 0x5e, 0xa6, 0x45, 0xfa, 0x0e, 0x73, 0x58, 0x72,
	0xbb, 0x72, 0x07, 0xb7, 0xf7, 0xa1, 0x96, 0x7b, 0x97, 0x2b, 0xaa, 0x6a, 0x45, 0xa0, 0xa1, 0xe7,
	0x19, 0x52, 0x1e, 0xba, 0x87, 0xd0, 0xb9, 0xbd, 0xfd, 0xc5, 0x3d, 0xab, 0xc0, 0x07, 0x9e, 0xa4,
	0xf9, 0x3a, 0xfa, 0x9a, 0xcf, 0xe3, 0xff, 0x0f, 0x81, 0x0f, 0xa0, 0xde, 0x9f, 0xed, 0x1f, 0xb0,
	0x48, 0x2b, 0x5c, 0xf6, 0x6b, 0x73, 0xec, 0x79, 0x84, 0x1e, 0xc1, 0x46, 0xf9, 0xfd, 0xd2, 0xb3,
	0x56, 0xf7, 0x1b, 0xa5, 0x27, 0x0b, 0x7d, 0x0a, 0x3b, 0xe5, 0xb0, 0xd9, 0x7d, 0x18, 0x62, 0x35,
	0x30, 0xaf, 0xdc, 0xfd, 0x52, 0x4a, 0x7e, 0x2d, 0x5e, 0x60, 0x35, 0x40, 0x07, 0xb0, 0x99, 0x25,
	0xf3, 0x21, 0x49, 0x59, 0x4a, 0xb3, 0x0f, 0x02, 0x7f, 0xa5, 0xdf, 0xb9, 0xba, 0xff, 0xde, 0xd9,
	0x94, 0x7e, 0x95, 0xe3, 0x2f, 0x32, 0xb8, 0x6c, 0xf9, 0x3e, 0xec, 0xdd, 0xe8, 0xe5, 0xdc, 0xed,
	0x9f, 0x2c, 0xd8, 0xd4, 0x11, 0x94, 0x49, 0x45, 0xc4, 0x09, 0x19, 0x8e, 0xd4, 0xa4, 0xec, 0x9b,
	0x75, 0xa7, 0x6b, 0xb8, 0x1a, 0xe9, 0x52, 0xc6, 0xf5, 0x7f, 0x39, 0xaa, 0x3c, 0xee, 0xe9, 0x46,
	0xd6, 0xf6, 0xa2, 0x42, 0x67, 0x17, 0xb6, 0xaf, 0xf5, 0x35, 0xef, 0xfa, 0x15, 0xdc, 0xf3, 0x24,
	0x7d, 0x99, 0x8a, 0xff, 0xb6, 0xed, 0x6b, 0x4d, 0xec, 0xc1, 0xee, 0x0d, 0xfb, 0xcc, 0xda, 0xe8,
	0x9d, 0xbc, 0xb9, 0x68, 0x59, 0x6f, 0x2f, 0x5a, 0xd6, 0x5f, 0x17, 0x2d, 0xeb, 0xc7, 0xcb, 0xd6,
	0xd2, 0xdb, 0xcb, 0xd6, 0xd2, 0x1f, 0x97, 0xad, 0xa5, 0xef, 0x0e, 0x28, 0x53, 0x83, 0x51, 0xe8,
	0xf4, 0x79, 0xe2, 0x9a, 0x07, 0x24, 0xc6, 0x13, 0x22, 0x66, 0x0b, 0xf7, 0x3c, 0xfb, 0xd3, 0xa0,
	0x26, 0x43, 0x22, 0xc3, 0x55, 0xfd, 0xf1, 0xfe, 0xe4, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7f,
	0x75, 0x73, 0x6b, 0x4f, 0x08, 0x00, 0x00,
}

func (m *MsgDeclareBlob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeclareBlob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeclareBlob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BundlerReward != nil {
		{
			size, err := m.BundlerReward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.KzgCommitmentsMerkleRoot) > 0 {
		i -= len(m.KzgCommitmentsMerkleRoot)
		copy(dAtA[i:], m.KzgCommitmentsMerkleRoot)
		i = encodeVarintTx(dAtA, i, uint64(len(m.KzgCommitmentsMerkleRoot)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BlobSize != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlobSize))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ShardsMerkleRoot) > 0 {
		i -= len(m.ShardsMerkleRoot)
		copy(dAtA[i:], m.ShardsMerkleRoot)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ShardsMerkleRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MetadataSize != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MetadataSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeclareBlobResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeclareBlobResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeclareBlobResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBundleCommitments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBundleCommitments) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBundleCommitments) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signatures[iNdEx])
			copy(dAtA[i:], m.Signatures[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signatures[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Commitments) > 0 {
		for iNdEx := len(m.Commitments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Commitments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBundleCommitmentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBundleCommitmentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBundleCommitmentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AvailabilityCommitment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AvailabilityCommitment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AvailabilityCommitment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ShardAvailabilities) > 0 {
		for iNdEx := len(m.ShardAvailabilities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ShardAvailabilities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.IsValidDeclaration {
		i--
		if m.IsValidDeclaration {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ShardsMerkleRoot) > 0 {
		i -= len(m.ShardsMerkleRoot)
		copy(dAtA[i:], m.ShardsMerkleRoot)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ShardsMerkleRoot)))
		i--
		dAtA[i] = 0x12
	}
	if m.DeclarationHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DeclarationHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShardAvailability) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardAvailability) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardAvailability) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Availability {
		i--
		if m.Availability {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Index != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgChallengeUnavailability) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChallengeUnavailability) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChallengeUnavailability) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShardIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ShardIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChallengeUnavailabilityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChallengeUnavailabilityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChallengeUnavailabilityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRespondToChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRespondToChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRespondToChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KzgOpeningProof) > 0 {
		i -= len(m.KzgOpeningProof)
		copy(dAtA[i:], m.KzgOpeningProof)
		i = encodeVarintTx(dAtA, i, uint64(len(m.KzgOpeningProof)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.KzgCommitmentMerklePath) > 0 {
		i -= len(m.KzgCommitmentMerklePath)
		copy(dAtA[i:], m.KzgCommitmentMerklePath)
		i = encodeVarintTx(dAtA, i, uint64(len(m.KzgCommitmentMerklePath)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.KzgCommitment) > 0 {
		i -= len(m.KzgCommitment)
		copy(dAtA[i:], m.KzgCommitment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.KzgCommitment)))
		i--
		dAtA[i] = 0x22
	}
	if m.ChallengeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChallengeId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRespondToChallengeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRespondToChallengeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRespondToChallengeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterDeputy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterDeputy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterDeputy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deputy) > 0 {
		i -= len(m.Deputy)
		copy(dAtA[i:], m.Deputy)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Deputy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterDeputyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterDeputyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterDeputyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnregisterDeputy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnregisterDeputy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnregisterDeputy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnregisterDeputyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnregisterDeputyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnregisterDeputyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgDeclareBlob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MetadataSize != 0 {
		n += 1 + sovTx(uint64(m.MetadataSize))
	}
	l = len(m.ShardsMerkleRoot)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BlobSize != 0 {
		n += 1 + sovTx(uint64(m.BlobSize))
	}
	l = len(m.KzgCommitmentsMerkleRoot)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BundlerReward != nil {
		l = m.BundlerReward.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeclareBlobResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBundleCommitments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Commitments) > 0 {
		for _, e := range m.Commitments {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Signatures) > 0 {
		for _, b := range m.Signatures {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgBundleCommitmentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AvailabilityCommitment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeclarationHeight != 0 {
		n += 1 + sovTx(uint64(m.DeclarationHeight))
	}
	l = len(m.ShardsMerkleRoot)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IsValidDeclaration {
		n += 2
	}
	if len(m.ShardAvailabilities) > 0 {
		for _, e := range m.ShardAvailabilities {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *ShardAvailability) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovTx(uint64(m.Index))
	}
	if m.Availability {
		n += 2
	}
	return n
}

func (m *MsgChallengeUnavailability) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ShardIndex != 0 {
		n += 1 + sovTx(uint64(m.ShardIndex))
	}
	return n
}

func (m *MsgChallengeUnavailabilityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRespondToChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChallengeId != 0 {
		n += 1 + sovTx(uint64(m.ChallengeId))
	}
	l = len(m.KzgCommitment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.KzgCommitmentMerklePath)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.KzgOpeningProof)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRespondToChallengeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterDeputy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Deputy)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterDeputyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnregisterDeputy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnregisterDeputyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgDeclareBlob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeclareBlob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeclareBlob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataSize", wireType)
			}
			m.MetadataSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetadataSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardsMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardsMerkleRoot = append(m.ShardsMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ShardsMerkleRoot == nil {
				m.ShardsMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlobSize", wireType)
			}
			m.BlobSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlobSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KzgCommitmentsMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KzgCommitmentsMerkleRoot = append(m.KzgCommitmentsMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.KzgCommitmentsMerkleRoot == nil {
				m.KzgCommitmentsMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundlerReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BundlerReward == nil {
				m.BundlerReward = &types.Coin{}
			}
			if err := m.BundlerReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeclareBlobResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeclareBlobResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeclareBlobResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBundleCommitments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBundleCommitments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBundleCommitments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitments = append(m.Commitments, AvailabilityCommitment{})
			if err := m.Commitments[len(m.Commitments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, make([]byte, postIndex-iNdEx))
			copy(m.Signatures[len(m.Signatures)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBundleCommitmentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBundleCommitmentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBundleCommitmentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AvailabilityCommitment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AvailabilityCommitment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AvailabilityCommitment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeclarationHeight", wireType)
			}
			m.DeclarationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeclarationHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardsMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardsMerkleRoot = append(m.ShardsMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ShardsMerkleRoot == nil {
				m.ShardsMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValidDeclaration", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsValidDeclaration = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardAvailabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardAvailabilities = append(m.ShardAvailabilities, ShardAvailability{})
			if err := m.ShardAvailabilities[len(m.ShardAvailabilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardAvailability) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardAvailability: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardAvailability: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Availability", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Availability = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChallengeUnavailability) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChallengeUnavailability: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChallengeUnavailability: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardIndex", wireType)
			}
			m.ShardIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChallengeUnavailabilityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChallengeUnavailabilityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChallengeUnavailabilityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRespondToChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRespondToChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRespondToChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			m.ChallengeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KzgCommitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KzgCommitment = append(m.KzgCommitment[:0], dAtA[iNdEx:postIndex]...)
			if m.KzgCommitment == nil {
				m.KzgCommitment = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KzgCommitmentMerklePath", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KzgCommitmentMerklePath = append(m.KzgCommitmentMerklePath[:0], dAtA[iNdEx:postIndex]...)
			if m.KzgCommitmentMerklePath == nil {
				m.KzgCommitmentMerklePath = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KzgOpeningProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KzgOpeningProof = append(m.KzgOpeningProof[:0], dAtA[iNdEx:postIndex]...)
			if m.KzgOpeningProof == nil {
				m.KzgOpeningProof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRespondToChallengeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRespondToChallengeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRespondToChallengeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterDeputy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterDeputy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterDeputy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deputy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deputy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterDeputyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterDeputyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterDeputyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnregisterDeputy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnregisterDeputy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnregisterDeputy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnregisterDeputyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnregisterDeputyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnregisterDeputyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
