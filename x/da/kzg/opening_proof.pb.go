// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/da/kzg/v1/opening_proof.proto

package kzg

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OpeningProof
type OpeningProof struct {
	H            []byte `protobuf:"bytes,1,opt,name=h,proto3" json:"h,omitempty"`
	ClaimedValue []byte `protobuf:"bytes,2,opt,name=claimed_value,json=claimedValue,proto3" json:"claimed_value,omitempty"`
}

func (m *OpeningProof) Reset()         { *m = OpeningProof{} }
func (m *OpeningProof) String() string { return proto.CompactTextString(m) }
func (*OpeningProof) ProtoMessage()    {}
func (*OpeningProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_c229ea3ca9afa86c, []int{0}
}
func (m *OpeningProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpeningProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpeningProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpeningProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpeningProof.Merge(m, src)
}
func (m *OpeningProof) XXX_Size() int {
	return m.Size()
}
func (m *OpeningProof) XXX_DiscardUnknown() {
	xxx_messageInfo_OpeningProof.DiscardUnknown(m)
}

var xxx_messageInfo_OpeningProof proto.InternalMessageInfo

func (m *OpeningProof) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *OpeningProof) GetClaimedValue() []byte {
	if m != nil {
		return m.ClaimedValue
	}
	return nil
}

func init() {
	proto.RegisterType((*OpeningProof)(nil), "sunrise.da.kzg.v1.OpeningProof")
}

func init() {
	proto.RegisterFile("sunrise/da/kzg/v1/opening_proof.proto", fileDescriptor_c229ea3ca9afa86c)
}

var fileDescriptor_c229ea3ca9afa86c = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2d, 0x2e, 0xcd, 0x2b,
	0xca, 0x2c, 0x4e, 0xd5, 0x4f, 0x49, 0xd4, 0xcf, 0xae, 0x4a, 0xd7, 0x2f, 0x33, 0xd4, 0xcf, 0x2f,
	0x48, 0xcd, 0xcb, 0xcc, 0x4b, 0x8f, 0x2f, 0x28, 0xca, 0xcf, 0x4f, 0xd3, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x12, 0x84, 0x2a, 0xd3, 0x4b, 0x49, 0xd4, 0xcb, 0xae, 0x4a, 0xd7, 0x2b, 0x33, 0x54,
	0x72, 0xe4, 0xe2, 0xf1, 0x87, 0xa8, 0x0c, 0x00, 0x29, 0x14, 0xe2, 0xe1, 0x62, 0xcc, 0x90, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x09, 0x62, 0xcc, 0x10, 0x52, 0xe6, 0xe2, 0x4d, 0xce, 0x49, 0xcc, 0xcc,
	0x4d, 0x4d, 0x89, 0x2f, 0x4b, 0xcc, 0x29, 0x4d, 0x95, 0x60, 0x02, 0xcb, 0xf0, 0x40, 0x05, 0xc3,
	0x40, 0x62, 0x4e, 0x4e, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c,
	0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0xa5, 0x91,
	0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x0f, 0xb5, 0x3a, 0x27, 0xb1, 0x32,
	0xb5, 0x08, 0xc6, 0xd1, 0xaf, 0x80, 0x3a, 0x38, 0x89, 0x0d, 0xec, 0x40, 0x63, 0x40, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xeb, 0xef, 0xfd, 0x27, 0xc9, 0x00, 0x00, 0x00,
}

func (m *OpeningProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpeningProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpeningProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimedValue) > 0 {
		i -= len(m.ClaimedValue)
		copy(dAtA[i:], m.ClaimedValue)
		i = encodeVarintOpeningProof(dAtA, i, uint64(len(m.ClaimedValue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.H) > 0 {
		i -= len(m.H)
		copy(dAtA[i:], m.H)
		i = encodeVarintOpeningProof(dAtA, i, uint64(len(m.H)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOpeningProof(dAtA []byte, offset int, v uint64) int {
	offset -= sovOpeningProof(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OpeningProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.H)
	if l > 0 {
		n += 1 + l + sovOpeningProof(uint64(l))
	}
	l = len(m.ClaimedValue)
	if l > 0 {
		n += 1 + l + sovOpeningProof(uint64(l))
	}
	return n
}

func sovOpeningProof(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOpeningProof(x uint64) (n int) {
	return sovOpeningProof(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OpeningProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpeningProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpeningProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpeningProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpeningProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOpeningProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOpeningProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H = append(m.H[:0], dAtA[iNdEx:postIndex]...)
			if m.H == nil {
				m.H = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpeningProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOpeningProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOpeningProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimedValue = append(m.ClaimedValue[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimedValue == nil {
				m.ClaimedValue = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpeningProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOpeningProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOpeningProof(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOpeningProof
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpeningProof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpeningProof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOpeningProof
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOpeningProof
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOpeningProof
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOpeningProof        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOpeningProof          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOpeningProof = fmt.Errorf("proto: unexpected end of group")
)
