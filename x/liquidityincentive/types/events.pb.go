// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/liquidityincentive/v1/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventStartNewEpoch
type EventStartNewEpoch struct {
	EpochId    uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	StartBlock int64  `protobuf:"varint,2,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
	EndBlock   int64  `protobuf:"varint,3,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
}

func (m *EventStartNewEpoch) Reset()         { *m = EventStartNewEpoch{} }
func (m *EventStartNewEpoch) String() string { return proto.CompactTextString(m) }
func (*EventStartNewEpoch) ProtoMessage()    {}
func (*EventStartNewEpoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_50e964a568a1e703, []int{0}
}
func (m *EventStartNewEpoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventStartNewEpoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventStartNewEpoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventStartNewEpoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStartNewEpoch.Merge(m, src)
}
func (m *EventStartNewEpoch) XXX_Size() int {
	return m.Size()
}
func (m *EventStartNewEpoch) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStartNewEpoch.DiscardUnknown(m)
}

var xxx_messageInfo_EventStartNewEpoch proto.InternalMessageInfo

func (m *EventStartNewEpoch) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *EventStartNewEpoch) GetStartBlock() int64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func (m *EventStartNewEpoch) GetEndBlock() int64 {
	if m != nil {
		return m.EndBlock
	}
	return 0
}

// EventVoteGauge
type EventVoteGauge struct {
	Address     string       `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PoolWeights []PoolWeight `protobuf:"bytes,2,rep,name=pool_weights,json=poolWeights,proto3" json:"pool_weights"`
}

func (m *EventVoteGauge) Reset()         { *m = EventVoteGauge{} }
func (m *EventVoteGauge) String() string { return proto.CompactTextString(m) }
func (*EventVoteGauge) ProtoMessage()    {}
func (*EventVoteGauge) Descriptor() ([]byte, []int) {
	return fileDescriptor_50e964a568a1e703, []int{1}
}
func (m *EventVoteGauge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventVoteGauge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventVoteGauge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventVoteGauge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventVoteGauge.Merge(m, src)
}
func (m *EventVoteGauge) XXX_Size() int {
	return m.Size()
}
func (m *EventVoteGauge) XXX_DiscardUnknown() {
	xxx_messageInfo_EventVoteGauge.DiscardUnknown(m)
}

var xxx_messageInfo_EventVoteGauge proto.InternalMessageInfo

func (m *EventVoteGauge) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventVoteGauge) GetPoolWeights() []PoolWeight {
	if m != nil {
		return m.PoolWeights
	}
	return nil
}

// EventRegisterBribe
type EventRegisterBribe struct {
	Id      uint64                                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address string                                   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	EpochId uint64                                   `protobuf:"varint,3,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	PoolId  uint64                                   `protobuf:"varint,4,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Amount  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *EventRegisterBribe) Reset()         { *m = EventRegisterBribe{} }
func (m *EventRegisterBribe) String() string { return proto.CompactTextString(m) }
func (*EventRegisterBribe) ProtoMessage()    {}
func (*EventRegisterBribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_50e964a568a1e703, []int{2}
}
func (m *EventRegisterBribe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRegisterBribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRegisterBribe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRegisterBribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRegisterBribe.Merge(m, src)
}
func (m *EventRegisterBribe) XXX_Size() int {
	return m.Size()
}
func (m *EventRegisterBribe) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRegisterBribe.DiscardUnknown(m)
}

var xxx_messageInfo_EventRegisterBribe proto.InternalMessageInfo

func (m *EventRegisterBribe) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventRegisterBribe) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventRegisterBribe) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *EventRegisterBribe) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *EventRegisterBribe) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

// EventClaimBribes
type EventClaimBribes struct {
	Address string                                   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	BribeId uint64                                   `protobuf:"varint,2,opt,name=bribe_id,json=bribeId,proto3" json:"bribe_id,omitempty"`
	Amount  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *EventClaimBribes) Reset()         { *m = EventClaimBribes{} }
func (m *EventClaimBribes) String() string { return proto.CompactTextString(m) }
func (*EventClaimBribes) ProtoMessage()    {}
func (*EventClaimBribes) Descriptor() ([]byte, []int) {
	return fileDescriptor_50e964a568a1e703, []int{3}
}
func (m *EventClaimBribes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventClaimBribes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventClaimBribes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventClaimBribes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventClaimBribes.Merge(m, src)
}
func (m *EventClaimBribes) XXX_Size() int {
	return m.Size()
}
func (m *EventClaimBribes) XXX_DiscardUnknown() {
	xxx_messageInfo_EventClaimBribes.DiscardUnknown(m)
}

var xxx_messageInfo_EventClaimBribes proto.InternalMessageInfo

func (m *EventClaimBribes) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventClaimBribes) GetBribeId() uint64 {
	if m != nil {
		return m.BribeId
	}
	return 0
}

func (m *EventClaimBribes) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func init() {
	proto.RegisterType((*EventStartNewEpoch)(nil), "sunrise.liquidityincentive.v1.EventStartNewEpoch")
	proto.RegisterType((*EventVoteGauge)(nil), "sunrise.liquidityincentive.v1.EventVoteGauge")
	proto.RegisterType((*EventRegisterBribe)(nil), "sunrise.liquidityincentive.v1.EventRegisterBribe")
	proto.RegisterType((*EventClaimBribes)(nil), "sunrise.liquidityincentive.v1.EventClaimBribes")
}

func init() {
	proto.RegisterFile("sunrise/liquidityincentive/v1/events.proto", fileDescriptor_50e964a568a1e703)
}

var fileDescriptor_50e964a568a1e703 = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0xed, 0x90, 0xa4, 0x1b, 0x54, 0x21, 0xab, 0x12, 0x4e, 0x11, 0x4e, 0x94, 0x53, 0x8a,
	0xd4, 0x35, 0x29, 0x37, 0x6e, 0xb8, 0xaa, 0x50, 0x2f, 0x08, 0xb9, 0x08, 0x24, 0x2e, 0x91, 0xed,
	0x1d, 0x39, 0xab, 0xda, 0xbb, 0xc6, 0xbb, 0x4e, 0xc9, 0x5f, 0x70, 0xe4, 0x1b, 0x38, 0xf3, 0x0d,
	0xa8, 0xc7, 0x8a, 0x13, 0x27, 0x40, 0xc9, 0x17, 0xf0, 0x07, 0x68, 0xd7, 0xdb, 0x2a, 0x15, 0xa8,
	0x42, 0x48, 0x3d, 0x79, 0xdf, 0xbc, 0x99, 0x9d, 0x79, 0xcf, 0xb3, 0xe8, 0x91, 0xa8, 0x59, 0x45,
	0x05, 0x04, 0x39, 0x7d, 0x57, 0x53, 0x42, 0xe5, 0x92, 0xb2, 0x14, 0x98, 0xa4, 0x0b, 0x08, 0x16,
	0xd3, 0x00, 0x16, 0xc0, 0xa4, 0xc0, 0x65, 0xc5, 0x25, 0x77, 0x1f, 0x9a, 0x5c, 0xfc, 0x67, 0x2e,
	0x5e, 0x4c, 0x77, 0xfd, 0x94, 0x8b, 0x82, 0x8b, 0x20, 0x89, 0x85, 0xaa, 0x4d, 0x40, 0xc6, 0xd3,
	0x20, 0xe5, 0x94, 0x35, 0xe5, 0xbb, 0x83, 0x86, 0x9f, 0x69, 0x14, 0x34, 0xc0, 0x50, 0x3b, 0x19,
	0xcf, 0x78, 0x13, 0x57, 0x27, 0x13, 0xdd, 0xbb, 0x79, 0xb6, 0x2c, 0xae, 0x33, 0x68, 0x52, 0xc7,
	0x05, 0x72, 0x8f, 0xd4, 0xa8, 0x27, 0x32, 0xae, 0xe4, 0x0b, 0x38, 0x3b, 0x2a, 0x79, 0x3a, 0x77,
	0x07, 0xa8, 0x07, 0xea, 0x30, 0xa3, 0xc4, 0xb3, 0x46, 0xd6, 0xa4, 0x1d, 0x75, 0x35, 0x3e, 0x26,
	0xee, 0x10, 0xf5, 0x85, 0xca, 0x9d, 0x25, 0x39, 0x4f, 0x4f, 0x3d, 0x7b, 0x64, 0x4d, 0x9c, 0x08,
	0xe9, 0x50, 0xa8, 0x22, 0xee, 0x03, 0xb4, 0x05, 0x8c, 0x18, 0xda, 0xd1, 0x74, 0x0f, 0x18, 0xd1,
	0xe4, 0xf8, 0xa3, 0x85, 0xb6, 0x75, 0xbf, 0xd7, 0x5c, 0xc2, 0x73, 0x35, 0x87, 0x7b, 0x80, 0xba,
	0x31, 0x21, 0x15, 0x08, 0xa1, 0x5b, 0x6d, 0x85, 0xde, 0xd7, 0xcf, 0xfb, 0x3b, 0x46, 0xe5, 0xb3,
	0x86, 0x39, 0x91, 0x15, 0x65, 0x59, 0x74, 0x99, 0xe8, 0x46, 0xe8, 0x6e, 0xc9, 0x79, 0x3e, 0x3b,
	0x03, 0x9a, 0xcd, 0xa5, 0xf0, 0xec, 0x91, 0x33, 0xe9, 0x1f, 0xec, 0xe1, 0x1b, 0x7d, 0xc6, 0x2f,
	0x39, 0xcf, 0xdf, 0xe8, 0x8a, 0xb0, 0x7d, 0xfe, 0x7d, 0xd8, 0x8a, 0xfa, 0xe5, 0x55, 0x44, 0x8c,
	0x7f, 0x59, 0xc6, 0x8a, 0x08, 0x32, 0x2a, 0x24, 0x54, 0x61, 0x45, 0x13, 0x70, 0xb7, 0x91, 0x7d,
	0x65, 0x82, 0x4d, 0xc9, 0xe6, 0xb8, 0xf6, 0xbf, 0x8e, 0xbb, 0x69, 0xa7, 0x73, 0xdd, 0xce, 0xfb,
	0xa8, 0xab, 0x95, 0x50, 0xe2, 0xb5, 0x35, 0xd3, 0x51, 0xf0, 0x98, 0xb8, 0x29, 0xea, 0xc4, 0x05,
	0xaf, 0x99, 0xf4, 0xee, 0x68, 0x71, 0x03, 0x6c, 0x7a, 0xa8, 0x2d, 0xc1, 0x66, 0x4b, 0xf0, 0x21,
	0xa7, 0x2c, 0x7c, 0xac, 0xc4, 0x7c, 0xfa, 0x31, 0x9c, 0x64, 0x54, 0xce, 0xeb, 0x04, 0xa7, 0xbc,
	0x30, 0x5b, 0x62, 0x3e, 0xfb, 0x82, 0x9c, 0x06, 0x72, 0x59, 0x82, 0xd0, 0x05, 0x22, 0x32, 0x57,
	0x8f, 0xbf, 0x58, 0xe8, 0x9e, 0xd6, 0x7c, 0x98, 0xc7, 0xb4, 0xd0, 0x82, 0xc5, 0x7f, 0xfd, 0x90,
	0x01, 0xea, 0x25, 0xaa, 0x5a, 0xe9, 0xb0, 0x1b, 0x85, 0x1a, 0x5f, 0x13, 0xe2, 0xdc, 0x9a, 0x90,
	0xf0, 0xd5, 0xf9, 0xca, 0xb7, 0x2e, 0x56, 0xbe, 0xf5, 0x73, 0xe5, 0x5b, 0x1f, 0xd6, 0x7e, 0xeb,
	0x62, 0xed, 0xb7, 0xbe, 0xad, 0xfd, 0xd6, 0xdb, 0xa7, 0x1b, 0x77, 0x99, 0xf5, 0xc8, 0xe3, 0x25,
	0x54, 0x97, 0x20, 0x78, 0xff, 0xb7, 0x57, 0xa2, 0x7b, 0x24, 0x1d, 0xfd, 0x46, 0x9e, 0xfc, 0x0e,
	0x00, 0x00, 0xff, 0xff, 0x78, 0x9e, 0x74, 0xab, 0xec, 0x03, 0x00, 0x00,
}

func (m *EventStartNewEpoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventStartNewEpoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventStartNewEpoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndBlock != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EndBlock))
		i--
		dAtA[i] = 0x18
	}
	if m.StartBlock != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x10
	}
	if m.EpochId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventVoteGauge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventVoteGauge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventVoteGauge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolWeights) > 0 {
		for iNdEx := len(m.PoolWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRegisterBribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRegisterBribe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRegisterBribe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.PoolId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x20
	}
	if m.EpochId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventClaimBribes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventClaimBribes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventClaimBribes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.BribeId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BribeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventStartNewEpoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochId != 0 {
		n += 1 + sovEvents(uint64(m.EpochId))
	}
	if m.StartBlock != 0 {
		n += 1 + sovEvents(uint64(m.StartBlock))
	}
	if m.EndBlock != 0 {
		n += 1 + sovEvents(uint64(m.EndBlock))
	}
	return n
}

func (m *EventVoteGauge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.PoolWeights) > 0 {
		for _, e := range m.PoolWeights {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventRegisterBribe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EpochId != 0 {
		n += 1 + sovEvents(uint64(m.EpochId))
	}
	if m.PoolId != 0 {
		n += 1 + sovEvents(uint64(m.PoolId))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventClaimBribes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.BribeId != 0 {
		n += 1 + sovEvents(uint64(m.BribeId))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventStartNewEpoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventStartNewEpoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventStartNewEpoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			m.EndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventVoteGauge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventVoteGauge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventVoteGauge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolWeights = append(m.PoolWeights, PoolWeight{})
			if err := m.PoolWeights[len(m.PoolWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRegisterBribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRegisterBribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRegisterBribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventClaimBribes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventClaimBribes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventClaimBribes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BribeId", wireType)
			}
			m.BribeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BribeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
