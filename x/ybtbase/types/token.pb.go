// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/ybtbase/v1/token.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PermissionMode defines the permission mode for yield and transfers
type PermissionMode int32

const (
	// PERMISSION_MODE_UNSPECIFIED is the default value (invalid)
	PermissionMode_PERMISSION_MODE_UNSPECIFIED PermissionMode = 0
	// PERMISSION_MODE_PERMISSIONLESS allows all addresses (no restrictions)
	PermissionMode_PERMISSION_MODE_PERMISSIONLESS PermissionMode = 1
	// PERMISSION_MODE_WHITELIST allows only whitelisted addresses
	PermissionMode_PERMISSION_MODE_WHITELIST PermissionMode = 2
	// PERMISSION_MODE_BLACKLIST blocks only blacklisted addresses
	PermissionMode_PERMISSION_MODE_BLACKLIST PermissionMode = 3
)

var PermissionMode_name = map[int32]string{
	0: "PERMISSION_MODE_UNSPECIFIED",
	1: "PERMISSION_MODE_PERMISSIONLESS",
	2: "PERMISSION_MODE_WHITELIST",
	3: "PERMISSION_MODE_BLACKLIST",
}

var PermissionMode_value = map[string]int32{
	"PERMISSION_MODE_UNSPECIFIED":    0,
	"PERMISSION_MODE_PERMISSIONLESS": 1,
	"PERMISSION_MODE_WHITELIST":      2,
	"PERMISSION_MODE_BLACKLIST":      3,
}

func (x PermissionMode) String() string {
	return proto.EnumName(PermissionMode_name, int32(x))
}

func (PermissionMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_df760292a45b8721, []int{0}
}

// Token
type Token struct {
	Creator        string         `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Admin          string         `protobuf:"bytes,2,opt,name=admin,proto3" json:"admin,omitempty"`
	PermissionMode PermissionMode `protobuf:"varint,3,opt,name=permission_mode,json=permissionMode,proto3,enum=sunrise.ybtbase.v1.PermissionMode" json:"permission_mode,omitempty"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_df760292a45b8721, []int{0}
}
func (m *Token) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Token.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return m.Size()
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Token) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *Token) GetPermissionMode() PermissionMode {
	if m != nil {
		return m.PermissionMode
	}
	return PermissionMode_PERMISSION_MODE_UNSPECIFIED
}

func init() {
	proto.RegisterEnum("sunrise.ybtbase.v1.PermissionMode", PermissionMode_name, PermissionMode_value)
	proto.RegisterType((*Token)(nil), "sunrise.ybtbase.v1.Token")
}

func init() { proto.RegisterFile("sunrise/ybtbase/v1/token.proto", fileDescriptor_df760292a45b8721) }

var fileDescriptor_df760292a45b8721 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcd, 0x4e, 0x2a, 0x31,
	0x18, 0x40, 0xa7, 0x10, 0xee, 0x8d, 0x5d, 0x20, 0x69, 0x58, 0x8c, 0x18, 0x0b, 0x61, 0x45, 0x5c,
	0x4c, 0x83, 0x3e, 0x81, 0xc0, 0x18, 0x1b, 0x7e, 0x43, 0x31, 0x26, 0x6e, 0x48, 0x07, 0x1a, 0x9c,
	0xe8, 0x4c, 0x27, 0x6d, 0x21, 0xb2, 0xf7, 0x01, 0x4c, 0x7c, 0x29, 0x97, 0x2c, 0x5d, 0x1a, 0x78,
	0x11, 0xc3, 0x30, 0x60, 0x40, 0x76, 0x3d, 0x3d, 0x27, 0x5f, 0xda, 0x0f, 0x62, 0x3d, 0x0d, 0x95,
	0xaf, 0x05, 0x99, 0x7b, 0xc6, 0xe3, 0x5a, 0x90, 0x59, 0x95, 0x18, 0xf9, 0x2c, 0x42, 0x27, 0x52,
	0xd2, 0x48, 0x84, 0x12, 0xef, 0x24, 0xde, 0x99, 0x55, 0x0b, 0xf9, 0x89, 0x9c, 0xc8, 0x58, 0x93,
	0xf5, 0x69, 0x53, 0x16, 0x8a, 0x47, 0x26, 0x45, 0x5c, 0xf1, 0x40, 0x6f, 0x82, 0xf2, 0x1b, 0x80,
	0x99, 0xc1, 0x7a, 0x34, 0xb2, 0xe1, 0xff, 0x91, 0x12, 0xdc, 0x48, 0x65, 0x83, 0x12, 0xa8, 0x9c,
	0xf4, 0xb7, 0x88, 0xf2, 0x30, 0xc3, 0xc7, 0x81, 0x1f, 0xda, 0xa9, 0xf8, 0x7e, 0x03, 0xa8, 0x09,
	0x4f, 0x23, 0xa1, 0x02, 0x5f, 0x6b, 0x5f, 0x86, 0xc3, 0x40, 0x8e, 0x85, 0x9d, 0x2e, 0x81, 0x4a,
	0xf6, 0xaa, 0xec, 0xfc, 0x7d, 0x9e, 0xd3, 0xdb, 0xa5, 0x6d, 0x39, 0x16, 0xfd, 0x6c, 0xb4, 0xc7,
	0x97, 0x1f, 0x00, 0x66, 0xf7, 0x13, 0x54, 0x84, 0xe7, 0x3d, 0xb7, 0xdf, 0xa6, 0x8c, 0xd1, 0x6e,
	0x67, 0xd8, 0xee, 0x36, 0xdc, 0xe1, 0x7d, 0x87, 0xf5, 0xdc, 0x3a, 0xbd, 0xa5, 0x6e, 0x23, 0x67,
	0xa1, 0x32, 0xc4, 0x87, 0xc1, 0x2f, 0xb7, 0x5c, 0xc6, 0x72, 0x00, 0x5d, 0xc0, 0xb3, 0xc3, 0xe6,
	0xe1, 0x8e, 0x0e, 0xdc, 0x16, 0x65, 0x83, 0x5c, 0xea, 0x98, 0xae, 0xb5, 0x6e, 0xea, 0xcd, 0x58,
	0xa7, 0x6b, 0xf4, 0x73, 0x89, 0xc1, 0x62, 0x89, 0xc1, 0xf7, 0x12, 0x83, 0xf7, 0x15, 0xb6, 0x16,
	0x2b, 0x6c, 0x7d, 0xad, 0xb0, 0xf5, 0x48, 0x26, 0xbe, 0x79, 0x9a, 0x7a, 0xce, 0x48, 0x06, 0x24,
	0xf9, 0xed, 0x0b, 0x9f, 0x0b, 0xb5, 0x05, 0xf2, 0xba, 0xdb, 0xb8, 0x99, 0x47, 0x42, 0x7b, 0xff,
	0xe2, 0x75, 0x5f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x65, 0x7a, 0x46, 0x1a, 0xdb, 0x01, 0x00,
	0x00,
}

func (m *Token) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PermissionMode != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.PermissionMode))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintToken(dAtA []byte, offset int, v uint64) int {
	offset -= sovToken(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	if m.PermissionMode != 0 {
		n += 1 + sovToken(uint64(m.PermissionMode))
	}
	return n
}

func sovToken(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozToken(x uint64) (n int) {
	return sovToken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Token) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Token: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Token: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionMode", wireType)
			}
			m.PermissionMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PermissionMode |= PermissionMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipToken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowToken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthToken
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupToken
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthToken
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthToken        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowToken          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupToken = fmt.Errorf("proto: unexpected end of group")
)
