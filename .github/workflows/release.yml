# This workflow is useful if you want to automate the process of:
#
# a) Creating a new prelease when you push a new tag with a "v" prefix (version).
#
#    This type of prerelease is meant to be used for production: alpha, beta, rc, etc. types of releases.
#    After the prerelease is created, you need to make your changes on the release page at the relevant
#    Github page and publish your release.
#
# b) Creating/updating the "latest" prerelease when you push to your default branch.
#
#    This type of prelease is useful to make your bleeding-edge binaries available to advanced users.
#
# The workflow will not run if there is no tag pushed with a "v" prefix and no change pushed to your
# default branch.
on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            name: sunrised-linux-amd64
          - os: ubuntu-latest
            arch: arm64
            name: sunrised-linux-arm64
          - os: macos-latest
            arch: amd64
            name: sunrised-darwin-amd64
          - os: macos-latest
            arch: arm64
            name: sunrised-darwin-arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.2"

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: runner.os == 'Linux'
        uses: docker/setup-buildx-action@v3

      - name: Build on Linux
        if: runner.os == 'Linux'
        run: |
          docker buildx build --platform linux/${{ matrix.arch }} -f Dockerfile -t sunrised-dev:${{ matrix.arch }} --load .
          mkdir -p build
          docker run --rm -v $PWD/build:/build sunrised-dev:${{ matrix.arch }} sh -c "cp /sunrise/build/sunrised /build/${{ matrix.name }}"

      - name: Build on macOS
        if: runner.os == 'macOS'
        run: |
          brew install hidapi

          APPNAME=sunrise
          VERSION=$(git describe --tags --abbrev=0)
          COMMIT=$(git rev-parse HEAD)
          BUILD_TAGS="netgo,ledger"
          LDFLAGS="-X github.com/cosmos/cosmos-sdk/version.Name=$APPNAME -X github.com/cosmos/cosmos-sdk/version.AppName=${APPNAME}d -X github.com/cosmos/cosmos-sdk/version.Version=$VERSION -X github.com/cosmos/cosmos-sdk/version.Commit=$COMMIT -X 'github.com/cosmos/cosmos-sdk/version.BuildTags=${BUILD_TAGS}' -w -s"

          mkdir -p build
          GOOS=darwin GOARCH=${{ matrix.arch }} go build -tags "${BUILD_TAGS}" -ldflags "$LDFLAGS" -o "build/${{ matrix.name }}" ./cmd/sunrised

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: build/${{ matrix.name }}

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare Release Variables
        id: vars
        uses: ignite/cli/actions/release/vars@main

      - name: Download all build artifacts
        if: ${{ steps.vars.outputs.should_release == 'true' }}
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Organize release files
        if: ${{ steps.vars.outputs.should_release == 'true' }}
        run: |
          mkdir -p release
          find release-artifacts -type f -exec mv -t release {} +
          ls -l release

      - name: Delete the "latest" Release
        if: ${{ steps.vars.outputs.should_release == 'true' && steps.vars.outputs.is_release_type_latest == 'true' }}
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          tag_name: ${{ steps.vars.outputs.tag_name }}
          delete_release: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish the Release
        if: ${{ steps.vars.outputs.should_release == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.vars.outputs.tag_name }}
          files: release/*
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
