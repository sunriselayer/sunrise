syntax = "proto3";
package sunrise.liquiditypool.v1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/sunriselayer/sunrise/x/liquiditypool/types";

// EventCreatePool
message EventCreatePool {
  uint64 pool_id = 1 [(amino.dont_omitempty) = true];
  string denom_base = 2;
  string denom_quote = 3;
  string fee_rate = 4;
  string price_ratio = 5;
  string base_offset = 6;
}

// EventCreatePosition
message EventCreatePosition {
  uint64 position_id = 1 [(amino.dont_omitempty) = true];
  string address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 pool_id = 3 [(amino.dont_omitempty) = true];
  int64 lower_tick = 4 [(amino.dont_omitempty) = true];
  int64 upper_tick = 5 [(amino.dont_omitempty) = true];
  string liquidity = 6;
}

// EventIncreaseLiquidity
message EventIncreaseLiquidity {
  uint64 old_position_id = 1 [(amino.dont_omitempty) = true];
  uint64 new_position_id = 2 [(amino.dont_omitempty) = true];
  string address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string amount_base = 4;
  string amount_quote = 5;
}

// EventDecreaseLiquidity
message EventDecreaseLiquidity {
  uint64 position_id = 1 [(amino.dont_omitempty) = true];
  string address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string amount_base = 3;
  string amount_quote = 4;
}

// EventClaimRewards
message EventClaimRewards {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 position_id = 2 [(amino.dont_omitempty) = true];
  repeated cosmos.base.v1beta1.Coin rewards = 3 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

// EventSwapExactAmountIn
message EventSwapExactAmountIn {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 pool_id = 2 [(amino.dont_omitempty) = true];
  cosmos.base.v1beta1.Coin token_in = 3 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
  cosmos.base.v1beta1.Coin token_out = 4 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

// EventSwapExactAmountOut
message EventSwapExactAmountOut {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 pool_id = 2 [(amino.dont_omitempty) = true];
  cosmos.base.v1beta1.Coin token_in = 3 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
  cosmos.base.v1beta1.Coin token_out = 4 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}
