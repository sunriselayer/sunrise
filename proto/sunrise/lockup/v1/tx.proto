syntax = "proto3";

package sunrise.lockup.v1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "sunrise/lockup/v1/params.proto";

option go_package = "github.com/sunriselayer/sunrise/x/lockup/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  // InitLockupAccount
  rpc InitLockupAccount(MsgInitLockupAccount) returns (MsgInitLockupAccountResponse);
  // NonVotingDelegate
  rpc NonVotingDelegate(MsgNonVotingDelegate) returns (MsgNonVotingDelegateResponse);
  // NonVotingUndelegate
  rpc NonVotingUndelegate(MsgNonVotingUndelegate) returns (MsgNonVotingUndelegateResponse);
  // ClaimRewards
  rpc ClaimRewards(MsgClaimRewards) returns (MsgClaimRewardsResponse);
  // Send
  rpc Send(MsgSend) returns (MsgSendResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.

  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgInitLockupAccount
message MsgInitLockupAccount {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string owner = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // start of lockup as unix time (in seconds).
  int64 start_time = 3;
  // end of lockup as unix time (in seconds).
  int64 end_time = 4;
  cosmos.base.v1beta1.Coin amount = 5 [(gogoproto.nullable) = false];
}

// MsgInitLockupAccountResponse
message MsgInitLockupAccountResponse {}

// MsgNonVotingDelegate
message MsgNonVotingDelegate {
  option (cosmos.msg.v1.signer) = "owner";
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 lockup_account_id = 2;
  string validator_address = 3 [(cosmos_proto.scalar) = "cosmos.ValidatorAddressString"];
  cosmos.base.v1beta1.Coin amount = 4 [(gogoproto.nullable) = false];
}

// MsgNonVotingDelegateResponse
message MsgNonVotingDelegateResponse {}

// MsgNonVotingUndelegate
message MsgNonVotingUndelegate {
  option (cosmos.msg.v1.signer) = "owner";
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 lockup_account_id = 2;
  string validator_address = 3 [(cosmos_proto.scalar) = "cosmos.ValidatorAddressString"];
  cosmos.base.v1beta1.Coin amount = 4 [(gogoproto.nullable) = false];
}

// MsgNonVotingUndelegateResponse
message MsgNonVotingUndelegateResponse {}

// MsgClaimRewards
message MsgClaimRewards {
  option (cosmos.msg.v1.signer) = "owner";
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 lockup_account_id = 2;
  string validator_address = 3 [(cosmos_proto.scalar) = "cosmos.ValidatorAddressString"];
}

// MsgClaimRewardsResponse
message MsgClaimRewardsResponse {}

// MsgSend
message MsgSend {
  option (cosmos.msg.v1.signer) = "owner";
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 lockup_account_id = 2;
  string recipient = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated cosmos.base.v1beta1.Coin amount = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// MsgSendResponse
message MsgSendResponse {}
