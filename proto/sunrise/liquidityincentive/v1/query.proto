syntax = "proto3";
package sunrise.liquidityincentive.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "sunrise/liquidityincentive/v1/bribe.proto";
import "sunrise/liquidityincentive/v1/epoch.proto";
import "sunrise/liquidityincentive/v1/gauge.proto";
import "sunrise/liquidityincentive/v1/params.proto";

option go_package = "github.com/sunriselayer/sunrise/x/liquidityincentive/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sunrise/liquidityincentive/v1/params";
  }

  // Epoch
  rpc Epoch(QueryEpochRequest) returns (QueryEpochResponse) {
    option (google.api.http).get = "/sunrise/liquidityincentive/v1/epochs/{id}";
  }
  // Epochs
  rpc Epochs(QueryEpochsRequest) returns (QueryEpochsResponse) {
    option (google.api.http).get = "/sunrise/liquidityincentive/v1/epochs";
  }

  // Vote
  rpc Vote(QueryVoteRequest) returns (QueryVoteResponse) {
    option (google.api.http).get = "/sunrise/liquidityincentive/v1/votes/{address}";
  }
  // Votes
  rpc Votes(QueryVotesRequest) returns (QueryVotesResponse) {
    option (google.api.http).get = "/sunrise/liquidityincentive/v1/votes";
  }

  // Bribes queries bribes with optional filters for epoch_id and pool_id.
  rpc Bribes(QueryBribesRequest) returns (QueryBribesResponse) {
    option (google.api.http).get = "/sunrise/liquidityincentive/v1/bribes";
  }
  // Bribe queries a Bribe by its ID.
  rpc Bribe(QueryBribeRequest) returns (QueryBribeResponse) {
    option (google.api.http).get = "/sunrise/liquidityincentive/v1/bribes/{id}";
  }

  // BribeAllocations queries bribe allocations with an optional filter for address.
  rpc BribeAllocations(QueryBribeAllocationsRequest) returns (QueryBribeAllocationsResponse) {
    option (google.api.http).get = "/sunrise/liquidityincentive/v1/bribe-allocations";
  }
  // BribeAllocation queries a BribeAllocation by address, epoch ID, and pool ID.
  rpc BribeAllocation(QueryBribeAllocationRequest) returns (QueryBribeAllocationResponse) {
    option (google.api.http).get = "/sunrise/liquidityincentive/v1/bribe-allocations/{address}/{epoch_id}/{pool_id}";
  }

  // TallyResult queries the tally of next epoch.
  rpc TallyResult(QueryTallyResultRequest) returns (QueryTallyResultResponse) {
    option (google.api.http).get = "/sunrise/liquidityincentive/v1/tally";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryEpochRequest
message QueryEpochRequest {
  uint64 id = 1;
}

// QueryEpochResponse
message QueryEpochResponse {
  Epoch epoch = 1 [(gogoproto.nullable) = false];
}

// QueryEpochsRequest
message QueryEpochsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryEpochsResponse
message QueryEpochsResponse {
  repeated Epoch epochs = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryVoteRequest
message QueryVoteRequest {
  string address = 1;
}

// QueryVoteResponse
message QueryVoteResponse {
  Vote vote = 1 [(gogoproto.nullable) = false];
}

// QueryVotesRequest
message QueryVotesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryVotesResponse
message QueryVotesResponse {
  repeated Vote votes = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryBribesRequest
message QueryBribesRequest {
  string epoch_id = 1; // Optional filter by epoch_id. If empty, not applied.
  string pool_id = 2; // Optional filter by pool_id. If empty, not applied.
}

// QueryBribesResponse
message QueryBribesResponse {
  repeated Bribe bribes = 1 [(gogoproto.nullable) = false];
}

// QueryBribeRequest
message QueryBribeRequest {
  uint64 id = 1;
}

// QueryBribeResponse
message QueryBribeResponse {
  Bribe bribe = 1 [(gogoproto.nullable) = false];
}

// QueryBribeAllocationsRequest
message QueryBribeAllocationsRequest {
  string address = 1; // Optional filter by address. If empty, not applied.
  string epoch_id = 2; // Optional filter by epoch_id. If empty, not applied.
}

// QueryBribeAllocationsResponse
message QueryBribeAllocationsResponse {
  repeated BribeAllocation bribe_allocations = 1 [(gogoproto.nullable) = false];
}

// QueryBribeAllocationRequest
message QueryBribeAllocationRequest {
  string address = 1;
  string epoch_id = 2;
  string pool_id = 3;
}

// QueryBribeAllocationResponse
message QueryBribeAllocationResponse {
  BribeAllocation bribe_allocation = 1 [(gogoproto.nullable) = false];
}

// QueryTallyResultRequest
message QueryTallyResultRequest {}

// QueryTallyResultResponse
message QueryTallyResultResponse {
  int64 total_voting_power = 1;
  repeated Gauge gauges = 2 [(gogoproto.nullable) = false];
}
