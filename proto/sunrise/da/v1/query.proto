syntax = "proto3";
package sunrise.da.v1;

// import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "sunrise/da/v1/genesis.proto";
import "sunrise/da/v1/params.proto";

option go_package = "github.com/sunriselayer/sunrise/x/da/types";

// Query defines the gRPC querier service.
service Query {
  // Params queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sunrise/da/v1/params";
  }

  // ValidatorsPowerSnapshot
  rpc ValidatorsPowerSnapshot(QueryValidatorsPowerSnapshotRequest) returns (QueryValidatorsPowerSnapshotResponse) {
    option (google.api.http).get = "/sunrise/da/v1/validators/power_snapshots/{block_height}";
  }

  // CommitmentKey
  rpc CommitmentKey(QueryCommitmentKeyRequest) returns (QueryCommitmentKeyResponse) {
    option (google.api.http).get = "/sunrise/da/v1/validators/{validator_address}/commitment_key";
  }

  // ShardIndices
  rpc ShardIndices(QueryShardIndicesRequest) returns (QueryShardIndicesResponse) {
    option (google.api.http).get = "/sunrise/da/v1/validators/{validator_address}/shard_indices";
  }

  // BlobDeclaration
  rpc BlobDeclaration(QueryBlobDeclarationRequest) returns (QueryBlobDeclarationResponse) {
    option (google.api.http).get = "/sunrise/da/v1/blob_declarations/{shards_merkle_root}";
  }

  // BlobCommitment
  rpc BlobCommitment(QueryBlobCommitmentRequest) returns (QueryBlobCommitmentResponse) {
    option (google.api.http).get = "/sunrise/da/v1/blob_commitments/{shards_merkle_root}";
  }

  // Challenges
  rpc Challenges(QueryChallengesRequest) returns (QueryChallengesResponse) {
    option (google.api.http).get = "/sunrise/da/v1/challenges/{shards_merkle_root}";
  }

  // Challenge
  rpc Challenge(QueryChallengeRequest) returns (QueryChallengeResponse) {
    option (google.api.http).get = "/sunrise/da/v1/challenges/{shards_merkle_root}/{shard_index}/{evaluation_point_index}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryValidatorsPowerSnapshotRequest is request type for the
// Query/ValidatorsPowerSnapshot RPC method.
message QueryValidatorsPowerSnapshotRequest {
  int64 block_height = 1;
}

// QueryValidatorsPowerSnapshotResponse is response type for the
// Query/ValidatorsPowerSnapshot RPC method.
message QueryValidatorsPowerSnapshotResponse {
  ValidatorsPowerSnapshot validators_power_snapshot = 1 [(gogoproto.nullable) = false];
}

// QueryCommitmentKeyRequest is request type for the
// Query/CommitmentKey RPC method.
message QueryCommitmentKeyRequest {
  string validator_address = 1 [(cosmos_proto.scalar) = "cosmos.ValidatorAddressString"];
}

// QueryCommitmentKeyResponse is response type for the
// Query/CommitmentKey RPC method.
message QueryCommitmentKeyResponse {
  google.protobuf.Any pubkey = 1 [
    (cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey",
    (gogoproto.nullable) = false
  ];
}

// QueryShardIndicesRequest is request type for the
// Query/ShardIndices RPC method.
message QueryShardIndicesRequest {
  string validator_address = 1 [(cosmos_proto.scalar) = "cosmos.ValidatorAddressString"];
  bytes shards_merkle_root = 2;
  uint32 shard_count = 3;
  uint32 shard_count_per_validator = 4;
}

// QueryShardIndicesResponse is response type for the
// Query/ShardIndices RPC method.
message QueryShardIndicesResponse {
  repeated uint32 shard_indices = 1;
}

// QueryBlobDeclarationRequest is request type for the
// Query/BlobDeclaration RPC method.
message QueryBlobDeclarationRequest {
  bytes shards_merkle_root = 1;
}

// QueryBlobDeclarationResponse is response type for the
// Query/BlobDeclaration RPC method.
message QueryBlobDeclarationResponse {
  BlobDeclaration blob_declaration = 1 [(gogoproto.nullable) = false];
}

// QueryBlobCommitmentRequest is request type for the
// Query/BlobCommitment RPC method.
message QueryBlobCommitmentRequest {
  bytes shards_merkle_root = 1;
}

// QueryBlobCommitmentResponse is response type for the
// Query/BlobCommitment RPC method.
message QueryBlobCommitmentResponse {
  BlobCommitment blob_commitment = 1 [(gogoproto.nullable) = false];
}

// QueryChallengesRequest is request type for the
// Query/Challenges RPC method.
message QueryChallengesRequest {
  bytes shards_merkle_root = 1;
  // cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryChallengesResponse is response type for the
// Query/Challenges RPC method.
message QueryChallengesResponse {
  repeated Challenge challenges = 1 [(gogoproto.nullable) = false];
  // cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryChallengeRequest is request type for the
// Query/Challenge RPC method.
message QueryChallengeRequest {
  bytes shards_merkle_root = 1;
  uint32 shard_index = 2;
  uint32 evaluation_point_index = 3;
}

// QueryChallengeResponse is response type for the
// Query/Challenge RPC method.
message QueryChallengeResponse {
  Challenge challenge = 1 [(gogoproto.nullable) = false];
}
