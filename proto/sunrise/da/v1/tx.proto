syntax = "proto3";
package sunrise.da.v1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/sunriselayer/sunrise/x/da/types";

// MsgDeclareBlob
message MsgDeclareBlob {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // Poseidon
  bytes shards_root = 2;
  uint64 size = 3;
  // Poseidon
  bytes kzg_commitments_root = 4;
  repeated cosmos.base.v1beta1.Coin aggregation_rewards = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// MsgDeclareBlobResponse
message MsgDeclareBlobResponse {}

// MsgAggregateAvailability
message MsgAggregateAvailability {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated AvailabilityCommitment commitments = 2 [(gogoproto.nullable) = false];
  // Sign message is protobuf serialized AvailabilityCommitment
  // The signer is the validator's deputy
  repeated bytes signatures = 3 [(gogoproto.nullable) = false];
}

// MsgAggregateAvailabilityResponse
message MsgAggregateAvailabilityResponse {}

// AvailabilityCommitment
message AvailabilityCommitment {
  string validator = 1 [(cosmos_proto.scalar) = "cosmos.ValidatorAddressString"];
  // Poseidon
  bytes blob_shards_root = 2;
  bool is_valid_declaration = 3;
  repeated ShardAvailability shard_availabilities = 4 [(gogoproto.nullable) = false];
}

// ShardAvailability
message ShardAvailability {
  uint32 index = 1;
  bool availability = 2;
}

// MsgChallengeUnavailability
message MsgChallengeUnavailability {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string validator = 2 [(cosmos_proto.scalar) = "cosmos.ValidatorAddressString"];
  uint32 shard_index = 3;
}

// MsgChallengeUnavailabilityResponse
message MsgChallengeUnavailabilityResponse {}

// MsgRespondToChallenge
message MsgRespondToChallenge {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string validator = 2 [(cosmos_proto.scalar) = "cosmos.ValidatorAddressString"];
  uint64 challenge_id = 3;
  bytes kzg_commitment = 4;
  bytes merkle_path = 5;
  bytes kzg_opening_proof = 6;
}

// MsgRespondToChallengeResponse
message MsgRespondToChallengeResponse {}

// MsgRegisterDeputy
message MsgRegisterDeputy {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string deputy = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgRegisterDeputyResponse
message MsgRegisterDeputyResponse {}

// MsgUnregisterDeputy
message MsgUnregisterDeputy {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgUnregisterDeputyResponse
message MsgUnregisterDeputyResponse {}
