syntax = "proto3";
package sunrise.da.v1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "sunrise/da/kzg/v1/opening_proof.proto";
import "sunrise/da/v1/params.proto";

option go_package = "github.com/sunriselayer/sunrise/x/da/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // RegisterCommitmentKey defines a (user) operation for registering a commitment key.
  rpc RegisterCommitmentKey(MsgRegisterCommitmentKey) returns (MsgRegisterCommitmentKeyResponse);
  // UnregisterCommitmentKey defines a (user) operation for unregistering a commitment key.
  rpc UnregisterCommitmentKey(MsgUnregisterCommitmentKey) returns (MsgUnregisterCommitmentKeyResponse);
  // DeclareBlob defines a (user) operation for declaring a blob.
  rpc DeclareBlob(MsgDeclareBlob) returns (MsgDeclareBlobResponse);
  // BundleCommitments defines a (user) operation for bundling commitments.
  rpc BundleCommitments(MsgBundleCommitments) returns (MsgBundleCommitmentsResponse);
  // ChallengeUnavailability defines a (user) operation for challenging the unavailability of a blob.
  rpc ChallengeUnavailability(MsgChallengeUnavailability) returns (MsgChallengeUnavailabilityResponse);
  // RespondToChallenge defines a (user) operation for responding to a challenge.
  rpc RespondToChallenge(MsgRespondToChallenge) returns (MsgRespondToChallengeResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgRegisterCommitmentKey
message MsgRegisterCommitmentKey {
  option (cosmos.msg.v1.signer) = "validator";
  string validator = 1 [(cosmos_proto.scalar) = "cosmos.ValidatorAddressString"];
  google.protobuf.Any pubkey = 2 [(cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey"];
}

// MsgRegisterCommitmentKeyResponse
message MsgRegisterCommitmentKeyResponse {}

// MsgUnregisterCommitmentKey
message MsgUnregisterCommitmentKey {
  option (cosmos.msg.v1.signer) = "validator";
  string validator = 1 [(cosmos_proto.scalar) = "cosmos.ValidatorAddressString"];
}

// MsgUnregisterCommitmentKeyResponse
message MsgUnregisterCommitmentKeyResponse {}

// MsgDeclareBlob
message MsgDeclareBlob {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 metadata_size = 2;
  // Poseidon
  bytes shards_merkle_root = 3;
  uint32 shard_count = 4;
  // Poseidon
  bytes kzg_commitments_merkle_root = 5;

  repeated cosmos.base.v1beta1.Coin bundler_rewards = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// MsgDeclareBlobResponse
message MsgDeclareBlobResponse {}

// MsgBundleCommitments
message MsgBundleCommitments {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated AvailabilityCommitment commitments = 2 [(gogoproto.nullable) = false];
  // Sign message is protobuf serialized AvailabilityCommitment
  // The signer is the validator's deputy
  repeated bytes signatures = 3 [(gogoproto.nullable) = false];
}

// MsgBundleCommitmentsResponse
message MsgBundleCommitmentsResponse {}

// AvailabilityCommitment
message AvailabilityCommitment {
  // Poseidon
  bytes shards_merkle_root = 1;
  // Replay protection
  int64 declaration_height = 2;
  string validator = 3 [(cosmos_proto.scalar) = "cosmos.ValidatorAddressString"];
  bool is_valid_declaration = 4;
  repeated ShardAvailability shard_availabilities = 5 [(gogoproto.nullable) = false];
}

// ShardAvailability
message ShardAvailability {
  uint32 index = 1;
  bool availability = 2;
}

// MsgChallengeUnavailability
message MsgChallengeUnavailability {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // Poseidon
  bytes shards_merkle_root = 2;
  uint32 shard_index = 3;
  uint32 evaluation_point_index = 4;
}

// MsgChallengeUnavailabilityResponse
message MsgChallengeUnavailabilityResponse {}

// MsgRespondToChallenge
message MsgRespondToChallenge {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  bytes shards_merkle_root = 2;
  uint32 shard_index = 3;
  uint32 evaluation_point_index = 4;
  bytes kzg_commitment = 5;
  // array of binary of 33 bytes, 1byte 0x00 or 0x01 and 32 bytes hash
  repeated bytes kzg_commitment_merkle_path = 6 [(gogoproto.nullable) = false];
  sunrise.da.kzg.v1.OpeningProof kzg_opening_proof = 7 [(gogoproto.nullable) = false];
}

// MsgRespondToChallengeResponse
message MsgRespondToChallengeResponse {}
